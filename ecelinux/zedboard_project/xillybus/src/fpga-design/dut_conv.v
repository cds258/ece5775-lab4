// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.2
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module dut_conv (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0,
        threshold_V_address0,
        threshold_V_ce0,
        threshold_V_q0,
        M,
        N,
        I,
        L
);

parameter    ap_ST_st1_fsm_0 = 12'b1;
parameter    ap_ST_st2_fsm_1 = 12'b10;
parameter    ap_ST_st3_fsm_2 = 12'b100;
parameter    ap_ST_st4_fsm_3 = 12'b1000;
parameter    ap_ST_st5_fsm_4 = 12'b10000;
parameter    ap_ST_st6_fsm_5 = 12'b100000;
parameter    ap_ST_st7_fsm_6 = 12'b1000000;
parameter    ap_ST_st8_fsm_7 = 12'b10000000;
parameter    ap_ST_st9_fsm_8 = 12'b100000000;
parameter    ap_ST_st10_fsm_9 = 12'b1000000000;
parameter    ap_ST_st11_fsm_10 = 12'b10000000000;
parameter    ap_ST_st12_fsm_11 = 12'b100000000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv32_5 = 32'b101;
parameter    ap_const_lv32_6 = 32'b110;
parameter    ap_const_lv32_7 = 32'b111;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    ap_const_lv32_9 = 32'b1001;
parameter    ap_const_lv32_A = 32'b1010;
parameter    ap_const_lv6_0 = 6'b000000;
parameter    ap_const_lv5_0 = 5'b00000;
parameter    ap_const_lv32_B = 32'b1011;
parameter    ap_const_lv9_0 = 9'b000000000;
parameter    ap_const_lv2_0 = 2'b00;
parameter    ap_const_lv5_1E = 5'b11110;
parameter    ap_const_lv5_1F = 5'b11111;
parameter    ap_const_lv6_1 = 6'b1;
parameter    ap_const_lv5_1 = 5'b1;
parameter    ap_const_lv3_0 = 3'b000;
parameter    ap_const_lv2_3 = 2'b11;
parameter    ap_const_lv2_1 = 2'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [12:0] input_r_address0;
output   input_r_ce0;
input  [0:0] input_r_q0;
output  [12:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [0:0] output_r_d0;
output  [12:0] threshold_V_address0;
output   threshold_V_ce0;
input  [7:0] threshold_V_q0;
input  [6:0] M;
input  [6:0] N;
input  [5:0] I;
input  [0:0] L;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_r_ce0;
reg output_r_ce0;
reg output_r_we0;
reg threshold_V_ce0;

(* fsm_encoding = "none" *) reg   [11:0] ap_CS_fsm;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_29;
wire   [12:0] w_conv1_address0;
reg    w_conv1_ce0;
wire   [0:0] w_conv1_q0;
wire   [12:0] w_conv2_address0;
reg    w_conv2_ce0;
wire   [0:0] w_conv2_q0;
wire   [0:0] L_read_read_fu_88_p2;
wire   [4:0] O_fu_327_p2;
reg   [4:0] O_reg_744;
wire   [12:0] O_cast25_cast_fu_333_p1;
reg   [12:0] O_cast25_cast_reg_750;
wire   [8:0] O_cast24_cast_fu_337_p1;
reg   [8:0] O_cast24_cast_reg_755;
wire   [4:0] tmp_i_fu_341_p2;
reg   [4:0] tmp_i_reg_760;
wire   [5:0] tmp_25_fu_347_p1;
reg   [5:0] tmp_25_reg_766;
wire   [8:0] I_cast5_fu_351_p1;
reg   [8:0] I_cast5_reg_771;
wire   [8:0] N_cast_fu_355_p1;
reg   [8:0] N_cast_reg_776;
wire   [12:0] I_cast_fu_359_p1;
reg   [12:0] I_cast_reg_781;
wire   [8:0] n_cast1_fu_363_p1;
reg   [8:0] n_cast1_reg_786;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_101;
wire   [5:0] n_2_fu_376_p2;
reg   [5:0] n_2_reg_794;
wire   [8:0] tmp_14_fu_382_p2;
reg   [8:0] tmp_14_reg_799;
wire   [0:0] tmp_s_fu_371_p2;
wire   [12:0] x_cast_fu_387_p1;
reg   [12:0] x_cast_reg_804;
reg    ap_sig_cseq_ST_st3_fsm_2;
reg    ap_sig_119;
wire   [4:0] x_4_fu_396_p2;
reg   [4:0] x_4_reg_812;
wire   [8:0] y_cast_fu_402_p1;
reg   [8:0] y_cast_reg_817;
reg    ap_sig_cseq_ST_st4_fsm_3;
reg    ap_sig_130;
wire   [4:0] y_4_fu_411_p2;
reg   [4:0] y_4_reg_825;
wire   [12:0] tmp5_fu_426_p2;
reg   [12:0] tmp5_reg_830;
wire   [0:0] exitcond3_fu_406_p2;
wire   [12:0] o_index_fu_431_p2;
reg   [12:0] o_index_reg_835;
reg    ap_sig_cseq_ST_st5_fsm_4;
reg    ap_sig_146;
wire   [8:0] next_mul4_fu_435_p2;
reg   [8:0] next_mul4_reg_840;
reg    ap_sig_cseq_ST_st6_fsm_5;
reg    ap_sig_155;
wire   [8:0] next_mul_fu_440_p2;
reg   [8:0] next_mul_reg_845;
wire   [4:0] m_4_fu_454_p2;
reg   [4:0] m_4_reg_853;
wire   [13:0] tmp9_cast_fu_487_p1;
reg   [13:0] tmp9_cast_reg_858;
wire   [0:0] tmp_15_fu_449_p2;
wire   [63:0] tmp_17_fu_491_p1;
reg   [63:0] tmp_17_reg_863;
wire   [4:0] c_cast_fu_495_p1;
reg   [4:0] c_cast_reg_873;
reg    ap_sig_cseq_ST_st7_fsm_6;
reg    ap_sig_179;
wire   [1:0] c_3_fu_505_p2;
reg   [1:0] c_3_reg_881;
wire   [12:0] x_assign_cast_fu_517_p1;
reg   [12:0] x_assign_cast_reg_886;
wire   [0:0] exitcond2_fu_499_p2;
wire   [0:0] tmp_i_26_fu_521_p2;
reg   [0:0] tmp_i_26_reg_891;
wire   [0:0] notlhs_i_fu_527_p2;
reg   [0:0] notlhs_i_reg_896;
wire   [31:0] sum_1_fu_544_p2;
wire   [1:0] r_2_fu_564_p2;
reg   [1:0] r_2_reg_909;
reg    ap_sig_cseq_ST_st8_fsm_7;
reg    ap_sig_203;
wire   [8:0] tmp6_fu_604_p2;
reg   [8:0] tmp6_reg_914;
wire   [0:0] exitcond_fu_558_p2;
wire   [0:0] sel_tmp1_fu_659_p2;
reg   [0:0] sel_tmp1_reg_929;
wire   [31:0] mac_num_2_fu_664_p3;
reg   [31:0] mac_num_2_reg_934;
wire   [12:0] i_index_fu_680_p2;
reg   [12:0] i_index_reg_939;
reg    ap_sig_cseq_ST_st9_fsm_8;
reg    ap_sig_231;
reg   [0:0] w_conv1_load_reg_944;
reg   [0:0] w_conv2_load_reg_949;
reg    ap_sig_cseq_ST_st10_fsm_9;
reg    ap_sig_246;
wire   [31:0] one_out_3_fu_716_p3;
reg    ap_sig_cseq_ST_st11_fsm_10;
reg    ap_sig_256;
reg   [5:0] n_reg_172;
wire   [0:0] exitcond1_fu_391_p2;
reg   [4:0] x_reg_183;
reg   [4:0] y_reg_195;
reg    ap_sig_cseq_ST_st12_fsm_11;
reg    ap_sig_278;
reg   [31:0] sum_reg_207;
reg   [4:0] m_reg_219;
reg   [8:0] phi_mul_reg_230;
reg   [8:0] phi_mul3_reg_242;
reg   [31:0] one_out_reg_253;
reg   [31:0] mac_num_reg_265;
reg   [1:0] c_reg_277;
reg   [31:0] one_out_1_reg_288;
reg   [31:0] mac_num_1_reg_300;
reg   [1:0] r_reg_312;
wire  signed [63:0] tmp_23_fu_641_p1;
wire   [63:0] tmp_22_fu_685_p1;
wire   [4:0] tmp_24_fu_323_p1;
wire   [6:0] n_cast_fu_367_p1;
wire   [5:0] tmp_14_fu_382_p0;
wire   [4:0] tmp_14_fu_382_p1;
wire   [8:0] tmp4_fu_417_p2;
wire   [8:0] tmp5_fu_426_p0;
wire   [4:0] tmp5_fu_426_p1;
wire   [5:0] m_cast_fu_445_p1;
wire   [8:0] tmp_16_fu_460_p2;
wire   [11:0] p_shl_fu_469_p3;
wire   [12:0] p_shl_cast_fu_477_p1;
wire   [12:0] tmp_29_cast1_fu_465_p1;
wire   [12:0] tmp9_fu_481_p2;
wire   [4:0] x_assign_fu_511_p2;
wire   [31:0] tmp_20_fu_538_p2;
wire   [31:0] tmp_30_fu_532_p2;
wire   [4:0] r_cast1_fu_554_p1;
wire   [4:0] y_assign_fu_570_p2;
wire   [0:0] tmp_12_i_fu_582_p2;
wire   [0:0] tmp_fu_587_p2;
wire   [0:0] notrhs_i_fu_576_p2;
wire   [8:0] r_cast_fu_550_p1;
wire   [8:0] tmp8_fu_598_p2;
wire   [3:0] p_shl1_fu_609_p3;
wire   [4:0] p_shl1_cast_fu_617_p1;
wire   [4:0] tmp_21_fu_621_p2;
wire   [4:0] tmp10_fu_627_p2;
wire  signed [13:0] tmp10_cast_fu_632_p1;
wire   [13:0] w_index_fu_636_p2;
wire   [0:0] or_cond2_i_fu_592_p2;
wire   [0:0] sel_tmp_fu_653_p2;
wire   [31:0] mac_num_3_fu_647_p2;
wire   [8:0] tmp7_fu_675_p0;
wire   [5:0] tmp7_fu_675_p1;
wire   [12:0] tmp7_fu_675_p2;
wire   [0:0] p_pn_in_in_v_fu_689_p3;
wire   [0:0] tmp11_fu_694_p2;
wire   [0:0] p_pn_in_fu_700_p2;
wire   [31:0] p_pn_fu_706_p1;
wire   [31:0] one_out_2_fu_710_p2;
wire  signed [31:0] tmp_18_fu_723_p1;
reg   [11:0] ap_NS_fsm;
wire   [12:0] tmp5_fu_426_p00;
wire   [12:0] tmp7_fu_675_p00;
wire   [8:0] tmp_14_fu_382_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 12'b1;
end

dut_conv_w_conv1 #(
    .DataWidth( 1 ),
    .AddressRange( 4608 ),
    .AddressWidth( 13 ))
w_conv1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(w_conv1_address0),
    .ce0(w_conv1_ce0),
    .q0(w_conv1_q0)
);

dut_conv_w_conv2 #(
    .DataWidth( 1 ),
    .AddressRange( 4608 ),
    .AddressWidth( 13 ))
w_conv2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(w_conv2_address0),
    .ce0(w_conv2_ce0),
    .q0(w_conv2_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st8_fsm_7) & ~(1'b0 == exitcond_fu_558_p2))) begin
        c_reg_277 <= c_3_reg_881;
    end else if (((1'b1 == ap_sig_cseq_ST_st6_fsm_5) & ~(1'b0 == tmp_15_fu_449_p2))) begin
        c_reg_277 <= ap_const_lv2_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st7_fsm_6) & ~(1'b0 == exitcond2_fu_499_p2))) begin
        m_reg_219 <= m_4_reg_853;
    end else if ((1'b1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        m_reg_219 <= ap_const_lv5_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st11_fsm_10)) begin
        mac_num_1_reg_300 <= mac_num_2_reg_934;
    end else if (((1'b1 == ap_sig_cseq_ST_st7_fsm_6) & (1'b0 == exitcond2_fu_499_p2))) begin
        mac_num_1_reg_300 <= mac_num_reg_265;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st8_fsm_7) & ~(1'b0 == exitcond_fu_558_p2))) begin
        mac_num_reg_265 <= mac_num_1_reg_300;
    end else if (((1'b1 == ap_sig_cseq_ST_st6_fsm_5) & ~(1'b0 == tmp_15_fu_449_p2))) begin
        mac_num_reg_265 <= ap_const_lv32_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st3_fsm_2) & ~(1'b0 == exitcond1_fu_391_p2))) begin
        n_reg_172 <= n_2_reg_794;
    end else if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0))) begin
        n_reg_172 <= ap_const_lv6_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st11_fsm_10)) begin
        one_out_1_reg_288 <= one_out_3_fu_716_p3;
    end else if (((1'b1 == ap_sig_cseq_ST_st7_fsm_6) & (1'b0 == exitcond2_fu_499_p2))) begin
        one_out_1_reg_288 <= one_out_reg_253;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st8_fsm_7) & ~(1'b0 == exitcond_fu_558_p2))) begin
        one_out_reg_253 <= one_out_1_reg_288;
    end else if (((1'b1 == ap_sig_cseq_ST_st6_fsm_5) & ~(1'b0 == tmp_15_fu_449_p2))) begin
        one_out_reg_253 <= ap_const_lv32_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st7_fsm_6) & ~(1'b0 == exitcond2_fu_499_p2))) begin
        phi_mul3_reg_242 <= next_mul4_reg_840;
    end else if ((1'b1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        phi_mul3_reg_242 <= ap_const_lv9_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st7_fsm_6) & ~(1'b0 == exitcond2_fu_499_p2))) begin
        phi_mul_reg_230 <= next_mul_reg_845;
    end else if ((1'b1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        phi_mul_reg_230 <= ap_const_lv9_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st11_fsm_10)) begin
        r_reg_312 <= r_2_reg_909;
    end else if (((1'b1 == ap_sig_cseq_ST_st7_fsm_6) & (1'b0 == exitcond2_fu_499_p2))) begin
        r_reg_312 <= ap_const_lv2_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st7_fsm_6) & ~(1'b0 == exitcond2_fu_499_p2))) begin
        sum_reg_207 <= sum_1_fu_544_p2;
    end else if ((1'b1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        sum_reg_207 <= ap_const_lv32_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st4_fsm_3) & ~(1'b0 == exitcond3_fu_406_p2))) begin
        x_reg_183 <= x_4_reg_812;
    end else if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & ~(tmp_s_fu_371_p2 == 1'b0))) begin
        x_reg_183 <= ap_const_lv5_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st12_fsm_11)) begin
        y_reg_195 <= y_4_reg_825;
    end else if (((1'b1 == ap_sig_cseq_ST_st3_fsm_2) & (1'b0 == exitcond1_fu_391_p2))) begin
        y_reg_195 <= ap_const_lv5_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0))) begin
        I_cast5_reg_771[5 : 0] <= I_cast5_fu_351_p1[5 : 0];
        I_cast_reg_781[5 : 0] <= I_cast_fu_359_p1[5 : 0];
        N_cast_reg_776[6 : 0] <= N_cast_fu_355_p1[6 : 0];
        O_cast24_cast_reg_755[4 : 0] <= O_cast24_cast_fu_337_p1[4 : 0];
        O_cast25_cast_reg_750[4 : 0] <= O_cast25_cast_fu_333_p1[4 : 0];
        O_reg_744 <= O_fu_327_p2;
        tmp_25_reg_766 <= tmp_25_fu_347_p1;
        tmp_i_reg_760 <= tmp_i_fu_341_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st7_fsm_6)) begin
        c_3_reg_881 <= c_3_fu_505_p2;
        c_cast_reg_873[1 : 0] <= c_cast_fu_495_p1[1 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st9_fsm_8) & (1'b0 == sel_tmp1_reg_929))) begin
        i_index_reg_939 <= i_index_fu_680_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st6_fsm_5)) begin
        m_4_reg_853 <= m_4_fu_454_p2;
        next_mul4_reg_840 <= next_mul4_fu_435_p2;
        next_mul_reg_845 <= next_mul_fu_440_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st8_fsm_7) & (1'b0 == exitcond_fu_558_p2))) begin
        mac_num_2_reg_934 <= mac_num_2_fu_664_p3;
        sel_tmp1_reg_929 <= sel_tmp1_fu_659_p2;
        tmp6_reg_914 <= tmp6_fu_604_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        n_2_reg_794 <= n_2_fu_376_p2;
        n_cast1_reg_786[5 : 0] <= n_cast1_fu_363_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st7_fsm_6) & (1'b0 == exitcond2_fu_499_p2))) begin
        notlhs_i_reg_896 <= notlhs_i_fu_527_p2;
        tmp_i_26_reg_891 <= tmp_i_26_fu_521_p2;
        x_assign_cast_reg_886[4 : 0] <= x_assign_cast_fu_517_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        o_index_reg_835 <= o_index_fu_431_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st8_fsm_7)) begin
        r_2_reg_909 <= r_2_fu_564_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st4_fsm_3) & (1'b0 == exitcond3_fu_406_p2))) begin
        tmp5_reg_830 <= tmp5_fu_426_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st6_fsm_5) & ~(1'b0 == tmp_15_fu_449_p2))) begin
        tmp9_cast_reg_858[12 : 0] <= tmp9_cast_fu_487_p1[12 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & ~(tmp_s_fu_371_p2 == 1'b0))) begin
        tmp_14_reg_799 <= tmp_14_fu_382_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st6_fsm_5) & (1'b0 == tmp_15_fu_449_p2))) begin
        tmp_17_reg_863[12 : 0] <= tmp_17_fu_491_p1[12 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((L_read_read_fu_88_p2 == 1'b0) & (1'b1 == ap_sig_cseq_ST_st9_fsm_8))) begin
        w_conv1_load_reg_944 <= w_conv1_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((~(L_read_read_fu_88_p2 == 1'b0) & (1'b1 == ap_sig_cseq_ST_st9_fsm_8))) begin
        w_conv2_load_reg_949 <= w_conv2_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        x_4_reg_812 <= x_4_fu_396_p2;
        x_cast_reg_804[4 : 0] <= x_cast_fu_387_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        y_4_reg_825 <= y_4_fu_411_p2;
        y_cast_reg_817[4 : 0] <= y_cast_fu_402_p1[4 : 0];
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_sig_cseq_ST_st1_fsm_0)) | ((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & (tmp_s_fu_371_p2 == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & (tmp_s_fu_371_p2 == 1'b0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_246) begin
        ap_sig_cseq_ST_st10_fsm_9 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st10_fsm_9 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_256) begin
        ap_sig_cseq_ST_st11_fsm_10 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st11_fsm_10 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_278) begin
        ap_sig_cseq_ST_st12_fsm_11 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st12_fsm_11 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_29) begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_101) begin
        ap_sig_cseq_ST_st2_fsm_1 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_119) begin
        ap_sig_cseq_ST_st3_fsm_2 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st3_fsm_2 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_130) begin
        ap_sig_cseq_ST_st4_fsm_3 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st4_fsm_3 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_146) begin
        ap_sig_cseq_ST_st5_fsm_4 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st5_fsm_4 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_155) begin
        ap_sig_cseq_ST_st6_fsm_5 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st6_fsm_5 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_179) begin
        ap_sig_cseq_ST_st7_fsm_6 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st7_fsm_6 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_203) begin
        ap_sig_cseq_ST_st8_fsm_7 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st8_fsm_7 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_231) begin
        ap_sig_cseq_ST_st9_fsm_8 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st9_fsm_8 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st10_fsm_9)) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st12_fsm_11)) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st12_fsm_11)) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st6_fsm_5)) begin
        threshold_V_ce0 = 1'b1;
    end else begin
        threshold_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st8_fsm_7)) begin
        w_conv1_ce0 = 1'b1;
    end else begin
        w_conv1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st8_fsm_7)) begin
        w_conv2_ce0 = 1'b1;
    end else begin
        w_conv2_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : begin
            if (~(ap_start == 1'b0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : begin
            if ((tmp_s_fu_371_p2 == 1'b0)) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end
        end
        ap_ST_st3_fsm_2 : begin
            if (~(1'b0 == exitcond1_fu_391_p2)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st4_fsm_3;
            end
        end
        ap_ST_st4_fsm_3 : begin
            if (~(1'b0 == exitcond3_fu_406_p2)) begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end else begin
                ap_NS_fsm = ap_ST_st5_fsm_4;
            end
        end
        ap_ST_st5_fsm_4 : begin
            ap_NS_fsm = ap_ST_st6_fsm_5;
        end
        ap_ST_st6_fsm_5 : begin
            if (~(1'b0 == tmp_15_fu_449_p2)) begin
                ap_NS_fsm = ap_ST_st7_fsm_6;
            end else begin
                ap_NS_fsm = ap_ST_st12_fsm_11;
            end
        end
        ap_ST_st7_fsm_6 : begin
            if (~(1'b0 == exitcond2_fu_499_p2)) begin
                ap_NS_fsm = ap_ST_st6_fsm_5;
            end else begin
                ap_NS_fsm = ap_ST_st8_fsm_7;
            end
        end
        ap_ST_st8_fsm_7 : begin
            if (~(1'b0 == exitcond_fu_558_p2)) begin
                ap_NS_fsm = ap_ST_st7_fsm_6;
            end else begin
                ap_NS_fsm = ap_ST_st9_fsm_8;
            end
        end
        ap_ST_st9_fsm_8 : begin
            ap_NS_fsm = ap_ST_st10_fsm_9;
        end
        ap_ST_st10_fsm_9 : begin
            ap_NS_fsm = ap_ST_st11_fsm_10;
        end
        ap_ST_st11_fsm_10 : begin
            ap_NS_fsm = ap_ST_st8_fsm_7;
        end
        ap_ST_st12_fsm_11 : begin
            ap_NS_fsm = ap_ST_st4_fsm_3;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign I_cast5_fu_351_p1 = I;

assign I_cast_fu_359_p1 = I;

assign L_read_read_fu_88_p2 = L;

assign N_cast_fu_355_p1 = N;

assign O_cast24_cast_fu_337_p1 = O_fu_327_p2;

assign O_cast25_cast_fu_333_p1 = O_fu_327_p2;

assign O_fu_327_p2 = ($signed(ap_const_lv5_1E) + $signed(tmp_24_fu_323_p1));

always @ (*) begin
    ap_sig_101 = (1'b1 == ap_CS_fsm[ap_const_lv32_1]);
end

always @ (*) begin
    ap_sig_119 = (1'b1 == ap_CS_fsm[ap_const_lv32_2]);
end

always @ (*) begin
    ap_sig_130 = (1'b1 == ap_CS_fsm[ap_const_lv32_3]);
end

always @ (*) begin
    ap_sig_146 = (1'b1 == ap_CS_fsm[ap_const_lv32_4]);
end

always @ (*) begin
    ap_sig_155 = (1'b1 == ap_CS_fsm[ap_const_lv32_5]);
end

always @ (*) begin
    ap_sig_179 = (1'b1 == ap_CS_fsm[ap_const_lv32_6]);
end

always @ (*) begin
    ap_sig_203 = (1'b1 == ap_CS_fsm[ap_const_lv32_7]);
end

always @ (*) begin
    ap_sig_231 = (1'b1 == ap_CS_fsm[ap_const_lv32_8]);
end

always @ (*) begin
    ap_sig_246 = (1'b1 == ap_CS_fsm[ap_const_lv32_9]);
end

always @ (*) begin
    ap_sig_256 = (1'b1 == ap_CS_fsm[ap_const_lv32_A]);
end

always @ (*) begin
    ap_sig_278 = (1'b1 == ap_CS_fsm[ap_const_lv32_B]);
end

always @ (*) begin
    ap_sig_29 = (ap_CS_fsm[ap_const_lv32_0] == 1'b1);
end

assign c_3_fu_505_p2 = (c_reg_277 + ap_const_lv2_1);

assign c_cast_fu_495_p1 = c_reg_277;

assign exitcond1_fu_391_p2 = ((x_reg_183 == O_reg_744) ? 1'b1 : 1'b0);

assign exitcond2_fu_499_p2 = ((c_reg_277 == ap_const_lv2_3) ? 1'b1 : 1'b0);

assign exitcond3_fu_406_p2 = ((y_reg_195 == O_reg_744) ? 1'b1 : 1'b0);

assign exitcond_fu_558_p2 = ((r_reg_312 == ap_const_lv2_3) ? 1'b1 : 1'b0);

assign i_index_fu_680_p2 = (x_assign_cast_reg_886 + tmp7_fu_675_p2);

assign input_r_address0 = tmp_22_fu_685_p1;

assign m_4_fu_454_p2 = (m_reg_219 + ap_const_lv5_1);

assign m_cast_fu_445_p1 = m_reg_219;

assign mac_num_2_fu_664_p3 = ((sel_tmp1_fu_659_p2[0:0] === 1'b1) ? mac_num_1_reg_300 : mac_num_3_fu_647_p2);

assign mac_num_3_fu_647_p2 = (mac_num_1_reg_300 + ap_const_lv32_1);

assign n_2_fu_376_p2 = (n_reg_172 + ap_const_lv6_1);

assign n_cast1_fu_363_p1 = n_reg_172;

assign n_cast_fu_367_p1 = n_reg_172;

assign next_mul4_fu_435_p2 = (phi_mul3_reg_242 + N_cast_reg_776);

assign next_mul_fu_440_p2 = (phi_mul_reg_230 + I_cast5_reg_771);

assign notlhs_i_fu_527_p2 = ((tmp_i_reg_760 > x_assign_fu_511_p2) ? 1'b1 : 1'b0);

assign notrhs_i_fu_576_p2 = ((y_assign_fu_570_p2 != ap_const_lv5_0) ? 1'b1 : 1'b0);

assign o_index_fu_431_p2 = (tmp5_reg_830 + x_cast_reg_804);

assign one_out_2_fu_710_p2 = (one_out_1_reg_288 + p_pn_fu_706_p1);

assign one_out_3_fu_716_p3 = ((sel_tmp1_reg_929[0:0] === 1'b1) ? one_out_1_reg_288 : one_out_2_fu_710_p2);

assign or_cond2_i_fu_592_p2 = (tmp_fu_587_p2 & notrhs_i_fu_576_p2);

assign output_r_address0 = tmp_17_reg_863;

assign output_r_d0 = (($signed(sum_reg_207) > $signed(tmp_18_fu_723_p1)) ? 1'b1 : 1'b0);

assign p_pn_fu_706_p1 = p_pn_in_fu_700_p2;

assign p_pn_in_fu_700_p2 = (input_r_q0 ^ tmp11_fu_694_p2);

assign p_pn_in_in_v_fu_689_p3 = ((L[0:0] === 1'b1) ? w_conv2_load_reg_949 : w_conv1_load_reg_944);

assign p_shl1_cast_fu_617_p1 = p_shl1_fu_609_p3;

assign p_shl1_fu_609_p3 = {{r_reg_312}, {ap_const_lv2_0}};

assign p_shl_cast_fu_477_p1 = p_shl_fu_469_p3;

assign p_shl_fu_469_p3 = {{tmp_16_fu_460_p2}, {ap_const_lv3_0}};

assign r_2_fu_564_p2 = (r_reg_312 + ap_const_lv2_1);

assign r_cast1_fu_554_p1 = r_reg_312;

assign r_cast_fu_550_p1 = r_reg_312;

assign sel_tmp1_fu_659_p2 = (tmp_i_26_reg_891 | sel_tmp_fu_653_p2);

assign sel_tmp_fu_653_p2 = (or_cond2_i_fu_592_p2 ^ 1'b1);

assign sum_1_fu_544_p2 = (tmp_20_fu_538_p2 + tmp_30_fu_532_p2);

assign threshold_V_address0 = tmp_17_fu_491_p1;

assign tmp10_cast_fu_632_p1 = $signed(tmp10_fu_627_p2);

assign tmp10_fu_627_p2 = (c_cast_reg_873 + tmp_21_fu_621_p2);

assign tmp11_fu_694_p2 = (p_pn_in_in_v_fu_689_p3 ^ 1'b1);

assign tmp4_fu_417_p2 = (y_cast_fu_402_p1 + tmp_14_reg_799);

assign tmp5_fu_426_p0 = tmp5_fu_426_p00;

assign tmp5_fu_426_p00 = tmp4_fu_417_p2;

assign tmp5_fu_426_p1 = O_cast25_cast_reg_750;

assign tmp5_fu_426_p2 = (tmp5_fu_426_p0 * tmp5_fu_426_p1);

assign tmp6_fu_604_p2 = (tmp8_fu_598_p2 + y_cast_reg_817);

assign tmp7_fu_675_p0 = tmp7_fu_675_p00;

assign tmp7_fu_675_p00 = tmp6_reg_914;

assign tmp7_fu_675_p1 = I_cast_reg_781;

assign tmp7_fu_675_p2 = (tmp7_fu_675_p0 * tmp7_fu_675_p1);

assign tmp8_fu_598_p2 = (phi_mul_reg_230 + r_cast_fu_550_p1);

assign tmp9_cast_fu_487_p1 = tmp9_fu_481_p2;

assign tmp9_fu_481_p2 = (p_shl_cast_fu_477_p1 + tmp_29_cast1_fu_465_p1);

assign tmp_12_i_fu_582_p2 = ((tmp_i_reg_760 > y_assign_fu_570_p2) ? 1'b1 : 1'b0);

assign tmp_14_fu_382_p0 = tmp_14_fu_382_p00;

assign tmp_14_fu_382_p00 = n_reg_172;

assign tmp_14_fu_382_p1 = O_cast24_cast_reg_755;

assign tmp_14_fu_382_p2 = (tmp_14_fu_382_p0 * tmp_14_fu_382_p1);

assign tmp_15_fu_449_p2 = (($signed(m_cast_fu_445_p1) < $signed(tmp_25_reg_766)) ? 1'b1 : 1'b0);

assign tmp_16_fu_460_p2 = (n_cast1_reg_786 + phi_mul3_reg_242);

assign tmp_17_fu_491_p1 = o_index_reg_835;

assign tmp_18_fu_723_p1 = $signed(threshold_V_q0);

assign tmp_20_fu_538_p2 = (sum_reg_207 - mac_num_reg_265);

assign tmp_21_fu_621_p2 = (p_shl1_cast_fu_617_p1 - r_cast1_fu_554_p1);

assign tmp_22_fu_685_p1 = i_index_reg_939;

assign tmp_23_fu_641_p1 = $signed(w_index_fu_636_p2);

assign tmp_24_fu_323_p1 = I[4:0];

assign tmp_25_fu_347_p1 = M[5:0];

assign tmp_29_cast1_fu_465_p1 = tmp_16_fu_460_p2;

assign tmp_30_fu_532_p2 = one_out_reg_253 << ap_const_lv32_1;

assign tmp_fu_587_p2 = (notlhs_i_reg_896 & tmp_12_i_fu_582_p2);

assign tmp_i_26_fu_521_p2 = ((x_assign_fu_511_p2 == ap_const_lv5_0) ? 1'b1 : 1'b0);

assign tmp_i_fu_341_p2 = ($signed(ap_const_lv5_1F) + $signed(tmp_24_fu_323_p1));

assign tmp_s_fu_371_p2 = (($signed(n_cast_fu_367_p1) < $signed(N)) ? 1'b1 : 1'b0);

assign w_conv1_address0 = tmp_23_fu_641_p1;

assign w_conv2_address0 = tmp_23_fu_641_p1;

assign w_index_fu_636_p2 = ($signed(tmp10_cast_fu_632_p1) + $signed(tmp9_cast_reg_858));

assign x_4_fu_396_p2 = (x_reg_183 + ap_const_lv5_1);

assign x_assign_cast_fu_517_p1 = x_assign_fu_511_p2;

assign x_assign_fu_511_p2 = (c_cast_fu_495_p1 + x_reg_183);

assign x_cast_fu_387_p1 = x_reg_183;

assign y_4_fu_411_p2 = (y_reg_195 + ap_const_lv5_1);

assign y_assign_fu_570_p2 = (r_cast1_fu_554_p1 + y_reg_195);

assign y_cast_fu_402_p1 = y_reg_195;

always @ (posedge ap_clk) begin
    O_cast25_cast_reg_750[12:5] <= 8'b00000000;
    O_cast24_cast_reg_755[8:5] <= 4'b0000;
    I_cast5_reg_771[8:6] <= 3'b000;
    N_cast_reg_776[8:7] <= 2'b00;
    I_cast_reg_781[12:6] <= 7'b0000000;
    n_cast1_reg_786[8:6] <= 3'b000;
    x_cast_reg_804[12:5] <= 8'b00000000;
    y_cast_reg_817[8:5] <= 4'b0000;
    tmp9_cast_reg_858[13] <= 1'b0;
    tmp_17_reg_863[63:13] <= 51'b000000000000000000000000000000000000000000000000000;
    c_cast_reg_873[4:2] <= 3'b000;
    x_assign_cast_reg_886[12:5] <= 8'b00000000;
end

endmodule //dut_conv
