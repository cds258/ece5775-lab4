// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module max_pool (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0,
        M,
        I
);

parameter    ap_ST_fsm_state1 = 9'd1;
parameter    ap_ST_fsm_state2 = 9'd2;
parameter    ap_ST_fsm_state3 = 9'd4;
parameter    ap_ST_fsm_state4 = 9'd8;
parameter    ap_ST_fsm_state5 = 9'd16;
parameter    ap_ST_fsm_state6 = 9'd32;
parameter    ap_ST_fsm_state7 = 9'd64;
parameter    ap_ST_fsm_state8 = 9'd128;
parameter    ap_ST_fsm_state9 = 9'd256;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [12:0] input_r_address0;
output   input_r_ce0;
input  [0:0] input_r_q0;
output  [12:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [0:0] output_r_d0;
input  [6:0] M;
input  [5:0] I;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_r_ce0;
reg[12:0] output_r_address0;
reg output_r_ce0;
reg output_r_we0;
reg[0:0] output_r_d0;

(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [3:0] O_fu_208_p4;
reg   [3:0] O_reg_426;
wire   [10:0] zext_ln109_fu_218_p1;
reg   [10:0] zext_ln109_reg_432;
wire   [7:0] zext_ln113_fu_222_p1;
reg   [7:0] zext_ln113_reg_437;
wire   [12:0] i_fu_232_p2;
wire    ap_CS_fsm_state2;
wire   [8:0] zext_ln113_1_fu_243_p1;
reg   [8:0] zext_ln113_1_reg_450;
wire   [0:0] icmp_ln104_fu_226_p2;
wire   [12:0] I_cast_fu_246_p1;
reg   [12:0] I_cast_reg_455;
wire   [8:0] add_ln113_1_fu_249_p2;
reg   [8:0] add_ln113_1_reg_460;
wire    ap_CS_fsm_state3;
wire   [5:0] m_fu_267_p2;
reg   [5:0] m_reg_468;
wire   [7:0] mul_ln113_fu_273_p2;
reg   [7:0] mul_ln113_reg_473;
wire   [0:0] icmp_ln106_fu_262_p2;
wire   [10:0] zext_ln107_fu_278_p1;
reg   [10:0] zext_ln107_reg_478;
wire    ap_CS_fsm_state4;
wire   [3:0] x_fu_287_p2;
reg   [3:0] x_reg_486;
wire   [12:0] zext_ln113_3_fu_299_p1;
reg   [12:0] zext_ln113_3_reg_491;
wire   [0:0] icmp_ln107_fu_282_p2;
wire   [3:0] y_fu_312_p2;
reg   [3:0] y_reg_499;
wire    ap_CS_fsm_state5;
wire   [10:0] grp_fu_402_p3;
reg   [10:0] o_index_reg_504;
wire   [0:0] icmp_ln108_fu_307_p2;
wire   [8:0] zext_ln113_4_fu_333_p1;
reg   [8:0] zext_ln113_4_reg_509;
wire   [12:0] zext_ln111_fu_337_p1;
reg   [12:0] zext_ln111_reg_514;
wire    ap_CS_fsm_state6;
wire   [1:0] c_fu_347_p2;
reg   [1:0] c_reg_522;
wire   [1:0] r_fu_367_p2;
reg   [1:0] r_reg_530;
wire    ap_CS_fsm_state7;
wire   [8:0] tmp5_fu_379_p2;
reg   [8:0] tmp5_reg_535;
wire   [0:0] icmp_ln112_fu_361_p2;
wire    ap_CS_fsm_state8;
wire   [0:0] or_ln114_fu_396_p2;
wire    ap_CS_fsm_state9;
reg   [12:0] i_0_reg_105;
reg   [5:0] m_0_reg_116;
reg   [8:0] phi_mul_reg_127;
reg   [3:0] x_0_reg_139;
reg   [3:0] y_0_reg_150;
wire   [0:0] icmp_ln111_fu_341_p2;
reg   [0:0] max_0_reg_161;
reg   [1:0] c_0_reg_174;
reg   [0:0] max_1_reg_185;
reg   [1:0] r_0_reg_197;
wire   [63:0] zext_ln104_fu_238_p1;
wire   [63:0] zext_ln117_fu_353_p1;
wire   [63:0] zext_ln114_fu_391_p1;
wire   [6:0] zext_ln106_fu_258_p1;
wire   [3:0] mul_ln113_fu_273_p0;
wire   [5:0] mul_ln113_fu_273_p1;
wire   [3:0] shl_ln113_fu_293_p2;
wire   [7:0] zext_ln108_fu_303_p1;
wire   [7:0] tmp_fu_318_p2;
wire   [3:0] shl_ln113_1_fu_327_p2;
wire   [8:0] zext_ln112_fu_357_p1;
wire   [8:0] tmp1_fu_373_p2;
wire   [12:0] grp_fu_408_p3;
(* use_dsp48 = "no" *) wire   [12:0] i_index_fu_387_p2;
wire   [7:0] grp_fu_402_p0;
wire   [3:0] grp_fu_402_p1;
wire   [3:0] grp_fu_402_p2;
wire   [5:0] grp_fu_408_p0;
wire   [8:0] grp_fu_408_p1;
wire   [3:0] grp_fu_408_p2;
reg   [8:0] ap_NS_fsm;
wire   [10:0] grp_fu_402_p00;
wire   [12:0] grp_fu_408_p10;
wire   [7:0] mul_ln113_fu_273_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 9'd1;
end

dut_mac_muladd_8neOg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 4 ),
    .din2_WIDTH( 4 ),
    .dout_WIDTH( 11 ))
dut_mac_muladd_8neOg_U21(
    .din0(grp_fu_402_p0),
    .din1(grp_fu_402_p1),
    .din2(grp_fu_402_p2),
    .dout(grp_fu_402_p3)
);

dut_mac_muladd_6nfYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 9 ),
    .din2_WIDTH( 4 ),
    .dout_WIDTH( 13 ))
dut_mac_muladd_6nfYi_U22(
    .din0(grp_fu_408_p0),
    .din1(grp_fu_408_p1),
    .din2(grp_fu_408_p2),
    .dout(grp_fu_408_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln112_fu_361_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        c_0_reg_174 <= c_reg_522;
    end else if (((icmp_ln108_fu_307_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        c_0_reg_174 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln104_fu_226_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_0_reg_105 <= i_fu_232_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_105 <= 13'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln107_fu_282_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        m_0_reg_116 <= m_reg_468;
    end else if (((icmp_ln104_fu_226_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        m_0_reg_116 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln112_fu_361_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        max_0_reg_161 <= max_1_reg_185;
    end else if (((icmp_ln108_fu_307_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        max_0_reg_161 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln111_fu_341_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        max_1_reg_185 <= max_0_reg_161;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        max_1_reg_185 <= or_ln114_fu_396_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln107_fu_282_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        phi_mul_reg_127 <= add_ln113_1_reg_460;
    end else if (((icmp_ln104_fu_226_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        phi_mul_reg_127 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln111_fu_341_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        r_0_reg_197 <= 2'd0;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        r_0_reg_197 <= r_reg_530;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln108_fu_307_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        x_0_reg_139 <= x_reg_486;
    end else if (((icmp_ln106_fu_262_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        x_0_reg_139 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln107_fu_282_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        y_0_reg_150 <= 4'd0;
    end else if (((icmp_ln111_fu_341_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        y_0_reg_150 <= y_reg_499;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln104_fu_226_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        I_cast_reg_455[5 : 0] <= I_cast_fu_246_p1[5 : 0];
        zext_ln113_1_reg_450[5 : 0] <= zext_ln113_1_fu_243_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        O_reg_426 <= {{I[4:1]}};
        zext_ln109_reg_432[3 : 0] <= zext_ln109_fu_218_p1[3 : 0];
        zext_ln113_reg_437[3 : 0] <= zext_ln113_fu_222_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        add_ln113_1_reg_460 <= add_ln113_1_fu_249_p2;
        m_reg_468 <= m_fu_267_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        c_reg_522 <= c_fu_347_p2;
        zext_ln111_reg_514[1 : 0] <= zext_ln111_fu_337_p1[1 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln106_fu_262_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        mul_ln113_reg_473 <= mul_ln113_fu_273_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln108_fu_307_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        o_index_reg_504 <= grp_fu_402_p3;
        zext_ln113_4_reg_509[3 : 1] <= zext_ln113_4_fu_333_p1[3 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        r_reg_530 <= r_fu_367_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln112_fu_361_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        tmp5_reg_535 <= tmp5_fu_379_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        x_reg_486 <= x_fu_287_p2;
        zext_ln107_reg_478[3 : 0] <= zext_ln107_fu_278_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        y_reg_499 <= y_fu_312_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln107_fu_282_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        zext_ln113_3_reg_491[3 : 1] <= zext_ln113_3_fu_299_p1[3 : 1];
    end
end

always @ (*) begin
    if ((((icmp_ln106_fu_262_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln106_fu_262_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        output_r_address0 = zext_ln117_fu_353_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        output_r_address0 = zext_ln104_fu_238_p1;
    end else begin
        output_r_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state6))) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        output_r_d0 = max_0_reg_161;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        output_r_d0 = 1'd0;
    end else begin
        output_r_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln104_fu_226_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)) | ((icmp_ln111_fu_341_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6)))) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln104_fu_226_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln106_fu_262_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln107_fu_282_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((icmp_ln108_fu_307_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((icmp_ln111_fu_341_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((icmp_ln112_fu_361_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign I_cast_fu_246_p1 = I;

assign O_fu_208_p4 = {{I[4:1]}};

assign add_ln113_1_fu_249_p2 = (phi_mul_reg_127 + zext_ln113_1_reg_450);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign c_fu_347_p2 = (c_0_reg_174 + 2'd1);

assign grp_fu_402_p0 = grp_fu_402_p00;

assign grp_fu_402_p00 = tmp_fu_318_p2;

assign grp_fu_402_p1 = zext_ln109_reg_432;

assign grp_fu_402_p2 = zext_ln107_reg_478;

assign grp_fu_408_p0 = I_cast_reg_455;

assign grp_fu_408_p1 = grp_fu_408_p10;

assign grp_fu_408_p10 = tmp5_reg_535;

assign grp_fu_408_p2 = zext_ln113_3_reg_491;

assign i_fu_232_p2 = (i_0_reg_105 + 13'd1);

assign i_index_fu_387_p2 = (zext_ln111_reg_514 + grp_fu_408_p3);

assign icmp_ln104_fu_226_p2 = ((i_0_reg_105 == 13'd5184) ? 1'b1 : 1'b0);

assign icmp_ln106_fu_262_p2 = (($signed(zext_ln106_fu_258_p1) < $signed(M)) ? 1'b1 : 1'b0);

assign icmp_ln107_fu_282_p2 = ((x_0_reg_139 == O_reg_426) ? 1'b1 : 1'b0);

assign icmp_ln108_fu_307_p2 = ((y_0_reg_150 == O_reg_426) ? 1'b1 : 1'b0);

assign icmp_ln111_fu_341_p2 = ((c_0_reg_174 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln112_fu_361_p2 = ((r_0_reg_197 == 2'd2) ? 1'b1 : 1'b0);

assign input_r_address0 = zext_ln114_fu_391_p1;

assign m_fu_267_p2 = (m_0_reg_116 + 6'd1);

assign mul_ln113_fu_273_p0 = zext_ln113_reg_437;

assign mul_ln113_fu_273_p1 = mul_ln113_fu_273_p10;

assign mul_ln113_fu_273_p10 = m_0_reg_116;

assign mul_ln113_fu_273_p2 = (mul_ln113_fu_273_p0 * mul_ln113_fu_273_p1);

assign or_ln114_fu_396_p2 = (max_1_reg_185 | input_r_q0);

assign r_fu_367_p2 = (r_0_reg_197 + 2'd1);

assign shl_ln113_1_fu_327_p2 = y_0_reg_150 << 4'd1;

assign shl_ln113_fu_293_p2 = x_0_reg_139 << 4'd1;

assign tmp1_fu_373_p2 = (zext_ln112_fu_357_p1 + phi_mul_reg_127);

assign tmp5_fu_379_p2 = (zext_ln113_4_reg_509 + tmp1_fu_373_p2);

assign tmp_fu_318_p2 = (zext_ln108_fu_303_p1 + mul_ln113_reg_473);

assign x_fu_287_p2 = (x_0_reg_139 + 4'd1);

assign y_fu_312_p2 = (y_0_reg_150 + 4'd1);

assign zext_ln104_fu_238_p1 = i_0_reg_105;

assign zext_ln106_fu_258_p1 = m_0_reg_116;

assign zext_ln107_fu_278_p1 = x_0_reg_139;

assign zext_ln108_fu_303_p1 = y_0_reg_150;

assign zext_ln109_fu_218_p1 = O_fu_208_p4;

assign zext_ln111_fu_337_p1 = c_0_reg_174;

assign zext_ln112_fu_357_p1 = r_0_reg_197;

assign zext_ln113_1_fu_243_p1 = I;

assign zext_ln113_3_fu_299_p1 = shl_ln113_fu_293_p2;

assign zext_ln113_4_fu_333_p1 = shl_ln113_1_fu_327_p2;

assign zext_ln113_fu_222_p1 = O_fu_208_p4;

assign zext_ln114_fu_391_p1 = i_index_fu_387_p2;

assign zext_ln117_fu_353_p1 = o_index_reg_504;

always @ (posedge ap_clk) begin
    zext_ln109_reg_432[10:4] <= 7'b0000000;
    zext_ln113_reg_437[7:4] <= 4'b0000;
    zext_ln113_1_reg_450[8:6] <= 3'b000;
    I_cast_reg_455[12:6] <= 7'b0000000;
    zext_ln107_reg_478[10:4] <= 7'b0000000;
    zext_ln113_3_reg_491[0] <= 1'b0;
    zext_ln113_3_reg_491[12:4] <= 9'b000000000;
    zext_ln113_4_reg_509[0] <= 1'b0;
    zext_ln113_4_reg_509[8:4] <= 5'b00000;
    zext_ln111_reg_514[12:2] <= 11'b00000000000;
end

endmodule //max_pool
