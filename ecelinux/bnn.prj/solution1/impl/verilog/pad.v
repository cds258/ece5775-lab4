// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module pad (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0,
        M,
        I
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_state4 = 7'd8;
parameter    ap_ST_fsm_state5 = 7'd16;
parameter    ap_ST_fsm_state6 = 7'd32;
parameter    ap_ST_fsm_state7 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [12:0] input_r_address0;
output   input_r_ce0;
input  [0:0] input_r_q0;
output  [12:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [0:0] output_r_d0;
input  [6:0] M;
input  [5:0] I;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_r_ce0;
reg[12:0] output_r_address0;
reg output_r_ce0;
reg output_r_we0;
reg[0:0] output_r_d0;

(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [4:0] trunc_ln31_fu_144_p1;
reg   [4:0] trunc_ln31_reg_309;
wire   [12:0] add_ln31_cast4_cast_fu_154_p1;
reg   [12:0] add_ln31_cast4_cast_reg_314;
wire   [8:0] zext_ln39_fu_158_p1;
reg   [8:0] zext_ln39_reg_319;
wire   [12:0] i_fu_168_p2;
wire    ap_CS_fsm_state2;
wire   [5:0] trunc_ln35_fu_179_p1;
reg   [5:0] trunc_ln35_reg_332;
wire   [0:0] icmp_ln33_fu_162_p2;
wire   [7:0] zext_ln38_fu_182_p1;
reg   [7:0] zext_ln38_reg_337;
wire   [12:0] I_cast_fu_185_p1;
reg   [12:0] I_cast_reg_342;
wire   [7:0] add_ln39_fu_188_p2;
reg   [7:0] add_ln39_reg_347;
wire    ap_CS_fsm_state3;
wire   [4:0] m_fu_206_p2;
reg   [4:0] m_reg_355;
wire   [8:0] mul_ln39_fu_212_p2;
reg   [8:0] mul_ln39_reg_360;
wire   [0:0] icmp_ln35_fu_201_p2;
wire   [12:0] zext_ln36_fu_217_p1;
reg   [12:0] zext_ln36_reg_365;
wire    ap_CS_fsm_state4;
wire   [4:0] x_fu_230_p2;
reg   [4:0] x_reg_373;
wire   [12:0] zext_ln39_2_fu_236_p1;
reg   [12:0] zext_ln39_2_reg_378;
wire   [0:0] icmp_ln36_fu_225_p2;
wire   [4:0] y_fu_249_p2;
reg   [4:0] y_reg_386;
wire    ap_CS_fsm_state5;
wire   [12:0] grp_fu_285_p3;
reg   [12:0] i_index_reg_391;
wire   [0:0] icmp_ln37_fu_244_p2;
wire   [8:0] tmp4_fu_269_p2;
reg   [8:0] tmp4_reg_396;
wire   [12:0] grp_fu_291_p3;
reg   [12:0] o_index_reg_401;
wire    ap_CS_fsm_state6;
reg   [12:0] i_0_reg_88;
reg   [4:0] m_0_reg_99;
reg   [7:0] phi_mul_reg_110;
reg   [4:0] x_0_reg_122;
reg   [4:0] y_0_reg_133;
wire    ap_CS_fsm_state7;
wire   [63:0] zext_ln33_fu_174_p1;
wire   [63:0] zext_ln40_fu_277_p1;
wire   [63:0] zext_ln40_1_fu_281_p1;
wire   [4:0] add_ln31_fu_148_p2;
wire   [5:0] zext_ln35_fu_197_p1;
wire   [4:0] mul_ln39_fu_212_p0;
wire   [4:0] mul_ln39_fu_212_p1;
wire   [5:0] zext_ln36_1_fu_221_p1;
wire   [7:0] zext_ln37_fu_240_p1;
wire   [7:0] tmp_fu_255_p2;
wire   [8:0] zext_ln39_3_fu_265_p1;
wire   [5:0] grp_fu_285_p0;
wire   [7:0] grp_fu_285_p1;
wire   [4:0] grp_fu_285_p2;
wire   [8:0] grp_fu_291_p0;
wire   [4:0] grp_fu_291_p1;
wire   [4:0] grp_fu_291_p2;
reg   [6:0] ap_NS_fsm;
wire   [12:0] grp_fu_285_p10;
wire   [12:0] grp_fu_291_p00;
wire   [8:0] mul_ln39_fu_212_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
end

dut_mac_muladd_6nbkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 5 ),
    .dout_WIDTH( 13 ))
dut_mac_muladd_6nbkb_U1(
    .din0(grp_fu_285_p0),
    .din1(grp_fu_285_p1),
    .din2(grp_fu_285_p2),
    .dout(grp_fu_285_p3)
);

dut_mac_muladd_9ncud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 5 ),
    .din2_WIDTH( 5 ),
    .dout_WIDTH( 13 ))
dut_mac_muladd_9ncud_U2(
    .din0(grp_fu_291_p0),
    .din1(grp_fu_291_p1),
    .din2(grp_fu_291_p2),
    .dout(grp_fu_291_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln33_fu_162_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_0_reg_88 <= i_fu_168_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_88 <= 13'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln36_fu_225_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        m_0_reg_99 <= m_reg_355;
    end else if (((icmp_ln33_fu_162_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        m_0_reg_99 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln36_fu_225_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        phi_mul_reg_110 <= add_ln39_reg_347;
    end else if (((icmp_ln33_fu_162_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        phi_mul_reg_110 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln37_fu_244_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        x_0_reg_122 <= x_reg_373;
    end else if (((icmp_ln35_fu_201_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        x_0_reg_122 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln36_fu_225_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        y_0_reg_133 <= 5'd0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        y_0_reg_133 <= y_reg_386;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln33_fu_162_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        I_cast_reg_342[5 : 0] <= I_cast_fu_185_p1[5 : 0];
        trunc_ln35_reg_332 <= trunc_ln35_fu_179_p1;
        zext_ln38_reg_337[5 : 0] <= zext_ln38_fu_182_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        add_ln31_cast4_cast_reg_314[4 : 0] <= add_ln31_cast4_cast_fu_154_p1[4 : 0];
        trunc_ln31_reg_309 <= trunc_ln31_fu_144_p1;
        zext_ln39_reg_319[4 : 0] <= zext_ln39_fu_158_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        add_ln39_reg_347 <= add_ln39_fu_188_p2;
        m_reg_355 <= m_fu_206_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln37_fu_244_p2 == 1'd0))) begin
        i_index_reg_391 <= grp_fu_285_p3;
        tmp4_reg_396 <= tmp4_fu_269_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln35_fu_201_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        mul_ln39_reg_360 <= mul_ln39_fu_212_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        o_index_reg_401 <= grp_fu_291_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        x_reg_373 <= x_fu_230_p2;
        zext_ln36_reg_365[4 : 0] <= zext_ln36_fu_217_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        y_reg_386 <= y_fu_249_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln36_fu_225_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        zext_ln39_2_reg_378[4 : 0] <= zext_ln39_2_fu_236_p1[4 : 0];
    end
end

always @ (*) begin
    if ((((icmp_ln35_fu_201_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln35_fu_201_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        output_r_address0 = zext_ln40_1_fu_281_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        output_r_address0 = zext_ln33_fu_174_p1;
    end else begin
        output_r_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state7))) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        output_r_d0 = input_r_q0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        output_r_d0 = 1'd0;
    end else begin
        output_r_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | ((icmp_ln33_fu_162_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln33_fu_162_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln35_fu_201_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln36_fu_225_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((icmp_ln37_fu_244_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign I_cast_fu_185_p1 = I;

assign add_ln31_cast4_cast_fu_154_p1 = add_ln31_fu_148_p2;

assign add_ln31_fu_148_p2 = (5'd2 + trunc_ln31_fu_144_p1);

assign add_ln39_fu_188_p2 = (phi_mul_reg_110 + zext_ln38_reg_337);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign grp_fu_285_p0 = I_cast_reg_342;

assign grp_fu_285_p1 = grp_fu_285_p10;

assign grp_fu_285_p10 = tmp_fu_255_p2;

assign grp_fu_285_p2 = zext_ln36_reg_365;

assign grp_fu_291_p0 = grp_fu_291_p00;

assign grp_fu_291_p00 = tmp4_reg_396;

assign grp_fu_291_p1 = add_ln31_cast4_cast_reg_314;

assign grp_fu_291_p2 = zext_ln39_2_reg_378;

assign i_fu_168_p2 = (i_0_reg_88 + 13'd1);

assign icmp_ln33_fu_162_p2 = ((i_0_reg_88 == 13'd5184) ? 1'b1 : 1'b0);

assign icmp_ln35_fu_201_p2 = (($signed(zext_ln35_fu_197_p1) < $signed(trunc_ln35_reg_332)) ? 1'b1 : 1'b0);

assign icmp_ln36_fu_225_p2 = (($signed(zext_ln36_1_fu_221_p1) < $signed(I)) ? 1'b1 : 1'b0);

assign icmp_ln37_fu_244_p2 = ((y_0_reg_133 == trunc_ln31_reg_309) ? 1'b1 : 1'b0);

assign input_r_address0 = zext_ln40_fu_277_p1;

assign m_fu_206_p2 = (m_0_reg_99 + 5'd1);

assign mul_ln39_fu_212_p0 = mul_ln39_fu_212_p00;

assign mul_ln39_fu_212_p00 = m_0_reg_99;

assign mul_ln39_fu_212_p1 = zext_ln39_reg_319;

assign mul_ln39_fu_212_p2 = (mul_ln39_fu_212_p0 * mul_ln39_fu_212_p1);

assign tmp4_fu_269_p2 = (zext_ln39_3_fu_265_p1 + mul_ln39_reg_360);

assign tmp_fu_255_p2 = (zext_ln37_fu_240_p1 + phi_mul_reg_110);

assign trunc_ln31_fu_144_p1 = I[4:0];

assign trunc_ln35_fu_179_p1 = M[5:0];

assign x_fu_230_p2 = (x_0_reg_122 + 5'd1);

assign y_fu_249_p2 = (y_0_reg_133 + 5'd1);

assign zext_ln33_fu_174_p1 = i_0_reg_88;

assign zext_ln35_fu_197_p1 = m_0_reg_99;

assign zext_ln36_1_fu_221_p1 = x_0_reg_122;

assign zext_ln36_fu_217_p1 = x_0_reg_122;

assign zext_ln37_fu_240_p1 = y_0_reg_133;

assign zext_ln38_fu_182_p1 = I;

assign zext_ln39_2_fu_236_p1 = x_fu_230_p2;

assign zext_ln39_3_fu_265_p1 = y_fu_249_p2;

assign zext_ln39_fu_158_p1 = add_ln31_fu_148_p2;

assign zext_ln40_1_fu_281_p1 = o_index_reg_401;

assign zext_ln40_fu_277_p1 = i_index_reg_391;

always @ (posedge ap_clk) begin
    add_ln31_cast4_cast_reg_314[12:5] <= 8'b00000000;
    zext_ln39_reg_319[8:5] <= 4'b0000;
    zext_ln38_reg_337[7:6] <= 2'b00;
    I_cast_reg_342[12:6] <= 7'b0000000;
    zext_ln36_reg_365[12:5] <= 8'b00000000;
    zext_ln39_2_reg_378[12:5] <= 8'b00000000;
end

endmodule //pad
