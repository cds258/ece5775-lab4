// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module conv (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0,
        threshold_V_address0,
        threshold_V_ce0,
        threshold_V_q0,
        M,
        N,
        I,
        L
);

parameter    ap_ST_fsm_state1 = 11'd1;
parameter    ap_ST_fsm_state2 = 11'd2;
parameter    ap_ST_fsm_state3 = 11'd4;
parameter    ap_ST_fsm_state4 = 11'd8;
parameter    ap_ST_fsm_state5 = 11'd16;
parameter    ap_ST_fsm_state6 = 11'd32;
parameter    ap_ST_fsm_state7 = 11'd64;
parameter    ap_ST_fsm_state8 = 11'd128;
parameter    ap_ST_fsm_state9 = 11'd256;
parameter    ap_ST_fsm_state10 = 11'd512;
parameter    ap_ST_fsm_state11 = 11'd1024;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [12:0] input_r_address0;
output   input_r_ce0;
input  [0:0] input_r_q0;
output  [12:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [0:0] output_r_d0;
output  [12:0] threshold_V_address0;
output   threshold_V_ce0;
input  [7:0] threshold_V_q0;
input  [6:0] M;
input  [6:0] N;
input  [5:0] I;
input  [0:0] L;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_r_ce0;
reg output_r_ce0;
reg output_r_we0;
reg threshold_V_ce0;

(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [12:0] w_conv1_address0;
reg    w_conv1_ce0;
wire   [0:0] w_conv1_q0;
wire   [12:0] w_conv2_address0;
reg    w_conv2_ce0;
wire   [0:0] w_conv2_q0;
wire   [0:0] L_read_read_fu_90_p2;
wire   [4:0] O_fu_334_p2;
reg   [4:0] O_reg_752;
wire   [12:0] O_cast21_cast_fu_340_p1;
reg   [12:0] O_cast21_cast_reg_758;
wire   [8:0] zext_ln68_fu_344_p1;
reg   [8:0] zext_ln68_reg_763;
wire   [4:0] add_ln16_fu_348_p2;
reg   [4:0] add_ln16_reg_768;
wire   [5:0] trunc_ln69_fu_354_p1;
reg   [5:0] trunc_ln69_reg_774;
wire   [8:0] zext_ln75_fu_358_p1;
reg   [8:0] zext_ln75_reg_779;
wire   [8:0] zext_ln76_fu_362_p1;
reg   [8:0] zext_ln76_reg_784;
wire   [12:0] I_cast_fu_366_p1;
reg   [12:0] I_cast_reg_789;
wire   [8:0] zext_ln64_fu_370_p1;
reg   [8:0] zext_ln64_reg_794;
wire    ap_CS_fsm_state2;
wire   [5:0] n_fu_383_p2;
reg   [5:0] n_reg_802;
wire   [8:0] mul_ln68_fu_389_p2;
reg   [8:0] mul_ln68_reg_807;
wire   [0:0] icmp_ln64_fu_378_p2;
wire   [12:0] zext_ln65_fu_394_p1;
reg   [12:0] zext_ln65_reg_812;
wire    ap_CS_fsm_state3;
wire   [4:0] x_fu_403_p2;
reg   [4:0] x_reg_820;
wire   [8:0] zext_ln66_fu_409_p1;
reg   [8:0] zext_ln66_reg_825;
wire    ap_CS_fsm_state4;
wire   [4:0] y_fu_418_p2;
reg   [4:0] y_reg_833;
wire   [12:0] grp_fu_729_p3;
reg   [12:0] o_index_reg_838;
wire   [0:0] icmp_ln66_fu_413_p2;
wire   [8:0] add_ln76_3_fu_433_p2;
reg   [8:0] add_ln76_3_reg_843;
wire    ap_CS_fsm_state5;
wire   [8:0] add_ln76_4_fu_438_p2;
reg   [8:0] add_ln76_4_reg_848;
wire   [4:0] m_fu_452_p2;
reg   [4:0] m_reg_856;
wire   [13:0] zext_ln76_3_fu_485_p1;
reg   [13:0] zext_ln76_3_reg_861;
wire   [0:0] icmp_ln69_fu_447_p2;
wire   [63:0] zext_ln85_fu_489_p1;
reg   [63:0] zext_ln85_reg_866;
wire   [4:0] zext_ln72_fu_493_p1;
reg   [4:0] zext_ln72_reg_876;
wire    ap_CS_fsm_state6;
wire   [1:0] c_fu_503_p2;
reg   [1:0] c_reg_884;
wire   [12:0] zext_ln74_fu_515_p1;
reg   [12:0] zext_ln74_reg_889;
wire   [0:0] icmp_ln72_fu_497_p2;
wire   [0:0] icmp_ln16_fu_519_p2;
reg   [0:0] icmp_ln16_reg_894;
wire   [0:0] icmp_ln16_1_fu_525_p2;
reg   [0:0] icmp_ln16_1_reg_899;
wire   [31:0] sum_fu_542_p2;
wire   [1:0] r_fu_562_p2;
reg   [1:0] r_reg_912;
wire    ap_CS_fsm_state7;
wire   [8:0] tmp31_fu_602_p2;
reg   [8:0] tmp31_reg_917;
wire   [0:0] icmp_ln73_fu_556_p2;
wire   [0:0] or_ln16_fu_657_p2;
reg   [0:0] or_ln16_reg_932;
wire   [31:0] mac_num_2_fu_662_p3;
reg   [31:0] mac_num_2_reg_937;
wire    ap_CS_fsm_state8;
reg   [0:0] w_conv1_load_reg_947;
reg   [0:0] w_conv2_load_reg_952;
wire   [31:0] one_out_2_fu_704_p3;
wire    ap_CS_fsm_state9;
wire   [0:0] icmp_ln1494_fu_723_p2;
reg   [0:0] icmp_ln1494_reg_962;
wire    ap_CS_fsm_state10;
reg   [5:0] n_0_reg_179;
wire   [0:0] icmp_ln65_fu_398_p2;
reg   [4:0] x_0_reg_190;
reg   [4:0] y_0_reg_202;
wire    ap_CS_fsm_state11;
reg   [31:0] p_Val2_s_reg_214;
reg   [4:0] m_0_reg_226;
reg   [8:0] phi_mul_reg_237;
reg   [8:0] phi_mul2_reg_249;
reg   [31:0] one_out_0_reg_260;
reg   [31:0] mac_num_0_reg_272;
reg   [1:0] c_0_reg_284;
reg   [31:0] one_out_1_reg_295;
reg   [31:0] mac_num_1_reg_307;
reg   [1:0] r_0_reg_319;
wire  signed [63:0] sext_ln77_fu_639_p1;
wire   [63:0] zext_ln77_fu_673_p1;
wire   [4:0] trunc_ln59_fu_330_p1;
wire   [6:0] zext_ln64_1_fu_374_p1;
wire   [5:0] mul_ln68_fu_389_p0;
wire   [4:0] mul_ln68_fu_389_p1;
wire   [8:0] tmp29_fu_424_p2;
wire   [5:0] zext_ln69_fu_443_p1;
wire   [8:0] add_ln76_fu_458_p2;
wire   [11:0] shl_ln_fu_467_p3;
wire   [12:0] zext_ln76_2_fu_475_p1;
wire   [12:0] zext_ln76_1_fu_463_p1;
wire   [12:0] add_ln76_1_fu_479_p2;
wire   [4:0] add_ln74_fu_509_p2;
wire   [31:0] sub_ln83_fu_536_p2;
wire   [31:0] shl_ln83_fu_530_p2;
wire   [4:0] zext_ln73_1_fu_552_p1;
wire   [4:0] add_ln74_1_fu_568_p2;
wire   [0:0] icmp_ln16_3_fu_580_p2;
wire   [0:0] and_ln16_fu_585_p2;
wire   [0:0] icmp_ln16_2_fu_574_p2;
wire   [8:0] zext_ln73_fu_548_p1;
wire   [8:0] tmp7_fu_596_p2;
wire   [3:0] shl_ln76_1_fu_607_p3;
wire   [4:0] zext_ln76_4_fu_615_p1;
wire   [4:0] sub_ln76_fu_619_p2;
wire   [4:0] add_ln76_2_fu_625_p2;
wire  signed [13:0] sext_ln76_fu_630_p1;
wire   [13:0] w_index_fu_634_p2;
wire   [0:0] and_ln16_1_fu_590_p2;
wire   [0:0] xor_ln16_fu_651_p2;
wire   [31:0] mac_num_fu_645_p2;
wire   [12:0] grp_fu_735_p3;
wire   [0:0] select_ln77_fu_677_p3;
wire   [0:0] xor_ln78_fu_682_p2;
wire   [0:0] xor_ln78_1_fu_688_p2;
wire   [31:0] zext_ln78_fu_694_p1;
wire   [31:0] one_out_fu_698_p2;
wire   [33:0] shl_ln1_fu_711_p3;
wire  signed [33:0] sext_ln1494_fu_719_p1;
wire   [8:0] grp_fu_729_p0;
wire   [4:0] grp_fu_729_p1;
wire   [4:0] grp_fu_729_p2;
wire   [8:0] grp_fu_735_p0;
wire   [5:0] grp_fu_735_p1;
wire   [4:0] grp_fu_735_p2;
reg   [10:0] ap_NS_fsm;
wire   [12:0] grp_fu_729_p00;
wire   [12:0] grp_fu_735_p00;
wire   [8:0] mul_ln68_fu_389_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 11'd1;
end

conv_w_conv1 #(
    .DataWidth( 1 ),
    .AddressRange( 4608 ),
    .AddressWidth( 13 ))
w_conv1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(w_conv1_address0),
    .ce0(w_conv1_ce0),
    .q0(w_conv1_q0)
);

conv_w_conv2 #(
    .DataWidth( 1 ),
    .AddressRange( 4608 ),
    .AddressWidth( 13 ))
w_conv2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(w_conv2_address0),
    .ce0(w_conv2_ce0),
    .q0(w_conv2_q0)
);

dut_mac_muladd_9ncud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 5 ),
    .din2_WIDTH( 5 ),
    .dout_WIDTH( 13 ))
dut_mac_muladd_9ncud_U9(
    .din0(grp_fu_729_p0),
    .din1(grp_fu_729_p1),
    .din2(grp_fu_729_p2),
    .dout(grp_fu_729_p3)
);

dut_mac_muladd_9ndEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 6 ),
    .din2_WIDTH( 5 ),
    .dout_WIDTH( 13 ))
dut_mac_muladd_9ndEe_U10(
    .din0(grp_fu_735_p0),
    .din1(grp_fu_735_p1),
    .din2(grp_fu_735_p2),
    .dout(grp_fu_735_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln73_fu_556_p2 == 1'd1))) begin
        c_0_reg_284 <= c_reg_884;
    end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln69_fu_447_p2 == 1'd1))) begin
        c_0_reg_284 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln72_fu_497_p2 == 1'd1))) begin
        m_0_reg_226 <= m_reg_856;
    end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln66_fu_413_p2 == 1'd0))) begin
        m_0_reg_226 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln73_fu_556_p2 == 1'd1))) begin
        mac_num_0_reg_272 <= mac_num_1_reg_307;
    end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln69_fu_447_p2 == 1'd1))) begin
        mac_num_0_reg_272 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        mac_num_1_reg_307 <= mac_num_2_reg_937;
    end else if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln72_fu_497_p2 == 1'd0))) begin
        mac_num_1_reg_307 <= mac_num_0_reg_272;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln65_fu_398_p2 == 1'd1))) begin
        n_0_reg_179 <= n_reg_802;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        n_0_reg_179 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln73_fu_556_p2 == 1'd1))) begin
        one_out_0_reg_260 <= one_out_1_reg_295;
    end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln69_fu_447_p2 == 1'd1))) begin
        one_out_0_reg_260 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        one_out_1_reg_295 <= one_out_2_fu_704_p3;
    end else if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln72_fu_497_p2 == 1'd0))) begin
        one_out_1_reg_295 <= one_out_0_reg_260;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln72_fu_497_p2 == 1'd1))) begin
        p_Val2_s_reg_214 <= sum_fu_542_p2;
    end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln66_fu_413_p2 == 1'd0))) begin
        p_Val2_s_reg_214 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln72_fu_497_p2 == 1'd1))) begin
        phi_mul2_reg_249 <= add_ln76_3_reg_843;
    end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln66_fu_413_p2 == 1'd0))) begin
        phi_mul2_reg_249 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln72_fu_497_p2 == 1'd1))) begin
        phi_mul_reg_237 <= add_ln76_4_reg_848;
    end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln66_fu_413_p2 == 1'd0))) begin
        phi_mul_reg_237 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        r_0_reg_319 <= r_reg_912;
    end else if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln72_fu_497_p2 == 1'd0))) begin
        r_0_reg_319 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln66_fu_413_p2 == 1'd1))) begin
        x_0_reg_190 <= x_reg_820;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln64_fu_378_p2 == 1'd1))) begin
        x_0_reg_190 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        y_0_reg_202 <= y_reg_833;
    end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln65_fu_398_p2 == 1'd0))) begin
        y_0_reg_202 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        I_cast_reg_789[5 : 0] <= I_cast_fu_366_p1[5 : 0];
        O_cast21_cast_reg_758[4 : 0] <= O_cast21_cast_fu_340_p1[4 : 0];
        O_reg_752 <= O_fu_334_p2;
        add_ln16_reg_768 <= add_ln16_fu_348_p2;
        trunc_ln69_reg_774 <= trunc_ln69_fu_354_p1;
        zext_ln68_reg_763[4 : 0] <= zext_ln68_fu_344_p1[4 : 0];
        zext_ln75_reg_779[5 : 0] <= zext_ln75_fu_358_p1[5 : 0];
        zext_ln76_reg_784[6 : 0] <= zext_ln76_fu_362_p1[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        add_ln76_3_reg_843 <= add_ln76_3_fu_433_p2;
        add_ln76_4_reg_848 <= add_ln76_4_fu_438_p2;
        m_reg_856 <= m_fu_452_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        c_reg_884 <= c_fu_503_p2;
        zext_ln72_reg_876[1 : 0] <= zext_ln72_fu_493_p1[1 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        icmp_ln1494_reg_962 <= icmp_ln1494_fu_723_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln72_fu_497_p2 == 1'd0))) begin
        icmp_ln16_1_reg_899 <= icmp_ln16_1_fu_525_p2;
        icmp_ln16_reg_894 <= icmp_ln16_fu_519_p2;
        zext_ln74_reg_889[4 : 0] <= zext_ln74_fu_515_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln73_fu_556_p2 == 1'd0))) begin
        mac_num_2_reg_937 <= mac_num_2_fu_662_p3;
        or_ln16_reg_932 <= or_ln16_fu_657_p2;
        tmp31_reg_917 <= tmp31_fu_602_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln64_fu_378_p2 == 1'd1))) begin
        mul_ln68_reg_807 <= mul_ln68_fu_389_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        n_reg_802 <= n_fu_383_p2;
        zext_ln64_reg_794[5 : 0] <= zext_ln64_fu_370_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln66_fu_413_p2 == 1'd0))) begin
        o_index_reg_838 <= grp_fu_729_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        r_reg_912 <= r_fu_562_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == L_read_read_fu_90_p2) & (1'b1 == ap_CS_fsm_state8))) begin
        w_conv1_load_reg_947 <= w_conv1_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == L_read_read_fu_90_p2) & (1'b1 == ap_CS_fsm_state8))) begin
        w_conv2_load_reg_952 <= w_conv2_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        x_reg_820 <= x_fu_403_p2;
        zext_ln65_reg_812[4 : 0] <= zext_ln65_fu_394_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        y_reg_833 <= y_fu_418_p2;
        zext_ln66_reg_825[4 : 0] <= zext_ln66_fu_409_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln69_fu_447_p2 == 1'd1))) begin
        zext_ln76_3_reg_861[12 : 0] <= zext_ln76_3_fu_485_p1[12 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln69_fu_447_p2 == 1'd0))) begin
        zext_ln85_reg_866[12 : 0] <= zext_ln85_fu_489_p1[12 : 0];
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state2) & (icmp_ln64_fu_378_p2 == 1'd0)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln64_fu_378_p2 == 1'd0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        threshold_V_ce0 = 1'b1;
    end else begin
        threshold_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        w_conv1_ce0 = 1'b1;
    end else begin
        w_conv1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        w_conv2_ce0 = 1'b1;
    end else begin
        w_conv2_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln64_fu_378_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln65_fu_398_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln66_fu_413_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln69_fu_447_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln72_fu_497_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln73_fu_556_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign I_cast_fu_366_p1 = I;

assign L_read_read_fu_90_p2 = L;

assign O_cast21_cast_fu_340_p1 = O_fu_334_p2;

assign O_fu_334_p2 = ($signed(5'd30) + $signed(trunc_ln59_fu_330_p1));

assign add_ln16_fu_348_p2 = ($signed(5'd31) + $signed(trunc_ln59_fu_330_p1));

assign add_ln74_1_fu_568_p2 = (zext_ln73_1_fu_552_p1 + y_0_reg_202);

assign add_ln74_fu_509_p2 = (zext_ln72_fu_493_p1 + x_0_reg_190);

assign add_ln76_1_fu_479_p2 = (zext_ln76_2_fu_475_p1 + zext_ln76_1_fu_463_p1);

assign add_ln76_2_fu_625_p2 = (zext_ln72_reg_876 + sub_ln76_fu_619_p2);

assign add_ln76_3_fu_433_p2 = (phi_mul2_reg_249 + zext_ln76_reg_784);

assign add_ln76_4_fu_438_p2 = (phi_mul_reg_237 + zext_ln75_reg_779);

assign add_ln76_fu_458_p2 = (zext_ln64_reg_794 + phi_mul2_reg_249);

assign and_ln16_1_fu_590_p2 = (icmp_ln16_2_fu_574_p2 & and_ln16_fu_585_p2);

assign and_ln16_fu_585_p2 = (icmp_ln16_3_fu_580_p2 & icmp_ln16_1_reg_899);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign c_fu_503_p2 = (c_0_reg_284 + 2'd1);

assign grp_fu_729_p0 = grp_fu_729_p00;

assign grp_fu_729_p00 = tmp29_fu_424_p2;

assign grp_fu_729_p1 = O_cast21_cast_reg_758;

assign grp_fu_729_p2 = zext_ln65_reg_812;

assign grp_fu_735_p0 = grp_fu_735_p00;

assign grp_fu_735_p00 = tmp31_reg_917;

assign grp_fu_735_p1 = I_cast_reg_789;

assign grp_fu_735_p2 = zext_ln74_reg_889;

assign icmp_ln1494_fu_723_p2 = (($signed(shl_ln1_fu_711_p3) > $signed(sext_ln1494_fu_719_p1)) ? 1'b1 : 1'b0);

assign icmp_ln16_1_fu_525_p2 = ((add_ln16_reg_768 > add_ln74_fu_509_p2) ? 1'b1 : 1'b0);

assign icmp_ln16_2_fu_574_p2 = ((add_ln74_1_fu_568_p2 != 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln16_3_fu_580_p2 = ((add_ln16_reg_768 > add_ln74_1_fu_568_p2) ? 1'b1 : 1'b0);

assign icmp_ln16_fu_519_p2 = ((add_ln74_fu_509_p2 == 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln64_fu_378_p2 = (($signed(zext_ln64_1_fu_374_p1) < $signed(N)) ? 1'b1 : 1'b0);

assign icmp_ln65_fu_398_p2 = ((x_0_reg_190 == O_reg_752) ? 1'b1 : 1'b0);

assign icmp_ln66_fu_413_p2 = ((y_0_reg_202 == O_reg_752) ? 1'b1 : 1'b0);

assign icmp_ln69_fu_447_p2 = (($signed(zext_ln69_fu_443_p1) < $signed(trunc_ln69_reg_774)) ? 1'b1 : 1'b0);

assign icmp_ln72_fu_497_p2 = ((c_0_reg_284 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln73_fu_556_p2 = ((r_0_reg_319 == 2'd3) ? 1'b1 : 1'b0);

assign input_r_address0 = zext_ln77_fu_673_p1;

assign m_fu_452_p2 = (m_0_reg_226 + 5'd1);

assign mac_num_2_fu_662_p3 = ((or_ln16_fu_657_p2[0:0] === 1'b1) ? mac_num_1_reg_307 : mac_num_fu_645_p2);

assign mac_num_fu_645_p2 = (mac_num_1_reg_307 + 32'd1);

assign mul_ln68_fu_389_p0 = mul_ln68_fu_389_p00;

assign mul_ln68_fu_389_p00 = n_0_reg_179;

assign mul_ln68_fu_389_p1 = zext_ln68_reg_763;

assign mul_ln68_fu_389_p2 = (mul_ln68_fu_389_p0 * mul_ln68_fu_389_p1);

assign n_fu_383_p2 = (n_0_reg_179 + 6'd1);

assign one_out_2_fu_704_p3 = ((or_ln16_reg_932[0:0] === 1'b1) ? one_out_1_reg_295 : one_out_fu_698_p2);

assign one_out_fu_698_p2 = (one_out_1_reg_295 + zext_ln78_fu_694_p1);

assign or_ln16_fu_657_p2 = (xor_ln16_fu_651_p2 | icmp_ln16_reg_894);

assign output_r_address0 = zext_ln85_reg_866;

assign output_r_d0 = icmp_ln1494_reg_962;

assign r_fu_562_p2 = (r_0_reg_319 + 2'd1);

assign select_ln77_fu_677_p3 = ((L[0:0] === 1'b1) ? w_conv2_load_reg_952 : w_conv1_load_reg_947);

assign sext_ln1494_fu_719_p1 = $signed(threshold_V_q0);

assign sext_ln76_fu_630_p1 = $signed(add_ln76_2_fu_625_p2);

assign sext_ln77_fu_639_p1 = $signed(w_index_fu_634_p2);

assign shl_ln1_fu_711_p3 = {{p_Val2_s_reg_214}, {2'd0}};

assign shl_ln76_1_fu_607_p3 = {{r_0_reg_319}, {2'd0}};

assign shl_ln83_fu_530_p2 = one_out_0_reg_260 << 32'd1;

assign shl_ln_fu_467_p3 = {{add_ln76_fu_458_p2}, {3'd0}};

assign sub_ln76_fu_619_p2 = (zext_ln76_4_fu_615_p1 - zext_ln73_1_fu_552_p1);

assign sub_ln83_fu_536_p2 = (p_Val2_s_reg_214 - mac_num_0_reg_272);

assign sum_fu_542_p2 = (sub_ln83_fu_536_p2 + shl_ln83_fu_530_p2);

assign threshold_V_address0 = zext_ln85_fu_489_p1;

assign tmp29_fu_424_p2 = (zext_ln66_fu_409_p1 + mul_ln68_reg_807);

assign tmp31_fu_602_p2 = (tmp7_fu_596_p2 + zext_ln66_reg_825);

assign tmp7_fu_596_p2 = (phi_mul_reg_237 + zext_ln73_fu_548_p1);

assign trunc_ln59_fu_330_p1 = I[4:0];

assign trunc_ln69_fu_354_p1 = M[5:0];

assign w_conv1_address0 = sext_ln77_fu_639_p1;

assign w_conv2_address0 = sext_ln77_fu_639_p1;

assign w_index_fu_634_p2 = ($signed(sext_ln76_fu_630_p1) + $signed(zext_ln76_3_reg_861));

assign x_fu_403_p2 = (x_0_reg_190 + 5'd1);

assign xor_ln16_fu_651_p2 = (1'd1 ^ and_ln16_1_fu_590_p2);

assign xor_ln78_1_fu_688_p2 = (xor_ln78_fu_682_p2 ^ input_r_q0);

assign xor_ln78_fu_682_p2 = (select_ln77_fu_677_p3 ^ 1'd1);

assign y_fu_418_p2 = (y_0_reg_202 + 5'd1);

assign zext_ln64_1_fu_374_p1 = n_0_reg_179;

assign zext_ln64_fu_370_p1 = n_0_reg_179;

assign zext_ln65_fu_394_p1 = x_0_reg_190;

assign zext_ln66_fu_409_p1 = y_0_reg_202;

assign zext_ln68_fu_344_p1 = O_fu_334_p2;

assign zext_ln69_fu_443_p1 = m_0_reg_226;

assign zext_ln72_fu_493_p1 = c_0_reg_284;

assign zext_ln73_1_fu_552_p1 = r_0_reg_319;

assign zext_ln73_fu_548_p1 = r_0_reg_319;

assign zext_ln74_fu_515_p1 = add_ln74_fu_509_p2;

assign zext_ln75_fu_358_p1 = I;

assign zext_ln76_1_fu_463_p1 = add_ln76_fu_458_p2;

assign zext_ln76_2_fu_475_p1 = shl_ln_fu_467_p3;

assign zext_ln76_3_fu_485_p1 = add_ln76_1_fu_479_p2;

assign zext_ln76_4_fu_615_p1 = shl_ln76_1_fu_607_p3;

assign zext_ln76_fu_362_p1 = N;

assign zext_ln77_fu_673_p1 = grp_fu_735_p3;

assign zext_ln78_fu_694_p1 = xor_ln78_1_fu_688_p2;

assign zext_ln85_fu_489_p1 = o_index_reg_838;

always @ (posedge ap_clk) begin
    O_cast21_cast_reg_758[12:5] <= 8'b00000000;
    zext_ln68_reg_763[8:5] <= 4'b0000;
    zext_ln75_reg_779[8:6] <= 3'b000;
    zext_ln76_reg_784[8:7] <= 2'b00;
    I_cast_reg_789[12:6] <= 7'b0000000;
    zext_ln64_reg_794[8:6] <= 3'b000;
    zext_ln65_reg_812[12:5] <= 8'b00000000;
    zext_ln66_reg_825[8:5] <= 4'b0000;
    zext_ln76_3_reg_861[13] <= 1'b0;
    zext_ln85_reg_866[63:13] <= 51'b000000000000000000000000000000000000000000000000000;
    zext_ln72_reg_876[4:2] <= 3'b000;
    zext_ln74_reg_889[12:5] <= 8'b00000000;
end

endmodule //conv
