-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity bnn_xcel is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of bnn_xcel is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (83 downto 0) := "000000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (83 downto 0) := "000000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (83 downto 0) := "000000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (83 downto 0) := "000000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (83 downto 0) := "000000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (83 downto 0) := "000000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (83 downto 0) := "000001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (83 downto 0) := "000010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (83 downto 0) := "000100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (83 downto 0) := "001000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (83 downto 0) := "010000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state84 : STD_LOGIC_VECTOR (83 downto 0) := "100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_49 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001001";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_45 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000101";
    constant ap_const_lv32_4E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001110";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_52 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010010";
    constant ap_const_lv32_53 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010011";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_51 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010001";
    constant ap_const_lv32_C2C80000 : STD_LOGIC_VECTOR (31 downto 0) := "11000010110010000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv7_10 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_const_lv7_20 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_const_lv6_12 : STD_LOGIC_VECTOR (5 downto 0) := "010010";
    constant ap_const_lv6_A : STD_LOGIC_VECTOR (5 downto 0) := "001010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv6_10 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_const_lv6_8 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_C4000000 : STD_LOGIC_VECTOR (31 downto 0) := "11000100000000000000000000000000";
    constant ap_const_lv32_C3800000 : STD_LOGIC_VECTOR (31 downto 0) := "11000011100000000000000000000000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv32_41 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000001";
    constant ap_const_lv32_4A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001010";
    constant ap_const_lv32_40000000 : STD_LOGIC_VECTOR (31 downto 0) := "01000000000000000000000000000000";
    constant ap_const_lv32_3D800000 : STD_LOGIC_VECTOR (31 downto 0) := "00111101100000000000000000000000";
    constant ap_const_lv32_3DB504F3 : STD_LOGIC_VECTOR (31 downto 0) := "00111101101101010000010011110011";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_46 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000110";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv10_200 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal threshold1_V_ce0 : STD_LOGIC;
    signal threshold1_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal threshold2_V_ce0 : STD_LOGIC;
    signal threshold2_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal w_fc1_address0 : STD_LOGIC_VECTOR (16 downto 0);
    signal w_fc1_ce0 : STD_LOGIC;
    signal w_fc1_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal b_fc1_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal b_fc1_ce0 : STD_LOGIC;
    signal b_fc1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal w_fc2_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal w_fc2_ce0 : STD_LOGIC;
    signal w_fc2_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal b_fc2_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal b_fc2_ce0 : STD_LOGIC;
    signal b_fc2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_394_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_403 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_CS_fsm_state57 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state57 : signal is "none";
    signal grp_fu_377_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal ap_CS_fsm_state62 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state62 : signal is "none";
    signal grp_fu_385_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_414 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal ap_CS_fsm_state65 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state65 : signal is "none";
    signal ap_CS_fsm_state74 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state74 : signal is "none";
    signal reg_419 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal ap_CS_fsm_state70 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state70 : signal is "none";
    signal ap_CS_fsm_state79 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state79 : signal is "none";
    signal n_0_i_cast13_fu_425_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal n_0_i_cast13_reg_761 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal n_fu_435_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal n_reg_769 : STD_LOGIC_VECTOR (8 downto 0);
    signal m_fu_447_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal m_reg_777 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal icmp_ln159_fu_441_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln161_1_fu_486_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln161_1_reg_792 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal zext_ln161_2_fu_492_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal zext_ln164_fu_496_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln164_reg_802 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal b_fc1_load_reg_812 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln165_fu_519_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln165_reg_817 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal icmp_ln165_1_fu_525_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln165_1_reg_822 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln165_fu_535_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln165_reg_827 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal n_0_i1_cast11_fu_541_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal n_0_i1_cast11_reg_832 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal n_1_fu_551_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal n_1_reg_840 : STD_LOGIC_VECTOR (3 downto 0);
    signal m_1_fu_563_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal m_1_reg_848 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal icmp_ln159_1_fu_557_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln161_3_fu_626_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln161_3_reg_863 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state51 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal zext_ln161_5_fu_632_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state52 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state52 : signal is "none";
    signal zext_ln164_1_fu_636_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln164_1_reg_873 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state73 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state73 : signal is "none";
    signal b_fc2_load_reg_883 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln167_1_fu_719_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln167_1_reg_888 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state81 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state81 : signal is "none";
    signal max_fu_725_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_reg_893 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln321_fu_733_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln321_reg_898 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state83 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state83 : signal is "none";
    signal icmp_ln70_fu_737_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_748_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_reg_911 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln71_fu_754_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state84 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state84 : signal is "none";
    signal mem_conv1_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal mem_conv1_ce0 : STD_LOGIC;
    signal mem_conv1_we0 : STD_LOGIC;
    signal mem_conv1_d0 : STD_LOGIC_VECTOR (0 downto 0);
    signal mem_conv1_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal mem_conv2_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal mem_conv2_ce0 : STD_LOGIC;
    signal mem_conv2_we0 : STD_LOGIC;
    signal mem_conv2_d0 : STD_LOGIC_VECTOR (0 downto 0);
    signal mem_conv2_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv_fu_320_ap_start : STD_LOGIC;
    signal grp_conv_fu_320_ap_done : STD_LOGIC;
    signal grp_conv_fu_320_ap_idle : STD_LOGIC;
    signal grp_conv_fu_320_ap_ready : STD_LOGIC;
    signal grp_conv_fu_320_input_r_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_conv_fu_320_input_r_ce0 : STD_LOGIC;
    signal grp_conv_fu_320_input_r_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv_fu_320_output_r_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_conv_fu_320_output_r_ce0 : STD_LOGIC;
    signal grp_conv_fu_320_output_r_we0 : STD_LOGIC;
    signal grp_conv_fu_320_output_r_d0 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_conv_fu_320_threshold_V_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_conv_fu_320_threshold_V_ce0 : STD_LOGIC;
    signal grp_conv_fu_320_threshold_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_conv_fu_320_M : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_conv_fu_320_N : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_conv_fu_320_I : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_conv_fu_320_L : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_max_pool_fu_345_ap_start : STD_LOGIC;
    signal grp_max_pool_fu_345_ap_done : STD_LOGIC;
    signal grp_max_pool_fu_345_ap_idle : STD_LOGIC;
    signal grp_max_pool_fu_345_ap_ready : STD_LOGIC;
    signal grp_max_pool_fu_345_input_r_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_max_pool_fu_345_input_r_ce0 : STD_LOGIC;
    signal grp_max_pool_fu_345_input_r_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_max_pool_fu_345_output_r_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_max_pool_fu_345_output_r_ce0 : STD_LOGIC;
    signal grp_max_pool_fu_345_output_r_we0 : STD_LOGIC;
    signal grp_max_pool_fu_345_output_r_d0 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_max_pool_fu_345_M : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_max_pool_fu_345_I : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_pad_fu_357_ap_start : STD_LOGIC;
    signal grp_pad_fu_357_ap_done : STD_LOGIC;
    signal grp_pad_fu_357_ap_idle : STD_LOGIC;
    signal grp_pad_fu_357_ap_ready : STD_LOGIC;
    signal grp_pad_fu_357_input_r_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_pad_fu_357_input_r_ce0 : STD_LOGIC;
    signal grp_pad_fu_357_input_r_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_pad_fu_357_output_r_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_pad_fu_357_output_r_ce0 : STD_LOGIC;
    signal grp_pad_fu_357_output_r_we0 : STD_LOGIC;
    signal grp_pad_fu_357_output_r_d0 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_pad_fu_357_M : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_pad_fu_357_I : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_reshape_fu_371_ap_start : STD_LOGIC;
    signal grp_reshape_fu_371_ap_done : STD_LOGIC;
    signal grp_reshape_fu_371_ap_idle : STD_LOGIC;
    signal grp_reshape_fu_371_ap_ready : STD_LOGIC;
    signal grp_reshape_fu_371_input_r_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_reshape_fu_371_input_r_ce0 : STD_LOGIC;
    signal grp_reshape_fu_371_output_r_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_reshape_fu_371_output_r_ce0 : STD_LOGIC;
    signal grp_reshape_fu_371_output_r_we0 : STD_LOGIC;
    signal grp_reshape_fu_371_output_r_d0 : STD_LOGIC_VECTOR (0 downto 0);
    signal n_0_i_reg_215 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal one_out_0_i_reg_227 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln157_fu_429_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal m_0_i_reg_239 : STD_LOGIC_VECTOR (9 downto 0);
    signal max_0_i_reg_250 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state82 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state82 : signal is "none";
    signal n_0_i1_reg_262 : STD_LOGIC_VECTOR (3 downto 0);
    signal one_out_0_i2_reg_274 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln157_1_fu_545_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal m_0_i3_reg_286 : STD_LOGIC_VECTOR (8 downto 0);
    signal agg_result_V_0_reg_297 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_id_V_reg_309 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_conv_fu_320_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal grp_max_pool_fu_345_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal grp_pad_fu_357_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal grp_reshape_fu_371_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal zext_ln161_fu_470_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln161_1_fu_475_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln161_3_fu_610_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln161_4_fu_615_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln71_fu_743_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_377_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_377_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal ap_CS_fsm_state58 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state58 : signal is "none";
    signal ap_CS_fsm_state66 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state66 : signal is "none";
    signal ap_CS_fsm_state75 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state75 : signal is "none";
    signal grp_fu_385_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_385_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal ap_CS_fsm_state71 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state71 : signal is "none";
    signal grp_fu_394_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_397_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state80 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state80 : signal is "none";
    signal trunc_ln160_fu_453_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal shl_ln_fu_457_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal w_index_fu_465_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal xor_ln161_fu_480_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln165_fu_501_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_505_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln165_fu_515_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal or_ln165_fu_531_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_397_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln160_1_fu_569_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln160_1_fu_573_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal shl_ln160_fu_585_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln160_1_fu_591_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln160_fu_595_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln160_fu_581_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln160_2_fu_600_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal w_index_1_fu_604_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal xor_ln161_2_fu_620_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln167_fu_641_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln167_1_fu_659_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_645_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln167_fu_655_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln167_1_fu_683_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln167_fu_677_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_663_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln167_1_fu_673_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln167_3_fu_701_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln167_2_fu_695_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln167_fu_689_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln167_1_fu_707_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln167_fu_713_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (83 downto 0);

    component conv IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_r_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        input_r_ce0 : OUT STD_LOGIC;
        input_r_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
        output_r_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (0 downto 0);
        threshold_V_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        threshold_V_ce0 : OUT STD_LOGIC;
        threshold_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        M : IN STD_LOGIC_VECTOR (6 downto 0);
        N : IN STD_LOGIC_VECTOR (6 downto 0);
        I : IN STD_LOGIC_VECTOR (5 downto 0);
        L : IN STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component max_pool IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_r_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        input_r_ce0 : OUT STD_LOGIC;
        input_r_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
        output_r_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (0 downto 0);
        M : IN STD_LOGIC_VECTOR (6 downto 0);
        I : IN STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component pad IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_r_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        input_r_ce0 : OUT STD_LOGIC;
        input_r_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
        output_r_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (0 downto 0);
        M : IN STD_LOGIC_VECTOR (6 downto 0);
        I : IN STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component reshape IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_r_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        input_r_ce0 : OUT STD_LOGIC;
        input_r_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
        output_r_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component dut_fadd_32ns_32nibs IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dut_fmul_32ns_32njbC IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dut_sitofp_32ns_3kbM IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dut_fcmp_32ns_32nlbW IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component bnn_xcel_thresholg8j IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component bnn_xcel_thresholhbi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component bnn_xcel_w_fc1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (16 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component bnn_xcel_b_fc1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component bnn_xcel_w_fc2 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component bnn_xcel_b_fc2 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component bnn_xcel_mem_conv1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (0 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    threshold1_V_U : component bnn_xcel_thresholg8j
    generic map (
        DataWidth => 8,
        AddressRange => 5184,
        AddressWidth => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => grp_conv_fu_320_threshold_V_address0,
        ce0 => threshold1_V_ce0,
        q0 => threshold1_V_q0);

    threshold2_V_U : component bnn_xcel_thresholhbi
    generic map (
        DataWidth => 8,
        AddressRange => 5184,
        AddressWidth => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => grp_conv_fu_320_threshold_V_address0,
        ce0 => threshold2_V_ce0,
        q0 => threshold2_V_q0);

    w_fc1_U : component bnn_xcel_w_fc1
    generic map (
        DataWidth => 1,
        AddressRange => 131072,
        AddressWidth => 17)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => w_fc1_address0,
        ce0 => w_fc1_ce0,
        q0 => w_fc1_q0);

    b_fc1_U : component bnn_xcel_b_fc1
    generic map (
        DataWidth => 32,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => b_fc1_address0,
        ce0 => b_fc1_ce0,
        q0 => b_fc1_q0);

    w_fc2_U : component bnn_xcel_w_fc2
    generic map (
        DataWidth => 1,
        AddressRange => 2560,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => w_fc2_address0,
        ce0 => w_fc2_ce0,
        q0 => w_fc2_q0);

    b_fc2_U : component bnn_xcel_b_fc2
    generic map (
        DataWidth => 32,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => b_fc2_address0,
        ce0 => b_fc2_ce0,
        q0 => b_fc2_q0);

    mem_conv1_U : component bnn_xcel_mem_conv1
    generic map (
        DataWidth => 1,
        AddressRange => 5184,
        AddressWidth => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => mem_conv1_address0,
        ce0 => mem_conv1_ce0,
        we0 => mem_conv1_we0,
        d0 => mem_conv1_d0,
        q0 => mem_conv1_q0);

    mem_conv2_U : component bnn_xcel_mem_conv1
    generic map (
        DataWidth => 1,
        AddressRange => 5184,
        AddressWidth => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => mem_conv2_address0,
        ce0 => mem_conv2_ce0,
        we0 => mem_conv2_we0,
        d0 => mem_conv2_d0,
        q0 => mem_conv2_q0);

    grp_conv_fu_320 : component conv
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_conv_fu_320_ap_start,
        ap_done => grp_conv_fu_320_ap_done,
        ap_idle => grp_conv_fu_320_ap_idle,
        ap_ready => grp_conv_fu_320_ap_ready,
        input_r_address0 => grp_conv_fu_320_input_r_address0,
        input_r_ce0 => grp_conv_fu_320_input_r_ce0,
        input_r_q0 => grp_conv_fu_320_input_r_q0,
        output_r_address0 => grp_conv_fu_320_output_r_address0,
        output_r_ce0 => grp_conv_fu_320_output_r_ce0,
        output_r_we0 => grp_conv_fu_320_output_r_we0,
        output_r_d0 => grp_conv_fu_320_output_r_d0,
        threshold_V_address0 => grp_conv_fu_320_threshold_V_address0,
        threshold_V_ce0 => grp_conv_fu_320_threshold_V_ce0,
        threshold_V_q0 => grp_conv_fu_320_threshold_V_q0,
        M => grp_conv_fu_320_M,
        N => grp_conv_fu_320_N,
        I => grp_conv_fu_320_I,
        L => grp_conv_fu_320_L);

    grp_max_pool_fu_345 : component max_pool
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_max_pool_fu_345_ap_start,
        ap_done => grp_max_pool_fu_345_ap_done,
        ap_idle => grp_max_pool_fu_345_ap_idle,
        ap_ready => grp_max_pool_fu_345_ap_ready,
        input_r_address0 => grp_max_pool_fu_345_input_r_address0,
        input_r_ce0 => grp_max_pool_fu_345_input_r_ce0,
        input_r_q0 => grp_max_pool_fu_345_input_r_q0,
        output_r_address0 => grp_max_pool_fu_345_output_r_address0,
        output_r_ce0 => grp_max_pool_fu_345_output_r_ce0,
        output_r_we0 => grp_max_pool_fu_345_output_r_we0,
        output_r_d0 => grp_max_pool_fu_345_output_r_d0,
        M => grp_max_pool_fu_345_M,
        I => grp_max_pool_fu_345_I);

    grp_pad_fu_357 : component pad
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_pad_fu_357_ap_start,
        ap_done => grp_pad_fu_357_ap_done,
        ap_idle => grp_pad_fu_357_ap_idle,
        ap_ready => grp_pad_fu_357_ap_ready,
        input_r_address0 => grp_pad_fu_357_input_r_address0,
        input_r_ce0 => grp_pad_fu_357_input_r_ce0,
        input_r_q0 => grp_pad_fu_357_input_r_q0,
        output_r_address0 => grp_pad_fu_357_output_r_address0,
        output_r_ce0 => grp_pad_fu_357_output_r_ce0,
        output_r_we0 => grp_pad_fu_357_output_r_we0,
        output_r_d0 => grp_pad_fu_357_output_r_d0,
        M => grp_pad_fu_357_M,
        I => grp_pad_fu_357_I);

    grp_reshape_fu_371 : component reshape
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_reshape_fu_371_ap_start,
        ap_done => grp_reshape_fu_371_ap_done,
        ap_idle => grp_reshape_fu_371_ap_idle,
        ap_ready => grp_reshape_fu_371_ap_ready,
        input_r_address0 => grp_reshape_fu_371_input_r_address0,
        input_r_ce0 => grp_reshape_fu_371_input_r_ce0,
        input_r_q0 => mem_conv2_q0,
        output_r_address0 => grp_reshape_fu_371_output_r_address0,
        output_r_ce0 => grp_reshape_fu_371_output_r_ce0,
        output_r_we0 => grp_reshape_fu_371_output_r_we0,
        output_r_d0 => grp_reshape_fu_371_output_r_d0);

    dut_fadd_32ns_32nibs_U31 : component dut_fadd_32ns_32nibs
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_377_p0,
        din1 => grp_fu_377_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_377_p2);

    dut_fmul_32ns_32njbC_U32 : component dut_fmul_32ns_32njbC
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_385_p0,
        din1 => grp_fu_385_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_385_p2);

    dut_sitofp_32ns_3kbM_U33 : component dut_sitofp_32ns_3kbM
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_394_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_394_p1);

    dut_fcmp_32ns_32nlbW_U34 : component dut_fcmp_32ns_32nlbW
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_419,
        din1 => grp_fu_397_p1,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_397_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv32_0;
            else
                if (((icmp_ln70_fu_737_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state83))) then 
                    ap_return_preg <= agg_result_V_0_reg_297;
                end if; 
            end if;
        end if;
    end process;


    grp_conv_fu_320_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_conv_fu_320_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    grp_conv_fu_320_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_conv_fu_320_ap_ready = ap_const_logic_1)) then 
                    grp_conv_fu_320_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_max_pool_fu_345_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_max_pool_fu_345_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                    grp_max_pool_fu_345_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_max_pool_fu_345_ap_ready = ap_const_logic_1)) then 
                    grp_max_pool_fu_345_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_pad_fu_357_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_pad_fu_357_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state7) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                    grp_pad_fu_357_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_pad_fu_357_ap_ready = ap_const_logic_1)) then 
                    grp_pad_fu_357_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_reshape_fu_371_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_reshape_fu_371_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                    grp_reshape_fu_371_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_reshape_fu_371_ap_ready = ap_const_logic_1)) then 
                    grp_reshape_fu_371_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    agg_result_V_0_reg_297_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln157_1_fu_545_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state49))) then 
                agg_result_V_0_reg_297 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state84)) then 
                agg_result_V_0_reg_297 <= select_ln71_fu_754_p3;
            end if; 
        end if;
    end process;

    m_0_i3_reg_286_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln157_1_fu_545_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state49))) then 
                m_0_i3_reg_286 <= ap_const_lv9_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state62)) then 
                m_0_i3_reg_286 <= m_1_reg_848;
            end if; 
        end if;
    end process;

    m_0_i_reg_239_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln157_fu_429_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
                m_0_i_reg_239 <= ap_const_lv10_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
                m_0_i_reg_239 <= m_reg_777;
            end if; 
        end if;
    end process;

    max_0_i_reg_250_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln157_fu_429_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
                max_0_i_reg_250 <= ap_const_lv32_C2C80000;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state82)) then 
                max_0_i_reg_250 <= max_reg_893;
            end if; 
        end if;
    end process;

    max_id_V_reg_309_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln157_1_fu_545_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state49))) then 
                max_id_V_reg_309 <= ap_const_lv4_1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state84)) then 
                max_id_V_reg_309 <= i_reg_911;
            end if; 
        end if;
    end process;

    n_0_i1_reg_262_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln157_fu_429_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
                n_0_i1_reg_262 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state82)) then 
                n_0_i1_reg_262 <= n_1_reg_840;
            end if; 
        end if;
    end process;

    n_0_i_reg_215_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
                n_0_i_reg_215 <= n_reg_769;
            elsif (((grp_reshape_fu_371_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
                n_0_i_reg_215 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    one_out_0_i2_reg_274_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln157_1_fu_545_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state49))) then 
                one_out_0_i2_reg_274 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state62)) then 
                one_out_0_i2_reg_274 <= grp_fu_377_p2;
            end if; 
        end if;
    end process;

    one_out_0_i_reg_227_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln157_fu_429_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
                one_out_0_i_reg_227 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
                one_out_0_i_reg_227 <= grp_fu_377_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state47)) then
                and_ln165_reg_827 <= and_ln165_fu_535_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state81)) then
                and_ln167_1_reg_888 <= and_ln167_1_fu_719_p2;
                max_reg_893 <= max_fu_725_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state40)) then
                b_fc1_load_reg_812 <= b_fc1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state74)) then
                b_fc2_load_reg_883 <= b_fc2_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln70_fu_737_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state83))) then
                i_reg_911 <= i_fu_748_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state46)) then
                icmp_ln165_1_reg_822 <= icmp_ln165_1_fu_525_p2;
                icmp_ln165_reg_817 <= icmp_ln165_fu_519_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state50)) then
                m_1_reg_848 <= m_1_fu_563_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                m_reg_777 <= m_fu_447_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state49)) then
                    n_0_i1_cast11_reg_832(3 downto 0) <= n_0_i1_cast11_fu_541_p1(3 downto 0);
                n_1_reg_840 <= n_1_fu_551_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                    n_0_i_cast13_reg_761(8 downto 0) <= n_0_i_cast13_fu_425_p1(8 downto 0);
                n_reg_769 <= n_fu_435_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state23))) then
                reg_403 <= grp_fu_394_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state31))) then
                reg_414 <= grp_fu_385_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state70) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state36))) then
                reg_419 <= grp_fu_377_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                xor_ln161_1_reg_792 <= xor_ln161_1_fu_486_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state51)) then
                xor_ln161_3_reg_863 <= xor_ln161_3_fu_626_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state73)) then
                    zext_ln164_1_reg_873(3 downto 0) <= zext_ln164_1_fu_636_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state39)) then
                    zext_ln164_reg_802(8 downto 0) <= zext_ln164_fu_496_p1(8 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state83)) then
                    zext_ln321_reg_898(3 downto 0) <= zext_ln321_fu_733_p1(3 downto 0);
            end if;
        end if;
    end process;
    n_0_i_cast13_reg_761(16 downto 9) <= "00000000";
    zext_ln164_reg_802(63 downto 9) <= "0000000000000000000000000000000000000000000000000000000";
    n_0_i1_cast11_reg_832(9 downto 4) <= "000000";
    zext_ln164_1_reg_873(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    zext_ln321_reg_898(31 downto 4) <= "0000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state15, ap_CS_fsm_state16, icmp_ln159_fu_441_p2, ap_CS_fsm_state49, ap_CS_fsm_state50, icmp_ln159_1_fu_557_p2, ap_CS_fsm_state83, icmp_ln70_fu_737_p2, grp_conv_fu_320_ap_done, grp_max_pool_fu_345_ap_done, grp_pad_fu_357_ap_done, grp_reshape_fu_371_ap_done, ap_CS_fsm_state14, icmp_ln157_fu_429_p2, icmp_ln157_1_fu_545_p2, ap_CS_fsm_state4, ap_CS_fsm_state10, ap_CS_fsm_state6, ap_CS_fsm_state12, ap_CS_fsm_state2, ap_CS_fsm_state8)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((grp_pad_fu_357_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((grp_conv_fu_320_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((grp_max_pool_fu_345_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((grp_pad_fu_357_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((grp_conv_fu_320_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                if (((grp_max_pool_fu_345_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                if (((grp_reshape_fu_371_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state15 => 
                if (((icmp_ln157_fu_429_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    ap_NS_fsm <= ap_ST_fsm_state49;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state16 => 
                if (((icmp_ln159_fu_441_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                    ap_NS_fsm <= ap_ST_fsm_state29;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state49 => 
                if (((icmp_ln157_1_fu_545_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state49))) then
                    ap_NS_fsm <= ap_ST_fsm_state83;
                else
                    ap_NS_fsm <= ap_ST_fsm_state50;
                end if;
            when ap_ST_fsm_state50 => 
                if (((icmp_ln159_1_fu_557_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state50))) then
                    ap_NS_fsm <= ap_ST_fsm_state63;
                else
                    ap_NS_fsm <= ap_ST_fsm_state51;
                end if;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state76;
            when ap_ST_fsm_state76 => 
                ap_NS_fsm <= ap_ST_fsm_state77;
            when ap_ST_fsm_state77 => 
                ap_NS_fsm <= ap_ST_fsm_state78;
            when ap_ST_fsm_state78 => 
                ap_NS_fsm <= ap_ST_fsm_state79;
            when ap_ST_fsm_state79 => 
                ap_NS_fsm <= ap_ST_fsm_state80;
            when ap_ST_fsm_state80 => 
                ap_NS_fsm <= ap_ST_fsm_state81;
            when ap_ST_fsm_state81 => 
                ap_NS_fsm <= ap_ST_fsm_state82;
            when ap_ST_fsm_state82 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state83 => 
                if (((icmp_ln70_fu_737_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state83))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state84;
                end if;
            when ap_ST_fsm_state84 => 
                ap_NS_fsm <= ap_ST_fsm_state83;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln160_fu_595_p2 <= std_logic_vector(unsigned(n_0_i1_cast11_reg_832) + unsigned(zext_ln160_1_fu_591_p1));
    and_ln165_fu_535_p2 <= (or_ln165_fu_531_p2 and grp_fu_397_p2);
    and_ln167_1_fu_719_p2 <= (grp_fu_397_p2 and and_ln167_fu_713_p2);
    and_ln167_fu_713_p2 <= (or_ln167_fu_689_p2 and or_ln167_1_fu_707_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state46 <= ap_CS_fsm(45);
    ap_CS_fsm_state47 <= ap_CS_fsm(46);
    ap_CS_fsm_state48 <= ap_CS_fsm(47);
    ap_CS_fsm_state49 <= ap_CS_fsm(48);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state50 <= ap_CS_fsm(49);
    ap_CS_fsm_state51 <= ap_CS_fsm(50);
    ap_CS_fsm_state52 <= ap_CS_fsm(51);
    ap_CS_fsm_state57 <= ap_CS_fsm(56);
    ap_CS_fsm_state58 <= ap_CS_fsm(57);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state62 <= ap_CS_fsm(61);
    ap_CS_fsm_state65 <= ap_CS_fsm(64);
    ap_CS_fsm_state66 <= ap_CS_fsm(65);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state70 <= ap_CS_fsm(69);
    ap_CS_fsm_state71 <= ap_CS_fsm(70);
    ap_CS_fsm_state73 <= ap_CS_fsm(72);
    ap_CS_fsm_state74 <= ap_CS_fsm(73);
    ap_CS_fsm_state75 <= ap_CS_fsm(74);
    ap_CS_fsm_state79 <= ap_CS_fsm(78);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state80 <= ap_CS_fsm(79);
    ap_CS_fsm_state81 <= ap_CS_fsm(80);
    ap_CS_fsm_state82 <= ap_CS_fsm(81);
    ap_CS_fsm_state83 <= ap_CS_fsm(82);
    ap_CS_fsm_state84 <= ap_CS_fsm(83);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state83, icmp_ln70_fu_737_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((icmp_ln70_fu_737_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state83)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state83, icmp_ln70_fu_737_p2)
    begin
        if (((icmp_ln70_fu_737_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state83))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(ap_CS_fsm_state83, icmp_ln70_fu_737_p2, agg_result_V_0_reg_297, ap_return_preg)
    begin
        if (((icmp_ln70_fu_737_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state83))) then 
            ap_return <= agg_result_V_0_reg_297;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;

    b_fc1_address0 <= zext_ln164_fu_496_p1(8 - 1 downto 0);

    b_fc1_ce0_assign_proc : process(ap_CS_fsm_state39)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            b_fc1_ce0 <= ap_const_logic_1;
        else 
            b_fc1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    b_fc2_address0 <= zext_ln164_1_fu_636_p1(4 - 1 downto 0);

    b_fc2_ce0_assign_proc : process(ap_CS_fsm_state73)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
            b_fc2_ce0 <= ap_const_logic_1;
        else 
            b_fc2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln165_fu_501_p1 <= reg_419;
    bitcast_ln167_1_fu_659_p1 <= max_0_i_reg_250;
    bitcast_ln167_fu_641_p1 <= reg_419;

    grp_conv_fu_320_I_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_conv_fu_320_I <= ap_const_lv6_A;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_conv_fu_320_I <= ap_const_lv6_12;
        else 
            grp_conv_fu_320_I <= "XXXXXX";
        end if; 
    end process;


    grp_conv_fu_320_L_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_conv_fu_320_L <= ap_const_lv1_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_conv_fu_320_L <= ap_const_lv1_0;
        else 
            grp_conv_fu_320_L <= "X";
        end if; 
    end process;


    grp_conv_fu_320_M_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_conv_fu_320_M <= ap_const_lv7_10;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_conv_fu_320_M <= ap_const_lv7_1;
        else 
            grp_conv_fu_320_M <= "XXXXXXX";
        end if; 
    end process;


    grp_conv_fu_320_N_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_conv_fu_320_N <= ap_const_lv7_20;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_conv_fu_320_N <= ap_const_lv7_10;
        else 
            grp_conv_fu_320_N <= "XXXXXXX";
        end if; 
    end process;

    grp_conv_fu_320_ap_start <= grp_conv_fu_320_ap_start_reg;

    grp_conv_fu_320_input_r_q0_assign_proc : process(mem_conv1_q0, mem_conv2_q0, ap_CS_fsm_state4, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_conv_fu_320_input_r_q0 <= mem_conv2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_conv_fu_320_input_r_q0 <= mem_conv1_q0;
        else 
            grp_conv_fu_320_input_r_q0 <= "X";
        end if; 
    end process;


    grp_conv_fu_320_threshold_V_q0_assign_proc : process(threshold1_V_q0, threshold2_V_q0, ap_CS_fsm_state4, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_conv_fu_320_threshold_V_q0 <= threshold2_V_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_conv_fu_320_threshold_V_q0 <= threshold1_V_q0;
        else 
            grp_conv_fu_320_threshold_V_q0 <= "XXXXXXXX";
        end if; 
    end process;


    grp_fu_377_p0_assign_proc : process(reg_414, one_out_0_i_reg_227, one_out_0_i2_reg_274, ap_CS_fsm_state24, ap_CS_fsm_state32, ap_CS_fsm_state41, ap_CS_fsm_state58, ap_CS_fsm_state66, ap_CS_fsm_state75)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
            grp_fu_377_p0 <= one_out_0_i2_reg_274;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state75) or (ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state32))) then 
            grp_fu_377_p0 <= reg_414;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            grp_fu_377_p0 <= one_out_0_i_reg_227;
        else 
            grp_fu_377_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_377_p1_assign_proc : process(reg_403, b_fc1_load_reg_812, b_fc2_load_reg_883, ap_CS_fsm_state24, ap_CS_fsm_state32, ap_CS_fsm_state41, ap_CS_fsm_state58, ap_CS_fsm_state66, ap_CS_fsm_state75)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
            grp_fu_377_p1 <= b_fc2_load_reg_883;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state66)) then 
            grp_fu_377_p1 <= ap_const_lv32_C3800000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            grp_fu_377_p1 <= b_fc1_load_reg_812;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_fu_377_p1 <= ap_const_lv32_C4000000;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            grp_fu_377_p1 <= reg_403;
        else 
            grp_fu_377_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_385_p0_assign_proc : process(reg_419, ap_CS_fsm_state16, ap_CS_fsm_state50, one_out_0_i_reg_227, one_out_0_i2_reg_274, ap_CS_fsm_state37, ap_CS_fsm_state71)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            grp_fu_385_p0 <= one_out_0_i2_reg_274;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state71) or (ap_const_logic_1 = ap_CS_fsm_state37))) then 
            grp_fu_385_p0 <= reg_419;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_385_p0 <= one_out_0_i_reg_227;
        else 
            grp_fu_385_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_385_p1_assign_proc : process(ap_CS_fsm_state16, ap_CS_fsm_state50, ap_CS_fsm_state37, ap_CS_fsm_state71)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
            grp_fu_385_p1 <= ap_const_lv32_3DB504F3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_fu_385_p1 <= ap_const_lv32_3D800000;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            grp_fu_385_p1 <= ap_const_lv32_40000000;
        else 
            grp_fu_385_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_394_p0_assign_proc : process(zext_ln161_2_fu_492_p1, ap_CS_fsm_state18, zext_ln161_5_fu_632_p1, ap_CS_fsm_state52)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
            grp_fu_394_p0 <= zext_ln161_5_fu_632_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_fu_394_p0 <= zext_ln161_2_fu_492_p1;
        else 
            grp_fu_394_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_397_p1_assign_proc : process(ap_CS_fsm_state46, max_0_i_reg_250, ap_CS_fsm_state80)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state80)) then 
            grp_fu_397_p1 <= max_0_i_reg_250;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            grp_fu_397_p1 <= ap_const_lv32_0;
        else 
            grp_fu_397_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_max_pool_fu_345_I_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_max_pool_fu_345_I <= ap_const_lv6_8;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_max_pool_fu_345_I <= ap_const_lv6_10;
        else 
            grp_max_pool_fu_345_I <= "XXXXXX";
        end if; 
    end process;


    grp_max_pool_fu_345_M_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_max_pool_fu_345_M <= ap_const_lv7_20;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_max_pool_fu_345_M <= ap_const_lv7_10;
        else 
            grp_max_pool_fu_345_M <= "XXXXXXX";
        end if; 
    end process;

    grp_max_pool_fu_345_ap_start <= grp_max_pool_fu_345_ap_start_reg;

    grp_max_pool_fu_345_input_r_q0_assign_proc : process(mem_conv1_q0, mem_conv2_q0, ap_CS_fsm_state6, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_max_pool_fu_345_input_r_q0 <= mem_conv1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_max_pool_fu_345_input_r_q0 <= mem_conv2_q0;
        else 
            grp_max_pool_fu_345_input_r_q0 <= "X";
        end if; 
    end process;


    grp_pad_fu_357_I_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_pad_fu_357_I <= ap_const_lv6_8;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_pad_fu_357_I <= ap_const_lv6_10;
        else 
            grp_pad_fu_357_I <= "XXXXXX";
        end if; 
    end process;


    grp_pad_fu_357_M_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_pad_fu_357_M <= ap_const_lv7_10;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_pad_fu_357_M <= ap_const_lv7_1;
        else 
            grp_pad_fu_357_M <= "XXXXXXX";
        end if; 
    end process;

    grp_pad_fu_357_ap_start <= grp_pad_fu_357_ap_start_reg;

    grp_pad_fu_357_input_r_q0_assign_proc : process(input_r_q0, mem_conv1_q0, ap_CS_fsm_state2, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_pad_fu_357_input_r_q0 <= mem_conv1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_pad_fu_357_input_r_q0 <= input_r_q0;
        else 
            grp_pad_fu_357_input_r_q0 <= "X";
        end if; 
    end process;

    grp_reshape_fu_371_ap_start <= grp_reshape_fu_371_ap_start_reg;
    i_fu_748_p2 <= std_logic_vector(unsigned(max_id_V_reg_309) + unsigned(ap_const_lv4_1));
    icmp_ln157_1_fu_545_p2 <= "1" when (n_0_i1_reg_262 = ap_const_lv4_A) else "0";
    icmp_ln157_fu_429_p2 <= "1" when (n_0_i_reg_215 = ap_const_lv9_100) else "0";
    icmp_ln159_1_fu_557_p2 <= "1" when (m_0_i3_reg_286 = ap_const_lv9_100) else "0";
    icmp_ln159_fu_441_p2 <= "1" when (m_0_i_reg_239 = ap_const_lv10_200) else "0";
    icmp_ln165_1_fu_525_p2 <= "1" when (trunc_ln165_fu_515_p1 = ap_const_lv23_0) else "0";
    icmp_ln165_fu_519_p2 <= "0" when (tmp_2_fu_505_p4 = ap_const_lv8_FF) else "1";
    icmp_ln167_1_fu_683_p2 <= "1" when (trunc_ln167_fu_655_p1 = ap_const_lv23_0) else "0";
    icmp_ln167_2_fu_695_p2 <= "0" when (tmp_4_fu_663_p4 = ap_const_lv8_FF) else "1";
    icmp_ln167_3_fu_701_p2 <= "1" when (trunc_ln167_1_fu_673_p1 = ap_const_lv23_0) else "0";
    icmp_ln167_fu_677_p2 <= "0" when (tmp_fu_645_p4 = ap_const_lv8_FF) else "1";
    icmp_ln70_fu_737_p2 <= "1" when (max_id_V_reg_309 = ap_const_lv4_A) else "0";
    input_r_address0 <= grp_pad_fu_357_input_r_address0;

    input_r_ce0_assign_proc : process(grp_pad_fu_357_input_r_ce0, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            input_r_ce0 <= grp_pad_fu_357_input_r_ce0;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    m_1_fu_563_p2 <= std_logic_vector(unsigned(m_0_i3_reg_286) + unsigned(ap_const_lv9_1));
    m_fu_447_p2 <= std_logic_vector(unsigned(m_0_i_reg_239) + unsigned(ap_const_lv10_1));
    max_fu_725_p3 <= 
        reg_419 when (and_ln167_1_fu_719_p2(0) = '1') else 
        max_0_i_reg_250;

    mem_conv1_address0_assign_proc : process(ap_CS_fsm_state16, zext_ln164_1_reg_873, ap_CS_fsm_state83, grp_conv_fu_320_input_r_address0, grp_conv_fu_320_output_r_address0, grp_max_pool_fu_345_input_r_address0, grp_max_pool_fu_345_output_r_address0, grp_pad_fu_357_input_r_address0, grp_pad_fu_357_output_r_address0, grp_reshape_fu_371_output_r_address0, ap_CS_fsm_state14, ap_CS_fsm_state82, ap_CS_fsm_state4, ap_CS_fsm_state10, ap_CS_fsm_state6, ap_CS_fsm_state12, ap_CS_fsm_state2, ap_CS_fsm_state8, zext_ln161_fu_470_p1, zext_ln71_fu_743_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state83)) then 
            mem_conv1_address0 <= zext_ln71_fu_743_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state82)) then 
            mem_conv1_address0 <= zext_ln164_1_reg_873(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            mem_conv1_address0 <= zext_ln161_fu_470_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            mem_conv1_address0 <= grp_reshape_fu_371_output_r_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            mem_conv1_address0 <= grp_pad_fu_357_output_r_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            mem_conv1_address0 <= grp_pad_fu_357_input_r_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            mem_conv1_address0 <= grp_max_pool_fu_345_output_r_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            mem_conv1_address0 <= grp_max_pool_fu_345_input_r_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            mem_conv1_address0 <= grp_conv_fu_320_output_r_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            mem_conv1_address0 <= grp_conv_fu_320_input_r_address0;
        else 
            mem_conv1_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    mem_conv1_ce0_assign_proc : process(ap_CS_fsm_state16, ap_CS_fsm_state83, grp_conv_fu_320_input_r_ce0, grp_conv_fu_320_output_r_ce0, grp_max_pool_fu_345_input_r_ce0, grp_max_pool_fu_345_output_r_ce0, grp_pad_fu_357_input_r_ce0, grp_pad_fu_357_output_r_ce0, grp_reshape_fu_371_output_r_ce0, ap_CS_fsm_state14, ap_CS_fsm_state82, ap_CS_fsm_state4, ap_CS_fsm_state10, ap_CS_fsm_state6, ap_CS_fsm_state12, ap_CS_fsm_state2, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state82) or (ap_const_logic_1 = ap_CS_fsm_state83) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            mem_conv1_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            mem_conv1_ce0 <= grp_reshape_fu_371_output_r_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            mem_conv1_ce0 <= grp_pad_fu_357_output_r_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            mem_conv1_ce0 <= grp_pad_fu_357_input_r_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            mem_conv1_ce0 <= grp_max_pool_fu_345_output_r_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            mem_conv1_ce0 <= grp_max_pool_fu_345_input_r_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            mem_conv1_ce0 <= grp_conv_fu_320_output_r_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            mem_conv1_ce0 <= grp_conv_fu_320_input_r_ce0;
        else 
            mem_conv1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    mem_conv1_d0_assign_proc : process(and_ln167_1_reg_888, grp_conv_fu_320_output_r_d0, grp_max_pool_fu_345_output_r_d0, grp_pad_fu_357_output_r_d0, grp_reshape_fu_371_output_r_d0, ap_CS_fsm_state14, ap_CS_fsm_state82, ap_CS_fsm_state10, ap_CS_fsm_state6, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state82)) then 
            mem_conv1_d0 <= and_ln167_1_reg_888;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            mem_conv1_d0 <= grp_reshape_fu_371_output_r_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            mem_conv1_d0 <= grp_pad_fu_357_output_r_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            mem_conv1_d0 <= grp_max_pool_fu_345_output_r_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            mem_conv1_d0 <= grp_conv_fu_320_output_r_d0;
        else 
            mem_conv1_d0 <= "X";
        end if; 
    end process;


    mem_conv1_we0_assign_proc : process(grp_conv_fu_320_output_r_we0, grp_max_pool_fu_345_output_r_we0, grp_pad_fu_357_output_r_we0, grp_reshape_fu_371_output_r_we0, ap_CS_fsm_state14, ap_CS_fsm_state82, ap_CS_fsm_state10, ap_CS_fsm_state6, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state82)) then 
            mem_conv1_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            mem_conv1_we0 <= grp_reshape_fu_371_output_r_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            mem_conv1_we0 <= grp_pad_fu_357_output_r_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            mem_conv1_we0 <= grp_max_pool_fu_345_output_r_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            mem_conv1_we0 <= grp_conv_fu_320_output_r_we0;
        else 
            mem_conv1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    mem_conv2_address0_assign_proc : process(zext_ln164_reg_802, ap_CS_fsm_state50, grp_conv_fu_320_input_r_address0, grp_conv_fu_320_output_r_address0, grp_max_pool_fu_345_input_r_address0, grp_max_pool_fu_345_output_r_address0, grp_pad_fu_357_output_r_address0, grp_reshape_fu_371_input_r_address0, ap_CS_fsm_state14, ap_CS_fsm_state48, ap_CS_fsm_state4, ap_CS_fsm_state10, ap_CS_fsm_state6, ap_CS_fsm_state12, ap_CS_fsm_state8, zext_ln161_3_fu_610_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            mem_conv2_address0 <= zext_ln161_3_fu_610_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            mem_conv2_address0 <= zext_ln164_reg_802(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            mem_conv2_address0 <= grp_reshape_fu_371_input_r_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            mem_conv2_address0 <= grp_pad_fu_357_output_r_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            mem_conv2_address0 <= grp_max_pool_fu_345_output_r_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            mem_conv2_address0 <= grp_max_pool_fu_345_input_r_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            mem_conv2_address0 <= grp_conv_fu_320_output_r_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            mem_conv2_address0 <= grp_conv_fu_320_input_r_address0;
        else 
            mem_conv2_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    mem_conv2_ce0_assign_proc : process(ap_CS_fsm_state50, grp_conv_fu_320_input_r_ce0, grp_conv_fu_320_output_r_ce0, grp_max_pool_fu_345_input_r_ce0, grp_max_pool_fu_345_output_r_ce0, grp_pad_fu_357_output_r_ce0, grp_reshape_fu_371_input_r_ce0, ap_CS_fsm_state14, ap_CS_fsm_state48, ap_CS_fsm_state4, ap_CS_fsm_state10, ap_CS_fsm_state6, ap_CS_fsm_state12, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state50))) then 
            mem_conv2_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            mem_conv2_ce0 <= grp_reshape_fu_371_input_r_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            mem_conv2_ce0 <= grp_pad_fu_357_output_r_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            mem_conv2_ce0 <= grp_max_pool_fu_345_output_r_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            mem_conv2_ce0 <= grp_max_pool_fu_345_input_r_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            mem_conv2_ce0 <= grp_conv_fu_320_output_r_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            mem_conv2_ce0 <= grp_conv_fu_320_input_r_ce0;
        else 
            mem_conv2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    mem_conv2_d0_assign_proc : process(and_ln165_reg_827, grp_conv_fu_320_output_r_d0, grp_max_pool_fu_345_output_r_d0, grp_pad_fu_357_output_r_d0, ap_CS_fsm_state48, ap_CS_fsm_state4, ap_CS_fsm_state12, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            mem_conv2_d0 <= and_ln165_reg_827;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            mem_conv2_d0 <= grp_pad_fu_357_output_r_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            mem_conv2_d0 <= grp_max_pool_fu_345_output_r_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            mem_conv2_d0 <= grp_conv_fu_320_output_r_d0;
        else 
            mem_conv2_d0 <= "X";
        end if; 
    end process;


    mem_conv2_we0_assign_proc : process(grp_conv_fu_320_output_r_we0, grp_max_pool_fu_345_output_r_we0, grp_pad_fu_357_output_r_we0, ap_CS_fsm_state48, ap_CS_fsm_state4, ap_CS_fsm_state12, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            mem_conv2_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            mem_conv2_we0 <= grp_pad_fu_357_output_r_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            mem_conv2_we0 <= grp_max_pool_fu_345_output_r_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            mem_conv2_we0 <= grp_conv_fu_320_output_r_we0;
        else 
            mem_conv2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    n_0_i1_cast11_fu_541_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n_0_i1_reg_262),10));
    n_0_i_cast13_fu_425_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n_0_i_reg_215),17));
    n_1_fu_551_p2 <= std_logic_vector(unsigned(n_0_i1_reg_262) + unsigned(ap_const_lv4_1));
    n_fu_435_p2 <= std_logic_vector(unsigned(n_0_i_reg_215) + unsigned(ap_const_lv9_1));
    or_ln165_fu_531_p2 <= (icmp_ln165_reg_817 or icmp_ln165_1_reg_822);
    or_ln167_1_fu_707_p2 <= (icmp_ln167_3_fu_701_p2 or icmp_ln167_2_fu_695_p2);
    or_ln167_fu_689_p2 <= (icmp_ln167_fu_677_p2 or icmp_ln167_1_fu_683_p2);
    select_ln71_fu_754_p3 <= 
        zext_ln321_reg_898 when (mem_conv1_q0(0) = '1') else 
        agg_result_V_0_reg_297;
    shl_ln160_1_fu_573_p3 <= (trunc_ln160_1_fu_569_p1 & ap_const_lv3_0);
    shl_ln160_fu_585_p2 <= std_logic_vector(shift_left(unsigned(m_0_i3_reg_286),to_integer(unsigned('0' & ap_const_lv9_1(9-1 downto 0)))));
    shl_ln_fu_457_p3 <= (trunc_ln160_fu_453_p1 & ap_const_lv8_0);

    threshold1_V_ce0_assign_proc : process(grp_conv_fu_320_threshold_V_ce0, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            threshold1_V_ce0 <= grp_conv_fu_320_threshold_V_ce0;
        else 
            threshold1_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    threshold2_V_ce0_assign_proc : process(grp_conv_fu_320_threshold_V_ce0, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            threshold2_V_ce0 <= grp_conv_fu_320_threshold_V_ce0;
        else 
            threshold2_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_2_fu_505_p4 <= bitcast_ln165_fu_501_p1(30 downto 23);
    tmp_4_fu_663_p4 <= bitcast_ln167_1_fu_659_p1(30 downto 23);
    tmp_fu_645_p4 <= bitcast_ln167_fu_641_p1(30 downto 23);
    trunc_ln160_1_fu_569_p1 <= m_0_i3_reg_286(8 - 1 downto 0);
    trunc_ln160_fu_453_p1 <= m_0_i_reg_239(9 - 1 downto 0);
    trunc_ln165_fu_515_p1 <= bitcast_ln165_fu_501_p1(23 - 1 downto 0);
    trunc_ln167_1_fu_673_p1 <= bitcast_ln167_1_fu_659_p1(23 - 1 downto 0);
    trunc_ln167_fu_655_p1 <= bitcast_ln167_fu_641_p1(23 - 1 downto 0);
    w_fc1_address0 <= zext_ln161_1_fu_475_p1(17 - 1 downto 0);

    w_fc1_ce0_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            w_fc1_ce0 <= ap_const_logic_1;
        else 
            w_fc1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    w_fc2_address0 <= zext_ln161_4_fu_615_p1(12 - 1 downto 0);

    w_fc2_ce0_assign_proc : process(ap_CS_fsm_state50)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            w_fc2_ce0 <= ap_const_logic_1;
        else 
            w_fc2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    w_index_1_fu_604_p2 <= std_logic_vector(unsigned(zext_ln160_fu_581_p1) + unsigned(zext_ln160_2_fu_600_p1));
    w_index_fu_465_p2 <= std_logic_vector(unsigned(n_0_i_cast13_reg_761) + unsigned(shl_ln_fu_457_p3));
    xor_ln161_1_fu_486_p2 <= (xor_ln161_fu_480_p2 xor mem_conv1_q0);
    xor_ln161_2_fu_620_p2 <= (w_fc2_q0 xor ap_const_lv1_1);
    xor_ln161_3_fu_626_p2 <= (xor_ln161_2_fu_620_p2 xor mem_conv2_q0);
    xor_ln161_fu_480_p2 <= (w_fc1_q0 xor ap_const_lv1_1);
    zext_ln160_1_fu_591_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln160_fu_585_p2),10));
    zext_ln160_2_fu_600_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln160_fu_595_p2),12));
    zext_ln160_fu_581_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln160_1_fu_573_p3),12));
    zext_ln161_1_fu_475_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w_index_fu_465_p2),64));
    zext_ln161_2_fu_492_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln161_1_reg_792),32));
    zext_ln161_3_fu_610_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_0_i3_reg_286),64));
    zext_ln161_4_fu_615_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w_index_1_fu_604_p2),64));
    zext_ln161_5_fu_632_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln161_3_reg_863),32));
    zext_ln161_fu_470_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_0_i_reg_239),64));
    zext_ln164_1_fu_636_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n_0_i1_reg_262),64));
    zext_ln164_fu_496_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n_0_i_reg_215),64));
    zext_ln321_fu_733_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(max_id_V_reg_309),32));
    zext_ln71_fu_743_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(max_id_V_reg_309),64));
end behav;
