// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="dut,hls_ip_2019_2_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=11.313500,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=23,HLS_SYN_DSP=11,HLS_SYN_FF=2151,HLS_SYN_LUT=4740,HLS_VERSION=2019_2_1}" *)

module dut (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        strm_in_V_V_dout,
        strm_in_V_V_empty_n,
        strm_in_V_V_read,
        strm_out_V_V_din,
        strm_out_V_V_full_n,
        strm_out_V_V_write
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] strm_in_V_V_dout;
input   strm_in_V_V_empty_n;
output   strm_in_V_V_read;
output  [31:0] strm_out_V_V_din;
input   strm_out_V_V_full_n;
output   strm_out_V_V_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg strm_in_V_V_read;
reg strm_out_V_V_write;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    strm_in_V_V_blk_n;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln29_fu_167_p2;
reg    strm_out_V_V_blk_n;
wire    ap_CS_fsm_state4;
wire   [3:0] i_fu_173_p2;
reg   [3:0] i_reg_232;
reg    ap_block_state2;
reg   [31:0] tmp_V_2_reg_237;
wire   [7:0] shl_ln_fu_183_p3;
reg   [7:0] shl_ln_reg_242;
wire   [5:0] j_fu_205_p2;
wire    ap_CS_fsm_state3;
reg   [12:0] input_address0;
reg    input_ce0;
reg    input_we0;
wire   [0:0] input_d0;
wire   [0:0] input_q0;
wire    grp_bnn_xcel_fu_145_ap_start;
wire    grp_bnn_xcel_fu_145_ap_done;
wire    grp_bnn_xcel_fu_145_ap_idle;
wire    grp_bnn_xcel_fu_145_ap_ready;
wire   [12:0] grp_bnn_xcel_fu_145_input_r_address0;
wire    grp_bnn_xcel_fu_145_input_r_ce0;
wire   [31:0] grp_bnn_xcel_fu_145_ap_return;
reg   [3:0] i_0_reg_123;
wire   [0:0] icmp_ln31_fu_199_p2;
reg   [5:0] Hi_assign_reg_134;
reg    grp_bnn_xcel_fu_145_ap_start_reg;
reg    ap_block_state2_ignore_call0;
wire   [63:0] zext_ln32_fu_224_p1;
wire   [2:0] trunc_ln32_fu_179_p1;
wire   [31:0] zext_ln31_1_fu_195_p1;
wire   [7:0] zext_ln31_fu_191_p1;
wire   [7:0] add_ln32_fu_219_p2;
reg   [3:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 grp_bnn_xcel_fu_145_ap_start_reg = 1'b0;
end

bnn_xcel_mem_conv1 #(
    .DataWidth( 1 ),
    .AddressRange( 5184 ),
    .AddressWidth( 13 ))
input_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(input_address0),
    .ce0(input_ce0),
    .we0(input_we0),
    .d0(input_d0),
    .q0(input_q0)
);

bnn_xcel grp_bnn_xcel_fu_145(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_bnn_xcel_fu_145_ap_start),
    .ap_done(grp_bnn_xcel_fu_145_ap_done),
    .ap_idle(grp_bnn_xcel_fu_145_ap_idle),
    .ap_ready(grp_bnn_xcel_fu_145_ap_ready),
    .input_r_address0(grp_bnn_xcel_fu_145_input_r_address0),
    .input_r_ce0(grp_bnn_xcel_fu_145_input_r_ce0),
    .input_r_q0(input_q0),
    .ap_return(grp_bnn_xcel_fu_145_ap_return)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_bnn_xcel_fu_145_ap_start_reg <= 1'b0;
    end else begin
        if ((~((icmp_ln29_fu_167_p2 == 1'd0) & (strm_in_V_V_empty_n == 1'b0)) & (icmp_ln29_fu_167_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            grp_bnn_xcel_fu_145_ap_start_reg <= 1'b1;
        end else if ((grp_bnn_xcel_fu_145_ap_ready == 1'b1)) begin
            grp_bnn_xcel_fu_145_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln31_fu_199_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        Hi_assign_reg_134 <= j_fu_205_p2;
    end else if ((~((icmp_ln29_fu_167_p2 == 1'd0) & (strm_in_V_V_empty_n == 1'b0)) & (icmp_ln29_fu_167_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        Hi_assign_reg_134 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln31_fu_199_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_0_reg_123 <= i_reg_232;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_123 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln29_fu_167_p2 == 1'd0) & (strm_in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
        i_reg_232 <= i_fu_173_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln29_fu_167_p2 == 1'd0) & (strm_in_V_V_empty_n == 1'b0)) & (icmp_ln29_fu_167_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        shl_ln_reg_242[7 : 5] <= shl_ln_fu_183_p3[7 : 5];
        tmp_V_2_reg_237 <= strm_in_V_V_dout;
    end
end

always @ (*) begin
    if ((~((grp_bnn_xcel_fu_145_ap_done == 1'b0) | (strm_out_V_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((grp_bnn_xcel_fu_145_ap_done == 1'b0) | (strm_out_V_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        input_address0 = zext_ln32_fu_224_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        input_address0 = grp_bnn_xcel_fu_145_input_r_address0;
    end else begin
        input_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        input_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        input_ce0 = grp_bnn_xcel_fu_145_input_r_ce0;
    end else begin
        input_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln31_fu_199_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        input_we0 = 1'b1;
    end else begin
        input_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln29_fu_167_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        strm_in_V_V_blk_n = strm_in_V_V_empty_n;
    end else begin
        strm_in_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((icmp_ln29_fu_167_p2 == 1'd0) & (strm_in_V_V_empty_n == 1'b0)) & (icmp_ln29_fu_167_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        strm_in_V_V_read = 1'b1;
    end else begin
        strm_in_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        strm_out_V_V_blk_n = strm_out_V_V_full_n;
    end else begin
        strm_out_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((grp_bnn_xcel_fu_145_ap_done == 1'b0) | (strm_out_V_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state4))) begin
        strm_out_V_V_write = 1'b1;
    end else begin
        strm_out_V_V_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((icmp_ln29_fu_167_p2 == 1'd0) & (strm_in_V_V_empty_n == 1'b0)) & (icmp_ln29_fu_167_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else if ((~((icmp_ln29_fu_167_p2 == 1'd0) & (strm_in_V_V_empty_n == 1'b0)) & (icmp_ln29_fu_167_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln31_fu_199_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if ((~((grp_bnn_xcel_fu_145_ap_done == 1'b0) | (strm_out_V_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln32_fu_219_p2 = (zext_ln31_fu_191_p1 + shl_ln_reg_242);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

always @ (*) begin
    ap_block_state2 = ((icmp_ln29_fu_167_p2 == 1'd0) & (strm_in_V_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state2_ignore_call0 = ((icmp_ln29_fu_167_p2 == 1'd0) & (strm_in_V_V_empty_n == 1'b0));
end

assign grp_bnn_xcel_fu_145_ap_start = grp_bnn_xcel_fu_145_ap_start_reg;

assign i_fu_173_p2 = (i_0_reg_123 + 4'd1);

assign icmp_ln29_fu_167_p2 = ((i_0_reg_123 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln31_fu_199_p2 = ((Hi_assign_reg_134 == 6'd32) ? 1'b1 : 1'b0);

assign input_d0 = tmp_V_2_reg_237[zext_ln31_1_fu_195_p1];

assign j_fu_205_p2 = (Hi_assign_reg_134 + 6'd1);

assign shl_ln_fu_183_p3 = {{trunc_ln32_fu_179_p1}, {5'd0}};

assign strm_out_V_V_din = grp_bnn_xcel_fu_145_ap_return;

assign trunc_ln32_fu_179_p1 = i_0_reg_123[2:0];

assign zext_ln31_1_fu_195_p1 = Hi_assign_reg_134;

assign zext_ln31_fu_191_p1 = Hi_assign_reg_134;

assign zext_ln32_fu_224_p1 = add_ln32_fu_219_p2;

always @ (posedge ap_clk) begin
    shl_ln_reg_242[4:0] <= 5'b00000;
end

endmodule //dut
