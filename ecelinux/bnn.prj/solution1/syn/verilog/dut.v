// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.2
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="dut,hls_ip_2016_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.340000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=23,HLS_SYN_DSP=19,HLS_SYN_FF=3013,HLS_SYN_LUT=4860}" *)

module dut (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        strm_in_V_V_dout,
        strm_in_V_V_empty_n,
        strm_in_V_V_read,
        strm_out_V_V_din,
        strm_out_V_V_full_n,
        strm_out_V_V_write
);

parameter    ap_ST_st1_fsm_0 = 4'b1;
parameter    ap_ST_st2_fsm_1 = 4'b10;
parameter    ap_ST_st3_fsm_2 = 4'b100;
parameter    ap_ST_st4_fsm_3 = 4'b1000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv4_0 = 4'b0000;
parameter    ap_const_lv6_0 = 6'b000000;
parameter    ap_const_lv4_8 = 4'b1000;
parameter    ap_const_lv4_1 = 4'b1;
parameter    ap_const_lv5_0 = 5'b00000;
parameter    ap_const_lv6_20 = 6'b100000;
parameter    ap_const_lv6_1 = 6'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] strm_in_V_V_dout;
input   strm_in_V_V_empty_n;
output   strm_in_V_V_read;
output  [31:0] strm_out_V_V_din;
input   strm_out_V_V_full_n;
output   strm_out_V_V_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg strm_in_V_V_read;
reg strm_out_V_V_write;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_19;
reg    strm_in_V_V_blk_n;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_40;
wire   [0:0] exitcond1_fu_158_p2;
reg    strm_out_V_V_blk_n;
reg    ap_sig_cseq_ST_st4_fsm_3;
reg    ap_sig_52;
wire   [3:0] i_3_fu_164_p2;
reg   [3:0] i_3_reg_223;
reg    ap_sig_58;
reg   [31:0] tmp_V_2_reg_228;
wire   [7:0] tmp_s_fu_174_p3;
reg   [7:0] tmp_s_reg_233;
wire   [5:0] j_fu_196_p2;
reg    ap_sig_cseq_ST_st3_fsm_2;
reg    ap_sig_73;
reg   [12:0] input_address0;
reg    input_ce0;
reg    input_we0;
wire   [0:0] input_d0;
wire   [0:0] input_q0;
wire    grp_dut_bnn_xcel_fu_136_ap_start;
wire    grp_dut_bnn_xcel_fu_136_ap_done;
wire    grp_dut_bnn_xcel_fu_136_ap_idle;
wire    grp_dut_bnn_xcel_fu_136_ap_ready;
wire   [12:0] grp_dut_bnn_xcel_fu_136_input_r_address0;
wire    grp_dut_bnn_xcel_fu_136_input_r_ce0;
wire   [31:0] grp_dut_bnn_xcel_fu_136_ap_return;
reg   [3:0] i_reg_114;
wire   [0:0] exitcond_fu_190_p2;
reg   [5:0] Hi_assign_reg_125;
reg    ap_reg_grp_dut_bnn_xcel_fu_136_ap_start;
wire   [63:0] tmp_4_fu_215_p1;
wire   [2:0] tmp_fu_170_p1;
wire   [31:0] Hi_assign_cast1_fu_186_p1;
wire   [7:0] Hi_assign_cast2_fu_182_p1;
wire   [7:0] tmp_3_fu_210_p2;
reg   [3:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'b1;
#0 ap_reg_grp_dut_bnn_xcel_fu_136_ap_start = 1'b0;
end

dut_bnn_xcel_mem_conv1 #(
    .DataWidth( 1 ),
    .AddressRange( 5184 ),
    .AddressWidth( 13 ))
input_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(input_address0),
    .ce0(input_ce0),
    .we0(input_we0),
    .d0(input_d0),
    .q0(input_q0)
);

dut_bnn_xcel grp_dut_bnn_xcel_fu_136(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_dut_bnn_xcel_fu_136_ap_start),
    .ap_done(grp_dut_bnn_xcel_fu_136_ap_done),
    .ap_idle(grp_dut_bnn_xcel_fu_136_ap_idle),
    .ap_ready(grp_dut_bnn_xcel_fu_136_ap_ready),
    .input_r_address0(grp_dut_bnn_xcel_fu_136_input_r_address0),
    .input_r_ce0(grp_dut_bnn_xcel_fu_136_input_r_ce0),
    .input_r_q0(input_q0),
    .ap_return(grp_dut_bnn_xcel_fu_136_ap_return)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_grp_dut_bnn_xcel_fu_136_ap_start <= 1'b0;
    end else begin
        if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & ~ap_sig_58 & ~(exitcond1_fu_158_p2 == 1'b0))) begin
            ap_reg_grp_dut_bnn_xcel_fu_136_ap_start <= 1'b1;
        end else if ((1'b1 == grp_dut_bnn_xcel_fu_136_ap_ready)) begin
            ap_reg_grp_dut_bnn_xcel_fu_136_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st3_fsm_2) & (1'b0 == exitcond_fu_190_p2))) begin
        Hi_assign_reg_125 <= j_fu_196_p2;
    end else if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond1_fu_158_p2 == 1'b0) & ~ap_sig_58)) begin
        Hi_assign_reg_125 <= ap_const_lv6_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st3_fsm_2) & ~(1'b0 == exitcond_fu_190_p2))) begin
        i_reg_114 <= i_3_reg_223;
    end else if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0))) begin
        i_reg_114 <= ap_const_lv4_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & ~ap_sig_58)) begin
        i_3_reg_223 <= i_3_fu_164_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond1_fu_158_p2 == 1'b0) & ~ap_sig_58)) begin
        tmp_V_2_reg_228 <= strm_in_V_V_dout;
        tmp_s_reg_233[7 : 5] <= tmp_s_fu_174_p3[7 : 5];
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st4_fsm_3) & ~((strm_out_V_V_full_n == 1'b0) | (1'b0 == grp_dut_bnn_xcel_fu_136_ap_done)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st4_fsm_3) & ~((strm_out_V_V_full_n == 1'b0) | (1'b0 == grp_dut_bnn_xcel_fu_136_ap_done)))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_19) begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_40) begin
        ap_sig_cseq_ST_st2_fsm_1 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_73) begin
        ap_sig_cseq_ST_st3_fsm_2 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st3_fsm_2 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_52) begin
        ap_sig_cseq_ST_st4_fsm_3 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st4_fsm_3 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        input_address0 = tmp_4_fu_215_p1;
    end else if ((1'b1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        input_address0 = grp_dut_bnn_xcel_fu_136_input_r_address0;
    end else begin
        input_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        input_ce0 = 1'b1;
    end else if ((1'b1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        input_ce0 = grp_dut_bnn_xcel_fu_136_input_r_ce0;
    end else begin
        input_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st3_fsm_2) & (1'b0 == exitcond_fu_190_p2))) begin
        input_we0 = 1'b1;
    end else begin
        input_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond1_fu_158_p2 == 1'b0))) begin
        strm_in_V_V_blk_n = strm_in_V_V_empty_n;
    end else begin
        strm_in_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond1_fu_158_p2 == 1'b0) & ~ap_sig_58)) begin
        strm_in_V_V_read = 1'b1;
    end else begin
        strm_in_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        strm_out_V_V_blk_n = strm_out_V_V_full_n;
    end else begin
        strm_out_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st4_fsm_3) & ~((strm_out_V_V_full_n == 1'b0) | (1'b0 == grp_dut_bnn_xcel_fu_136_ap_done)))) begin
        strm_out_V_V_write = 1'b1;
    end else begin
        strm_out_V_V_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : begin
            if (~(ap_start == 1'b0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : begin
            if (((exitcond1_fu_158_p2 == 1'b0) & ~ap_sig_58)) begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end else if ((~ap_sig_58 & ~(exitcond1_fu_158_p2 == 1'b0))) begin
                ap_NS_fsm = ap_ST_st4_fsm_3;
            end else begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end
        end
        ap_ST_st3_fsm_2 : begin
            if ((1'b0 == exitcond_fu_190_p2)) begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end else begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end
        end
        ap_ST_st4_fsm_3 : begin
            if (~((strm_out_V_V_full_n == 1'b0) | (1'b0 == grp_dut_bnn_xcel_fu_136_ap_done))) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_st4_fsm_3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Hi_assign_cast1_fu_186_p1 = Hi_assign_reg_125;

assign Hi_assign_cast2_fu_182_p1 = Hi_assign_reg_125;

always @ (*) begin
    ap_sig_19 = (ap_CS_fsm[ap_const_lv32_0] == 1'b1);
end

always @ (*) begin
    ap_sig_40 = (1'b1 == ap_CS_fsm[ap_const_lv32_1]);
end

always @ (*) begin
    ap_sig_52 = (1'b1 == ap_CS_fsm[ap_const_lv32_3]);
end

always @ (*) begin
    ap_sig_58 = ((exitcond1_fu_158_p2 == 1'b0) & (strm_in_V_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_sig_73 = (1'b1 == ap_CS_fsm[ap_const_lv32_2]);
end

assign exitcond1_fu_158_p2 = ((i_reg_114 == ap_const_lv4_8) ? 1'b1 : 1'b0);

assign exitcond_fu_190_p2 = ((Hi_assign_reg_125 == ap_const_lv6_20) ? 1'b1 : 1'b0);

assign grp_dut_bnn_xcel_fu_136_ap_start = ap_reg_grp_dut_bnn_xcel_fu_136_ap_start;

assign i_3_fu_164_p2 = (i_reg_114 + ap_const_lv4_1);

assign input_d0 = tmp_V_2_reg_228[Hi_assign_cast1_fu_186_p1];

assign j_fu_196_p2 = (Hi_assign_reg_125 + ap_const_lv6_1);

assign strm_out_V_V_din = grp_dut_bnn_xcel_fu_136_ap_return;

assign tmp_3_fu_210_p2 = (Hi_assign_cast2_fu_182_p1 + tmp_s_reg_233);

assign tmp_4_fu_215_p1 = tmp_3_fu_210_p2;

assign tmp_fu_170_p1 = i_reg_114[2:0];

assign tmp_s_fu_174_p3 = {{tmp_fu_170_p1}, {ap_const_lv5_0}};

always @ (posedge ap_clk) begin
    tmp_s_reg_233[4:0] <= 5'b00000;
end

endmodule //dut
