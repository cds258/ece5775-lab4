// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module bnn_xcel (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        ap_return
);

parameter    ap_ST_fsm_state1 = 84'd1;
parameter    ap_ST_fsm_state2 = 84'd2;
parameter    ap_ST_fsm_state3 = 84'd4;
parameter    ap_ST_fsm_state4 = 84'd8;
parameter    ap_ST_fsm_state5 = 84'd16;
parameter    ap_ST_fsm_state6 = 84'd32;
parameter    ap_ST_fsm_state7 = 84'd64;
parameter    ap_ST_fsm_state8 = 84'd128;
parameter    ap_ST_fsm_state9 = 84'd256;
parameter    ap_ST_fsm_state10 = 84'd512;
parameter    ap_ST_fsm_state11 = 84'd1024;
parameter    ap_ST_fsm_state12 = 84'd2048;
parameter    ap_ST_fsm_state13 = 84'd4096;
parameter    ap_ST_fsm_state14 = 84'd8192;
parameter    ap_ST_fsm_state15 = 84'd16384;
parameter    ap_ST_fsm_state16 = 84'd32768;
parameter    ap_ST_fsm_state17 = 84'd65536;
parameter    ap_ST_fsm_state18 = 84'd131072;
parameter    ap_ST_fsm_state19 = 84'd262144;
parameter    ap_ST_fsm_state20 = 84'd524288;
parameter    ap_ST_fsm_state21 = 84'd1048576;
parameter    ap_ST_fsm_state22 = 84'd2097152;
parameter    ap_ST_fsm_state23 = 84'd4194304;
parameter    ap_ST_fsm_state24 = 84'd8388608;
parameter    ap_ST_fsm_state25 = 84'd16777216;
parameter    ap_ST_fsm_state26 = 84'd33554432;
parameter    ap_ST_fsm_state27 = 84'd67108864;
parameter    ap_ST_fsm_state28 = 84'd134217728;
parameter    ap_ST_fsm_state29 = 84'd268435456;
parameter    ap_ST_fsm_state30 = 84'd536870912;
parameter    ap_ST_fsm_state31 = 84'd1073741824;
parameter    ap_ST_fsm_state32 = 84'd2147483648;
parameter    ap_ST_fsm_state33 = 84'd4294967296;
parameter    ap_ST_fsm_state34 = 84'd8589934592;
parameter    ap_ST_fsm_state35 = 84'd17179869184;
parameter    ap_ST_fsm_state36 = 84'd34359738368;
parameter    ap_ST_fsm_state37 = 84'd68719476736;
parameter    ap_ST_fsm_state38 = 84'd137438953472;
parameter    ap_ST_fsm_state39 = 84'd274877906944;
parameter    ap_ST_fsm_state40 = 84'd549755813888;
parameter    ap_ST_fsm_state41 = 84'd1099511627776;
parameter    ap_ST_fsm_state42 = 84'd2199023255552;
parameter    ap_ST_fsm_state43 = 84'd4398046511104;
parameter    ap_ST_fsm_state44 = 84'd8796093022208;
parameter    ap_ST_fsm_state45 = 84'd17592186044416;
parameter    ap_ST_fsm_state46 = 84'd35184372088832;
parameter    ap_ST_fsm_state47 = 84'd70368744177664;
parameter    ap_ST_fsm_state48 = 84'd140737488355328;
parameter    ap_ST_fsm_state49 = 84'd281474976710656;
parameter    ap_ST_fsm_state50 = 84'd562949953421312;
parameter    ap_ST_fsm_state51 = 84'd1125899906842624;
parameter    ap_ST_fsm_state52 = 84'd2251799813685248;
parameter    ap_ST_fsm_state53 = 84'd4503599627370496;
parameter    ap_ST_fsm_state54 = 84'd9007199254740992;
parameter    ap_ST_fsm_state55 = 84'd18014398509481984;
parameter    ap_ST_fsm_state56 = 84'd36028797018963968;
parameter    ap_ST_fsm_state57 = 84'd72057594037927936;
parameter    ap_ST_fsm_state58 = 84'd144115188075855872;
parameter    ap_ST_fsm_state59 = 84'd288230376151711744;
parameter    ap_ST_fsm_state60 = 84'd576460752303423488;
parameter    ap_ST_fsm_state61 = 84'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 84'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 84'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 84'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 84'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 84'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 84'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 84'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 84'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 84'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 84'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 84'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 84'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 84'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 84'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 84'd37778931862957161709568;
parameter    ap_ST_fsm_state77 = 84'd75557863725914323419136;
parameter    ap_ST_fsm_state78 = 84'd151115727451828646838272;
parameter    ap_ST_fsm_state79 = 84'd302231454903657293676544;
parameter    ap_ST_fsm_state80 = 84'd604462909807314587353088;
parameter    ap_ST_fsm_state81 = 84'd1208925819614629174706176;
parameter    ap_ST_fsm_state82 = 84'd2417851639229258349412352;
parameter    ap_ST_fsm_state83 = 84'd4835703278458516698824704;
parameter    ap_ST_fsm_state84 = 84'd9671406556917033397649408;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [12:0] input_r_address0;
output   input_r_ce0;
input  [0:0] input_r_q0;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_r_ce0;
reg[31:0] ap_return;

(* fsm_encoding = "none" *) reg   [83:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    threshold1_V_ce0;
wire   [7:0] threshold1_V_q0;
reg    threshold2_V_ce0;
wire   [7:0] threshold2_V_q0;
wire   [16:0] w_fc1_address0;
reg    w_fc1_ce0;
wire   [0:0] w_fc1_q0;
wire   [7:0] b_fc1_address0;
reg    b_fc1_ce0;
wire   [31:0] b_fc1_q0;
wire   [11:0] w_fc2_address0;
reg    w_fc2_ce0;
wire   [0:0] w_fc2_q0;
wire   [3:0] b_fc2_address0;
reg    b_fc2_ce0;
wire   [31:0] b_fc2_q0;
wire   [31:0] grp_fu_394_p1;
reg   [31:0] reg_403;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state57;
wire   [31:0] grp_fu_377_p2;
wire    ap_CS_fsm_state28;
wire    ap_CS_fsm_state62;
wire   [31:0] grp_fu_385_p2;
reg   [31:0] reg_414;
wire    ap_CS_fsm_state31;
wire    ap_CS_fsm_state40;
wire    ap_CS_fsm_state65;
wire    ap_CS_fsm_state74;
reg   [31:0] reg_419;
wire    ap_CS_fsm_state36;
wire    ap_CS_fsm_state45;
wire    ap_CS_fsm_state70;
wire    ap_CS_fsm_state79;
wire   [16:0] n_0_i_cast13_fu_425_p1;
reg   [16:0] n_0_i_cast13_reg_761;
wire    ap_CS_fsm_state15;
wire   [8:0] n_fu_435_p2;
reg   [8:0] n_reg_769;
wire   [9:0] m_fu_447_p2;
reg   [9:0] m_reg_777;
wire    ap_CS_fsm_state16;
wire   [0:0] icmp_ln159_fu_441_p2;
wire   [0:0] xor_ln161_1_fu_486_p2;
reg   [0:0] xor_ln161_1_reg_792;
wire    ap_CS_fsm_state17;
wire   [31:0] zext_ln161_2_fu_492_p1;
wire    ap_CS_fsm_state18;
wire   [63:0] zext_ln164_fu_496_p1;
reg   [63:0] zext_ln164_reg_802;
wire    ap_CS_fsm_state39;
reg   [31:0] b_fc1_load_reg_812;
wire   [0:0] icmp_ln165_fu_519_p2;
reg   [0:0] icmp_ln165_reg_817;
wire    ap_CS_fsm_state46;
wire   [0:0] icmp_ln165_1_fu_525_p2;
reg   [0:0] icmp_ln165_1_reg_822;
wire   [0:0] and_ln165_fu_535_p2;
reg   [0:0] and_ln165_reg_827;
wire    ap_CS_fsm_state47;
wire   [9:0] n_0_i1_cast11_fu_541_p1;
reg   [9:0] n_0_i1_cast11_reg_832;
wire    ap_CS_fsm_state49;
wire   [3:0] n_1_fu_551_p2;
reg   [3:0] n_1_reg_840;
wire   [8:0] m_1_fu_563_p2;
reg   [8:0] m_1_reg_848;
wire    ap_CS_fsm_state50;
wire   [0:0] icmp_ln159_1_fu_557_p2;
wire   [0:0] xor_ln161_3_fu_626_p2;
reg   [0:0] xor_ln161_3_reg_863;
wire    ap_CS_fsm_state51;
wire   [31:0] zext_ln161_5_fu_632_p1;
wire    ap_CS_fsm_state52;
wire   [63:0] zext_ln164_1_fu_636_p1;
reg   [63:0] zext_ln164_1_reg_873;
wire    ap_CS_fsm_state73;
reg   [31:0] b_fc2_load_reg_883;
wire   [0:0] and_ln167_1_fu_719_p2;
reg   [0:0] and_ln167_1_reg_888;
wire    ap_CS_fsm_state81;
wire   [31:0] max_fu_725_p3;
reg   [31:0] max_reg_893;
wire   [31:0] zext_ln321_fu_733_p1;
reg   [31:0] zext_ln321_reg_898;
wire    ap_CS_fsm_state83;
wire   [0:0] icmp_ln70_fu_737_p2;
wire   [3:0] i_fu_748_p2;
reg   [3:0] i_reg_911;
wire   [31:0] select_ln71_fu_754_p3;
wire    ap_CS_fsm_state84;
reg   [12:0] mem_conv1_address0;
reg    mem_conv1_ce0;
reg    mem_conv1_we0;
reg   [0:0] mem_conv1_d0;
wire   [0:0] mem_conv1_q0;
reg   [12:0] mem_conv2_address0;
reg    mem_conv2_ce0;
reg    mem_conv2_we0;
reg   [0:0] mem_conv2_d0;
wire   [0:0] mem_conv2_q0;
wire    grp_conv_fu_320_ap_start;
wire    grp_conv_fu_320_ap_done;
wire    grp_conv_fu_320_ap_idle;
wire    grp_conv_fu_320_ap_ready;
wire   [12:0] grp_conv_fu_320_input_r_address0;
wire    grp_conv_fu_320_input_r_ce0;
reg   [0:0] grp_conv_fu_320_input_r_q0;
wire   [12:0] grp_conv_fu_320_output_r_address0;
wire    grp_conv_fu_320_output_r_ce0;
wire    grp_conv_fu_320_output_r_we0;
wire   [0:0] grp_conv_fu_320_output_r_d0;
wire   [12:0] grp_conv_fu_320_threshold_V_address0;
wire    grp_conv_fu_320_threshold_V_ce0;
reg   [7:0] grp_conv_fu_320_threshold_V_q0;
reg   [6:0] grp_conv_fu_320_M;
reg   [6:0] grp_conv_fu_320_N;
reg   [5:0] grp_conv_fu_320_I;
reg   [0:0] grp_conv_fu_320_L;
wire    grp_max_pool_fu_345_ap_start;
wire    grp_max_pool_fu_345_ap_done;
wire    grp_max_pool_fu_345_ap_idle;
wire    grp_max_pool_fu_345_ap_ready;
wire   [12:0] grp_max_pool_fu_345_input_r_address0;
wire    grp_max_pool_fu_345_input_r_ce0;
reg   [0:0] grp_max_pool_fu_345_input_r_q0;
wire   [12:0] grp_max_pool_fu_345_output_r_address0;
wire    grp_max_pool_fu_345_output_r_ce0;
wire    grp_max_pool_fu_345_output_r_we0;
wire   [0:0] grp_max_pool_fu_345_output_r_d0;
reg   [6:0] grp_max_pool_fu_345_M;
reg   [5:0] grp_max_pool_fu_345_I;
wire    grp_pad_fu_357_ap_start;
wire    grp_pad_fu_357_ap_done;
wire    grp_pad_fu_357_ap_idle;
wire    grp_pad_fu_357_ap_ready;
wire   [12:0] grp_pad_fu_357_input_r_address0;
wire    grp_pad_fu_357_input_r_ce0;
reg   [0:0] grp_pad_fu_357_input_r_q0;
wire   [12:0] grp_pad_fu_357_output_r_address0;
wire    grp_pad_fu_357_output_r_ce0;
wire    grp_pad_fu_357_output_r_we0;
wire   [0:0] grp_pad_fu_357_output_r_d0;
reg   [6:0] grp_pad_fu_357_M;
reg   [5:0] grp_pad_fu_357_I;
wire    grp_reshape_fu_371_ap_start;
wire    grp_reshape_fu_371_ap_done;
wire    grp_reshape_fu_371_ap_idle;
wire    grp_reshape_fu_371_ap_ready;
wire   [12:0] grp_reshape_fu_371_input_r_address0;
wire    grp_reshape_fu_371_input_r_ce0;
wire   [12:0] grp_reshape_fu_371_output_r_address0;
wire    grp_reshape_fu_371_output_r_ce0;
wire    grp_reshape_fu_371_output_r_we0;
wire   [0:0] grp_reshape_fu_371_output_r_d0;
reg   [8:0] n_0_i_reg_215;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state48;
reg   [31:0] one_out_0_i_reg_227;
wire   [0:0] icmp_ln157_fu_429_p2;
reg   [9:0] m_0_i_reg_239;
reg   [31:0] max_0_i_reg_250;
wire    ap_CS_fsm_state82;
reg   [3:0] n_0_i1_reg_262;
reg   [31:0] one_out_0_i2_reg_274;
wire   [0:0] icmp_ln157_1_fu_545_p2;
reg   [8:0] m_0_i3_reg_286;
reg   [31:0] agg_result_V_0_reg_297;
reg   [3:0] max_id_V_reg_309;
reg    grp_conv_fu_320_ap_start_reg;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state10;
reg    grp_max_pool_fu_345_ap_start_reg;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state12;
reg    grp_pad_fu_357_ap_start_reg;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state8;
reg    grp_reshape_fu_371_ap_start_reg;
wire    ap_CS_fsm_state13;
wire   [63:0] zext_ln161_fu_470_p1;
wire   [63:0] zext_ln161_1_fu_475_p1;
wire   [63:0] zext_ln161_3_fu_610_p1;
wire   [63:0] zext_ln161_4_fu_615_p1;
wire   [63:0] zext_ln71_fu_743_p1;
reg   [31:0] grp_fu_377_p0;
reg   [31:0] grp_fu_377_p1;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state32;
wire    ap_CS_fsm_state41;
wire    ap_CS_fsm_state58;
wire    ap_CS_fsm_state66;
wire    ap_CS_fsm_state75;
reg   [31:0] grp_fu_385_p0;
reg   [31:0] grp_fu_385_p1;
wire    ap_CS_fsm_state37;
wire    ap_CS_fsm_state71;
reg   [31:0] grp_fu_394_p0;
reg   [31:0] grp_fu_397_p1;
wire    ap_CS_fsm_state80;
wire   [8:0] trunc_ln160_fu_453_p1;
wire   [16:0] shl_ln_fu_457_p3;
wire   [16:0] w_index_fu_465_p2;
wire   [0:0] xor_ln161_fu_480_p2;
wire   [31:0] bitcast_ln165_fu_501_p1;
wire   [7:0] tmp_2_fu_505_p4;
wire   [22:0] trunc_ln165_fu_515_p1;
wire   [0:0] or_ln165_fu_531_p2;
wire   [0:0] grp_fu_397_p2;
wire   [7:0] trunc_ln160_1_fu_569_p1;
wire   [10:0] shl_ln160_1_fu_573_p3;
wire   [8:0] shl_ln160_fu_585_p2;
wire   [9:0] zext_ln160_1_fu_591_p1;
wire   [9:0] add_ln160_fu_595_p2;
wire   [11:0] zext_ln160_fu_581_p1;
wire   [11:0] zext_ln160_2_fu_600_p1;
wire   [11:0] w_index_1_fu_604_p2;
wire   [0:0] xor_ln161_2_fu_620_p2;
wire   [31:0] bitcast_ln167_fu_641_p1;
wire   [31:0] bitcast_ln167_1_fu_659_p1;
wire   [7:0] tmp_fu_645_p4;
wire   [22:0] trunc_ln167_fu_655_p1;
wire   [0:0] icmp_ln167_1_fu_683_p2;
wire   [0:0] icmp_ln167_fu_677_p2;
wire   [7:0] tmp_4_fu_663_p4;
wire   [22:0] trunc_ln167_1_fu_673_p1;
wire   [0:0] icmp_ln167_3_fu_701_p2;
wire   [0:0] icmp_ln167_2_fu_695_p2;
wire   [0:0] or_ln167_fu_689_p2;
wire   [0:0] or_ln167_1_fu_707_p2;
wire   [0:0] and_ln167_fu_713_p2;
reg   [31:0] ap_return_preg;
reg   [83:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 84'd1;
#0 grp_conv_fu_320_ap_start_reg = 1'b0;
#0 grp_max_pool_fu_345_ap_start_reg = 1'b0;
#0 grp_pad_fu_357_ap_start_reg = 1'b0;
#0 grp_reshape_fu_371_ap_start_reg = 1'b0;
#0 ap_return_preg = 32'd0;
end

bnn_xcel_thresholg8j #(
    .DataWidth( 8 ),
    .AddressRange( 5184 ),
    .AddressWidth( 13 ))
threshold1_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(grp_conv_fu_320_threshold_V_address0),
    .ce0(threshold1_V_ce0),
    .q0(threshold1_V_q0)
);

bnn_xcel_thresholhbi #(
    .DataWidth( 8 ),
    .AddressRange( 5184 ),
    .AddressWidth( 13 ))
threshold2_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(grp_conv_fu_320_threshold_V_address0),
    .ce0(threshold2_V_ce0),
    .q0(threshold2_V_q0)
);

bnn_xcel_w_fc1 #(
    .DataWidth( 1 ),
    .AddressRange( 131072 ),
    .AddressWidth( 17 ))
w_fc1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(w_fc1_address0),
    .ce0(w_fc1_ce0),
    .q0(w_fc1_q0)
);

bnn_xcel_b_fc1 #(
    .DataWidth( 32 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
b_fc1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(b_fc1_address0),
    .ce0(b_fc1_ce0),
    .q0(b_fc1_q0)
);

bnn_xcel_w_fc2 #(
    .DataWidth( 1 ),
    .AddressRange( 2560 ),
    .AddressWidth( 12 ))
w_fc2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(w_fc2_address0),
    .ce0(w_fc2_ce0),
    .q0(w_fc2_q0)
);

bnn_xcel_b_fc2 #(
    .DataWidth( 32 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
b_fc2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(b_fc2_address0),
    .ce0(b_fc2_ce0),
    .q0(b_fc2_q0)
);

bnn_xcel_mem_conv1 #(
    .DataWidth( 1 ),
    .AddressRange( 5184 ),
    .AddressWidth( 13 ))
mem_conv1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(mem_conv1_address0),
    .ce0(mem_conv1_ce0),
    .we0(mem_conv1_we0),
    .d0(mem_conv1_d0),
    .q0(mem_conv1_q0)
);

bnn_xcel_mem_conv1 #(
    .DataWidth( 1 ),
    .AddressRange( 5184 ),
    .AddressWidth( 13 ))
mem_conv2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(mem_conv2_address0),
    .ce0(mem_conv2_ce0),
    .we0(mem_conv2_we0),
    .d0(mem_conv2_d0),
    .q0(mem_conv2_q0)
);

conv grp_conv_fu_320(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_conv_fu_320_ap_start),
    .ap_done(grp_conv_fu_320_ap_done),
    .ap_idle(grp_conv_fu_320_ap_idle),
    .ap_ready(grp_conv_fu_320_ap_ready),
    .input_r_address0(grp_conv_fu_320_input_r_address0),
    .input_r_ce0(grp_conv_fu_320_input_r_ce0),
    .input_r_q0(grp_conv_fu_320_input_r_q0),
    .output_r_address0(grp_conv_fu_320_output_r_address0),
    .output_r_ce0(grp_conv_fu_320_output_r_ce0),
    .output_r_we0(grp_conv_fu_320_output_r_we0),
    .output_r_d0(grp_conv_fu_320_output_r_d0),
    .threshold_V_address0(grp_conv_fu_320_threshold_V_address0),
    .threshold_V_ce0(grp_conv_fu_320_threshold_V_ce0),
    .threshold_V_q0(grp_conv_fu_320_threshold_V_q0),
    .M(grp_conv_fu_320_M),
    .N(grp_conv_fu_320_N),
    .I(grp_conv_fu_320_I),
    .L(grp_conv_fu_320_L)
);

max_pool grp_max_pool_fu_345(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_max_pool_fu_345_ap_start),
    .ap_done(grp_max_pool_fu_345_ap_done),
    .ap_idle(grp_max_pool_fu_345_ap_idle),
    .ap_ready(grp_max_pool_fu_345_ap_ready),
    .input_r_address0(grp_max_pool_fu_345_input_r_address0),
    .input_r_ce0(grp_max_pool_fu_345_input_r_ce0),
    .input_r_q0(grp_max_pool_fu_345_input_r_q0),
    .output_r_address0(grp_max_pool_fu_345_output_r_address0),
    .output_r_ce0(grp_max_pool_fu_345_output_r_ce0),
    .output_r_we0(grp_max_pool_fu_345_output_r_we0),
    .output_r_d0(grp_max_pool_fu_345_output_r_d0),
    .M(grp_max_pool_fu_345_M),
    .I(grp_max_pool_fu_345_I)
);

pad grp_pad_fu_357(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_pad_fu_357_ap_start),
    .ap_done(grp_pad_fu_357_ap_done),
    .ap_idle(grp_pad_fu_357_ap_idle),
    .ap_ready(grp_pad_fu_357_ap_ready),
    .input_r_address0(grp_pad_fu_357_input_r_address0),
    .input_r_ce0(grp_pad_fu_357_input_r_ce0),
    .input_r_q0(grp_pad_fu_357_input_r_q0),
    .output_r_address0(grp_pad_fu_357_output_r_address0),
    .output_r_ce0(grp_pad_fu_357_output_r_ce0),
    .output_r_we0(grp_pad_fu_357_output_r_we0),
    .output_r_d0(grp_pad_fu_357_output_r_d0),
    .M(grp_pad_fu_357_M),
    .I(grp_pad_fu_357_I)
);

reshape grp_reshape_fu_371(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_reshape_fu_371_ap_start),
    .ap_done(grp_reshape_fu_371_ap_done),
    .ap_idle(grp_reshape_fu_371_ap_idle),
    .ap_ready(grp_reshape_fu_371_ap_ready),
    .input_r_address0(grp_reshape_fu_371_input_r_address0),
    .input_r_ce0(grp_reshape_fu_371_input_r_ce0),
    .input_r_q0(mem_conv2_q0),
    .output_r_address0(grp_reshape_fu_371_output_r_address0),
    .output_r_ce0(grp_reshape_fu_371_output_r_ce0),
    .output_r_we0(grp_reshape_fu_371_output_r_we0),
    .output_r_d0(grp_reshape_fu_371_output_r_d0)
);

dut_fadd_32ns_32nibs #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dut_fadd_32ns_32nibs_U31(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_377_p0),
    .din1(grp_fu_377_p1),
    .ce(1'b1),
    .dout(grp_fu_377_p2)
);

dut_fmul_32ns_32njbC #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dut_fmul_32ns_32njbC_U32(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_385_p0),
    .din1(grp_fu_385_p1),
    .ce(1'b1),
    .dout(grp_fu_385_p2)
);

dut_sitofp_32ns_3kbM #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dut_sitofp_32ns_3kbM_U33(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_394_p0),
    .ce(1'b1),
    .dout(grp_fu_394_p1)
);

dut_fcmp_32ns_32nlbW #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
dut_fcmp_32ns_32nlbW_U34(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_419),
    .din1(grp_fu_397_p1),
    .ce(1'b1),
    .opcode(5'd2),
    .dout(grp_fu_397_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 32'd0;
    end else begin
        if (((icmp_ln70_fu_737_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state83))) begin
            ap_return_preg <= agg_result_V_0_reg_297;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_conv_fu_320_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state3))) begin
            grp_conv_fu_320_ap_start_reg <= 1'b1;
        end else if ((grp_conv_fu_320_ap_ready == 1'b1)) begin
            grp_conv_fu_320_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_max_pool_fu_345_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state5))) begin
            grp_max_pool_fu_345_ap_start_reg <= 1'b1;
        end else if ((grp_max_pool_fu_345_ap_ready == 1'b1)) begin
            grp_max_pool_fu_345_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_pad_fu_357_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state7) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
            grp_pad_fu_357_ap_start_reg <= 1'b1;
        end else if ((grp_pad_fu_357_ap_ready == 1'b1)) begin
            grp_pad_fu_357_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_reshape_fu_371_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state13)) begin
            grp_reshape_fu_371_ap_start_reg <= 1'b1;
        end else if ((grp_reshape_fu_371_ap_ready == 1'b1)) begin
            grp_reshape_fu_371_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln157_1_fu_545_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state49))) begin
        agg_result_V_0_reg_297 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state84)) begin
        agg_result_V_0_reg_297 <= select_ln71_fu_754_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln157_1_fu_545_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state49))) begin
        m_0_i3_reg_286 <= 9'd0;
    end else if ((1'b1 == ap_CS_fsm_state62)) begin
        m_0_i3_reg_286 <= m_1_reg_848;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln157_fu_429_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state15))) begin
        m_0_i_reg_239 <= 10'd0;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        m_0_i_reg_239 <= m_reg_777;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln157_fu_429_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state15))) begin
        max_0_i_reg_250 <= 32'd3267887104;
    end else if ((1'b1 == ap_CS_fsm_state82)) begin
        max_0_i_reg_250 <= max_reg_893;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln157_1_fu_545_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state49))) begin
        max_id_V_reg_309 <= 4'd1;
    end else if ((1'b1 == ap_CS_fsm_state84)) begin
        max_id_V_reg_309 <= i_reg_911;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln157_fu_429_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state15))) begin
        n_0_i1_reg_262 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state82)) begin
        n_0_i1_reg_262 <= n_1_reg_840;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        n_0_i_reg_215 <= n_reg_769;
    end else if (((grp_reshape_fu_371_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state14))) begin
        n_0_i_reg_215 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln157_1_fu_545_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state49))) begin
        one_out_0_i2_reg_274 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state62)) begin
        one_out_0_i2_reg_274 <= grp_fu_377_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln157_fu_429_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state15))) begin
        one_out_0_i_reg_227 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        one_out_0_i_reg_227 <= grp_fu_377_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state47)) begin
        and_ln165_reg_827 <= and_ln165_fu_535_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state81)) begin
        and_ln167_1_reg_888 <= and_ln167_1_fu_719_p2;
        max_reg_893 <= max_fu_725_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        b_fc1_load_reg_812 <= b_fc1_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state74)) begin
        b_fc2_load_reg_883 <= b_fc2_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln70_fu_737_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state83))) begin
        i_reg_911 <= i_fu_748_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        icmp_ln165_1_reg_822 <= icmp_ln165_1_fu_525_p2;
        icmp_ln165_reg_817 <= icmp_ln165_fu_519_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state50)) begin
        m_1_reg_848 <= m_1_fu_563_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        m_reg_777 <= m_fu_447_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state49)) begin
        n_0_i1_cast11_reg_832[3 : 0] <= n_0_i1_cast11_fu_541_p1[3 : 0];
        n_1_reg_840 <= n_1_fu_551_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        n_0_i_cast13_reg_761[8 : 0] <= n_0_i_cast13_fu_425_p1[8 : 0];
        n_reg_769 <= n_fu_435_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state57) | (1'b1 == ap_CS_fsm_state23))) begin
        reg_403 <= grp_fu_394_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state74) | (1'b1 == ap_CS_fsm_state65) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state31))) begin
        reg_414 <= grp_fu_385_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state79) | (1'b1 == ap_CS_fsm_state70) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state36))) begin
        reg_419 <= grp_fu_377_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        xor_ln161_1_reg_792 <= xor_ln161_1_fu_486_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state51)) begin
        xor_ln161_3_reg_863 <= xor_ln161_3_fu_626_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state73)) begin
        zext_ln164_1_reg_873[3 : 0] <= zext_ln164_1_fu_636_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        zext_ln164_reg_802[8 : 0] <= zext_ln164_fu_496_p1[8 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state83)) begin
        zext_ln321_reg_898[3 : 0] <= zext_ln321_fu_733_p1[3 : 0];
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((icmp_ln70_fu_737_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state83)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln70_fu_737_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state83))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln70_fu_737_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state83))) begin
        ap_return = agg_result_V_0_reg_297;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        b_fc1_ce0 = 1'b1;
    end else begin
        b_fc1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state73)) begin
        b_fc2_ce0 = 1'b1;
    end else begin
        b_fc2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_conv_fu_320_I = 6'd10;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_conv_fu_320_I = 6'd18;
    end else begin
        grp_conv_fu_320_I = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_conv_fu_320_L = 1'd1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_conv_fu_320_L = 1'd0;
    end else begin
        grp_conv_fu_320_L = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_conv_fu_320_M = 7'd16;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_conv_fu_320_M = 7'd1;
    end else begin
        grp_conv_fu_320_M = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_conv_fu_320_N = 7'd32;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_conv_fu_320_N = 7'd16;
    end else begin
        grp_conv_fu_320_N = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_conv_fu_320_input_r_q0 = mem_conv2_q0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_conv_fu_320_input_r_q0 = mem_conv1_q0;
    end else begin
        grp_conv_fu_320_input_r_q0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_conv_fu_320_threshold_V_q0 = threshold2_V_q0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_conv_fu_320_threshold_V_q0 = threshold1_V_q0;
    end else begin
        grp_conv_fu_320_threshold_V_q0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state58)) begin
        grp_fu_377_p0 = one_out_0_i2_reg_274;
    end else if (((1'b1 == ap_CS_fsm_state75) | (1'b1 == ap_CS_fsm_state66) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state32))) begin
        grp_fu_377_p0 = reg_414;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        grp_fu_377_p0 = one_out_0_i_reg_227;
    end else begin
        grp_fu_377_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state75)) begin
        grp_fu_377_p1 = b_fc2_load_reg_883;
    end else if ((1'b1 == ap_CS_fsm_state66)) begin
        grp_fu_377_p1 = 32'd3279945728;
    end else if ((1'b1 == ap_CS_fsm_state41)) begin
        grp_fu_377_p1 = b_fc1_load_reg_812;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        grp_fu_377_p1 = 32'd3288334336;
    end else if (((1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state24))) begin
        grp_fu_377_p1 = reg_403;
    end else begin
        grp_fu_377_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state50)) begin
        grp_fu_385_p0 = one_out_0_i2_reg_274;
    end else if (((1'b1 == ap_CS_fsm_state71) | (1'b1 == ap_CS_fsm_state37))) begin
        grp_fu_385_p0 = reg_419;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_fu_385_p0 = one_out_0_i_reg_227;
    end else begin
        grp_fu_385_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state71)) begin
        grp_fu_385_p1 = 32'd1035273459;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        grp_fu_385_p1 = 32'd1031798784;
    end else if (((1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state16))) begin
        grp_fu_385_p1 = 32'd1073741824;
    end else begin
        grp_fu_385_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state52)) begin
        grp_fu_394_p0 = zext_ln161_5_fu_632_p1;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        grp_fu_394_p0 = zext_ln161_2_fu_492_p1;
    end else begin
        grp_fu_394_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state80)) begin
        grp_fu_397_p1 = max_0_i_reg_250;
    end else if ((1'b1 == ap_CS_fsm_state46)) begin
        grp_fu_397_p1 = 32'd0;
    end else begin
        grp_fu_397_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_max_pool_fu_345_I = 6'd8;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_max_pool_fu_345_I = 6'd16;
    end else begin
        grp_max_pool_fu_345_I = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_max_pool_fu_345_M = 7'd32;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_max_pool_fu_345_M = 7'd16;
    end else begin
        grp_max_pool_fu_345_M = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_max_pool_fu_345_input_r_q0 = mem_conv1_q0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_max_pool_fu_345_input_r_q0 = mem_conv2_q0;
    end else begin
        grp_max_pool_fu_345_input_r_q0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_pad_fu_357_I = 6'd8;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_pad_fu_357_I = 6'd16;
    end else begin
        grp_pad_fu_357_I = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_pad_fu_357_M = 7'd16;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_pad_fu_357_M = 7'd1;
    end else begin
        grp_pad_fu_357_M = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_pad_fu_357_input_r_q0 = mem_conv1_q0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_pad_fu_357_input_r_q0 = input_r_q0;
    end else begin
        grp_pad_fu_357_input_r_q0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        input_r_ce0 = grp_pad_fu_357_input_r_ce0;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state83)) begin
        mem_conv1_address0 = zext_ln71_fu_743_p1;
    end else if ((1'b1 == ap_CS_fsm_state82)) begin
        mem_conv1_address0 = zext_ln164_1_reg_873;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        mem_conv1_address0 = zext_ln161_fu_470_p1;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        mem_conv1_address0 = grp_reshape_fu_371_output_r_address0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        mem_conv1_address0 = grp_pad_fu_357_output_r_address0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        mem_conv1_address0 = grp_pad_fu_357_input_r_address0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        mem_conv1_address0 = grp_max_pool_fu_345_output_r_address0;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        mem_conv1_address0 = grp_max_pool_fu_345_input_r_address0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        mem_conv1_address0 = grp_conv_fu_320_output_r_address0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        mem_conv1_address0 = grp_conv_fu_320_input_r_address0;
    end else begin
        mem_conv1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state82) | (1'b1 == ap_CS_fsm_state83) | (1'b1 == ap_CS_fsm_state16))) begin
        mem_conv1_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        mem_conv1_ce0 = grp_reshape_fu_371_output_r_ce0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        mem_conv1_ce0 = grp_pad_fu_357_output_r_ce0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        mem_conv1_ce0 = grp_pad_fu_357_input_r_ce0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        mem_conv1_ce0 = grp_max_pool_fu_345_output_r_ce0;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        mem_conv1_ce0 = grp_max_pool_fu_345_input_r_ce0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        mem_conv1_ce0 = grp_conv_fu_320_output_r_ce0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        mem_conv1_ce0 = grp_conv_fu_320_input_r_ce0;
    end else begin
        mem_conv1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state82)) begin
        mem_conv1_d0 = and_ln167_1_reg_888;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        mem_conv1_d0 = grp_reshape_fu_371_output_r_d0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        mem_conv1_d0 = grp_pad_fu_357_output_r_d0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        mem_conv1_d0 = grp_max_pool_fu_345_output_r_d0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        mem_conv1_d0 = grp_conv_fu_320_output_r_d0;
    end else begin
        mem_conv1_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state82)) begin
        mem_conv1_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        mem_conv1_we0 = grp_reshape_fu_371_output_r_we0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        mem_conv1_we0 = grp_pad_fu_357_output_r_we0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        mem_conv1_we0 = grp_max_pool_fu_345_output_r_we0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        mem_conv1_we0 = grp_conv_fu_320_output_r_we0;
    end else begin
        mem_conv1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state50)) begin
        mem_conv2_address0 = zext_ln161_3_fu_610_p1;
    end else if ((1'b1 == ap_CS_fsm_state48)) begin
        mem_conv2_address0 = zext_ln164_reg_802;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        mem_conv2_address0 = grp_reshape_fu_371_input_r_address0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        mem_conv2_address0 = grp_pad_fu_357_output_r_address0;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        mem_conv2_address0 = grp_max_pool_fu_345_output_r_address0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        mem_conv2_address0 = grp_max_pool_fu_345_input_r_address0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        mem_conv2_address0 = grp_conv_fu_320_output_r_address0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        mem_conv2_address0 = grp_conv_fu_320_input_r_address0;
    end else begin
        mem_conv2_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state50))) begin
        mem_conv2_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        mem_conv2_ce0 = grp_reshape_fu_371_input_r_ce0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        mem_conv2_ce0 = grp_pad_fu_357_output_r_ce0;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        mem_conv2_ce0 = grp_max_pool_fu_345_output_r_ce0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        mem_conv2_ce0 = grp_max_pool_fu_345_input_r_ce0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        mem_conv2_ce0 = grp_conv_fu_320_output_r_ce0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        mem_conv2_ce0 = grp_conv_fu_320_input_r_ce0;
    end else begin
        mem_conv2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        mem_conv2_d0 = and_ln165_reg_827;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        mem_conv2_d0 = grp_pad_fu_357_output_r_d0;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        mem_conv2_d0 = grp_max_pool_fu_345_output_r_d0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        mem_conv2_d0 = grp_conv_fu_320_output_r_d0;
    end else begin
        mem_conv2_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        mem_conv2_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        mem_conv2_we0 = grp_pad_fu_357_output_r_we0;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        mem_conv2_we0 = grp_max_pool_fu_345_output_r_we0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        mem_conv2_we0 = grp_conv_fu_320_output_r_we0;
    end else begin
        mem_conv2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        threshold1_V_ce0 = grp_conv_fu_320_threshold_V_ce0;
    end else begin
        threshold1_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        threshold2_V_ce0 = grp_conv_fu_320_threshold_V_ce0;
    end else begin
        threshold2_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        w_fc1_ce0 = 1'b1;
    end else begin
        w_fc1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state50)) begin
        w_fc2_ce0 = 1'b1;
    end else begin
        w_fc2_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((grp_pad_fu_357_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((grp_conv_fu_320_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((grp_max_pool_fu_345_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            if (((grp_pad_fu_357_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            if (((grp_conv_fu_320_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            if (((grp_max_pool_fu_345_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            if (((grp_reshape_fu_371_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state14))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state15 : begin
            if (((icmp_ln157_fu_429_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state15))) begin
                ap_NS_fsm = ap_ST_fsm_state49;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state16 : begin
            if (((icmp_ln159_fu_441_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state16))) begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state49 : begin
            if (((icmp_ln157_1_fu_545_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state49))) begin
                ap_NS_fsm = ap_ST_fsm_state83;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state50;
            end
        end
        ap_ST_fsm_state50 : begin
            if (((icmp_ln159_1_fu_557_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state50))) begin
                ap_NS_fsm = ap_ST_fsm_state63;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state51;
            end
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state83 : begin
            if (((icmp_ln70_fu_737_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state83))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state84;
            end
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln160_fu_595_p2 = (n_0_i1_cast11_reg_832 + zext_ln160_1_fu_591_p1);

assign and_ln165_fu_535_p2 = (or_ln165_fu_531_p2 & grp_fu_397_p2);

assign and_ln167_1_fu_719_p2 = (grp_fu_397_p2 & and_ln167_fu_713_p2);

assign and_ln167_fu_713_p2 = (or_ln167_fu_689_p2 & or_ln167_1_fu_707_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_state51 = ap_CS_fsm[32'd50];

assign ap_CS_fsm_state52 = ap_CS_fsm[32'd51];

assign ap_CS_fsm_state57 = ap_CS_fsm[32'd56];

assign ap_CS_fsm_state58 = ap_CS_fsm[32'd57];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state62 = ap_CS_fsm[32'd61];

assign ap_CS_fsm_state65 = ap_CS_fsm[32'd64];

assign ap_CS_fsm_state66 = ap_CS_fsm[32'd65];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state70 = ap_CS_fsm[32'd69];

assign ap_CS_fsm_state71 = ap_CS_fsm[32'd70];

assign ap_CS_fsm_state73 = ap_CS_fsm[32'd72];

assign ap_CS_fsm_state74 = ap_CS_fsm[32'd73];

assign ap_CS_fsm_state75 = ap_CS_fsm[32'd74];

assign ap_CS_fsm_state79 = ap_CS_fsm[32'd78];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state80 = ap_CS_fsm[32'd79];

assign ap_CS_fsm_state81 = ap_CS_fsm[32'd80];

assign ap_CS_fsm_state82 = ap_CS_fsm[32'd81];

assign ap_CS_fsm_state83 = ap_CS_fsm[32'd82];

assign ap_CS_fsm_state84 = ap_CS_fsm[32'd83];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign b_fc1_address0 = zext_ln164_fu_496_p1;

assign b_fc2_address0 = zext_ln164_1_fu_636_p1;

assign bitcast_ln165_fu_501_p1 = reg_419;

assign bitcast_ln167_1_fu_659_p1 = max_0_i_reg_250;

assign bitcast_ln167_fu_641_p1 = reg_419;

assign grp_conv_fu_320_ap_start = grp_conv_fu_320_ap_start_reg;

assign grp_max_pool_fu_345_ap_start = grp_max_pool_fu_345_ap_start_reg;

assign grp_pad_fu_357_ap_start = grp_pad_fu_357_ap_start_reg;

assign grp_reshape_fu_371_ap_start = grp_reshape_fu_371_ap_start_reg;

assign i_fu_748_p2 = (max_id_V_reg_309 + 4'd1);

assign icmp_ln157_1_fu_545_p2 = ((n_0_i1_reg_262 == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln157_fu_429_p2 = ((n_0_i_reg_215 == 9'd256) ? 1'b1 : 1'b0);

assign icmp_ln159_1_fu_557_p2 = ((m_0_i3_reg_286 == 9'd256) ? 1'b1 : 1'b0);

assign icmp_ln159_fu_441_p2 = ((m_0_i_reg_239 == 10'd512) ? 1'b1 : 1'b0);

assign icmp_ln165_1_fu_525_p2 = ((trunc_ln165_fu_515_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln165_fu_519_p2 = ((tmp_2_fu_505_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln167_1_fu_683_p2 = ((trunc_ln167_fu_655_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln167_2_fu_695_p2 = ((tmp_4_fu_663_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln167_3_fu_701_p2 = ((trunc_ln167_1_fu_673_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln167_fu_677_p2 = ((tmp_fu_645_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln70_fu_737_p2 = ((max_id_V_reg_309 == 4'd10) ? 1'b1 : 1'b0);

assign input_r_address0 = grp_pad_fu_357_input_r_address0;

assign m_1_fu_563_p2 = (m_0_i3_reg_286 + 9'd1);

assign m_fu_447_p2 = (m_0_i_reg_239 + 10'd1);

assign max_fu_725_p3 = ((and_ln167_1_fu_719_p2[0:0] === 1'b1) ? reg_419 : max_0_i_reg_250);

assign n_0_i1_cast11_fu_541_p1 = n_0_i1_reg_262;

assign n_0_i_cast13_fu_425_p1 = n_0_i_reg_215;

assign n_1_fu_551_p2 = (n_0_i1_reg_262 + 4'd1);

assign n_fu_435_p2 = (n_0_i_reg_215 + 9'd1);

assign or_ln165_fu_531_p2 = (icmp_ln165_reg_817 | icmp_ln165_1_reg_822);

assign or_ln167_1_fu_707_p2 = (icmp_ln167_3_fu_701_p2 | icmp_ln167_2_fu_695_p2);

assign or_ln167_fu_689_p2 = (icmp_ln167_fu_677_p2 | icmp_ln167_1_fu_683_p2);

assign select_ln71_fu_754_p3 = ((mem_conv1_q0[0:0] === 1'b1) ? zext_ln321_reg_898 : agg_result_V_0_reg_297);

assign shl_ln160_1_fu_573_p3 = {{trunc_ln160_1_fu_569_p1}, {3'd0}};

assign shl_ln160_fu_585_p2 = m_0_i3_reg_286 << 9'd1;

assign shl_ln_fu_457_p3 = {{trunc_ln160_fu_453_p1}, {8'd0}};

assign tmp_2_fu_505_p4 = {{bitcast_ln165_fu_501_p1[30:23]}};

assign tmp_4_fu_663_p4 = {{bitcast_ln167_1_fu_659_p1[30:23]}};

assign tmp_fu_645_p4 = {{bitcast_ln167_fu_641_p1[30:23]}};

assign trunc_ln160_1_fu_569_p1 = m_0_i3_reg_286[7:0];

assign trunc_ln160_fu_453_p1 = m_0_i_reg_239[8:0];

assign trunc_ln165_fu_515_p1 = bitcast_ln165_fu_501_p1[22:0];

assign trunc_ln167_1_fu_673_p1 = bitcast_ln167_1_fu_659_p1[22:0];

assign trunc_ln167_fu_655_p1 = bitcast_ln167_fu_641_p1[22:0];

assign w_fc1_address0 = zext_ln161_1_fu_475_p1;

assign w_fc2_address0 = zext_ln161_4_fu_615_p1;

assign w_index_1_fu_604_p2 = (zext_ln160_fu_581_p1 + zext_ln160_2_fu_600_p1);

assign w_index_fu_465_p2 = (n_0_i_cast13_reg_761 + shl_ln_fu_457_p3);

assign xor_ln161_1_fu_486_p2 = (xor_ln161_fu_480_p2 ^ mem_conv1_q0);

assign xor_ln161_2_fu_620_p2 = (w_fc2_q0 ^ 1'd1);

assign xor_ln161_3_fu_626_p2 = (xor_ln161_2_fu_620_p2 ^ mem_conv2_q0);

assign xor_ln161_fu_480_p2 = (w_fc1_q0 ^ 1'd1);

assign zext_ln160_1_fu_591_p1 = shl_ln160_fu_585_p2;

assign zext_ln160_2_fu_600_p1 = add_ln160_fu_595_p2;

assign zext_ln160_fu_581_p1 = shl_ln160_1_fu_573_p3;

assign zext_ln161_1_fu_475_p1 = w_index_fu_465_p2;

assign zext_ln161_2_fu_492_p1 = xor_ln161_1_reg_792;

assign zext_ln161_3_fu_610_p1 = m_0_i3_reg_286;

assign zext_ln161_4_fu_615_p1 = w_index_1_fu_604_p2;

assign zext_ln161_5_fu_632_p1 = xor_ln161_3_reg_863;

assign zext_ln161_fu_470_p1 = m_0_i_reg_239;

assign zext_ln164_1_fu_636_p1 = n_0_i1_reg_262;

assign zext_ln164_fu_496_p1 = n_0_i_reg_215;

assign zext_ln321_fu_733_p1 = max_id_V_reg_309;

assign zext_ln71_fu_743_p1 = max_id_V_reg_309;

always @ (posedge ap_clk) begin
    n_0_i_cast13_reg_761[16:9] <= 8'b00000000;
    zext_ln164_reg_802[63:9] <= 55'b0000000000000000000000000000000000000000000000000000000;
    n_0_i1_cast11_reg_832[9:4] <= 6'b000000;
    zext_ln164_1_reg_873[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln321_reg_898[31:4] <= 28'b0000000000000000000000000000;
end

endmodule //bnn_xcel
