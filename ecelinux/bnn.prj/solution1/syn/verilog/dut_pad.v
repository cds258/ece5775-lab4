// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.2
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module dut_pad (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0,
        M,
        I
);

parameter    ap_ST_st1_fsm_0 = 7'b1;
parameter    ap_ST_st2_fsm_1 = 7'b10;
parameter    ap_ST_st3_fsm_2 = 7'b100;
parameter    ap_ST_st4_fsm_3 = 7'b1000;
parameter    ap_ST_st5_fsm_4 = 7'b10000;
parameter    ap_ST_st6_fsm_5 = 7'b100000;
parameter    ap_ST_st7_fsm_6 = 7'b1000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv32_5 = 32'b101;
parameter    ap_const_lv13_0 = 13'b0000000000000;
parameter    ap_const_lv5_0 = 5'b00000;
parameter    ap_const_lv8_0 = 8'b00000000;
parameter    ap_const_lv32_6 = 32'b110;
parameter    ap_const_lv5_2 = 5'b10;
parameter    ap_const_lv13_1440 = 13'b1010001000000;
parameter    ap_const_lv13_1 = 13'b1;
parameter    ap_const_lv5_1 = 5'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [12:0] input_r_address0;
output   input_r_ce0;
input  [0:0] input_r_q0;
output  [12:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [0:0] output_r_d0;
input  [6:0] M;
input  [5:0] I;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_r_ce0;
reg[12:0] output_r_address0;
reg output_r_ce0;
reg output_r_we0;
reg[0:0] output_r_d0;

(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_24;
wire   [12:0] tmp_cast6_cast_fu_152_p1;
reg   [12:0] tmp_cast6_cast_reg_320;
wire   [8:0] tmp_cast_cast_fu_156_p1;
reg   [8:0] tmp_cast_cast_reg_325;
wire   [12:0] i_1_fu_166_p2;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_62;
wire   [5:0] tmp_6_fu_177_p1;
reg   [5:0] tmp_6_reg_338;
wire   [0:0] exitcond1_fu_160_p2;
wire   [7:0] I_cast7_fu_180_p1;
reg   [7:0] I_cast7_reg_343;
wire   [12:0] I_cast_fu_183_p1;
reg   [12:0] I_cast_reg_348;
wire   [7:0] next_mul_fu_186_p2;
reg   [7:0] next_mul_reg_353;
reg    ap_sig_cseq_ST_st3_fsm_2;
reg    ap_sig_82;
wire   [4:0] m_1_fu_204_p2;
reg   [4:0] m_1_reg_361;
wire   [8:0] tmp_4_fu_210_p2;
reg   [8:0] tmp_4_reg_366;
wire   [0:0] tmp_2_fu_199_p2;
wire   [12:0] x_cast2_fu_215_p1;
reg   [12:0] x_cast2_reg_371;
reg    ap_sig_cseq_ST_st4_fsm_3;
reg    ap_sig_99;
wire   [4:0] x_2_fu_228_p2;
reg   [4:0] x_2_reg_379;
wire   [12:0] tmp_6_cast_fu_234_p1;
reg   [12:0] tmp_6_cast_reg_384;
wire   [0:0] tmp_5_fu_223_p2;
wire   [4:0] y_2_fu_251_p2;
reg   [4:0] y_2_reg_392;
reg    ap_sig_cseq_ST_st5_fsm_4;
reg    ap_sig_116;
wire   [12:0] tmp4_fu_267_p2;
reg   [12:0] tmp4_reg_397;
wire   [0:0] exitcond_fu_246_p2;
wire   [8:0] tmp5_fu_276_p2;
reg   [8:0] tmp5_reg_402;
wire   [12:0] o_index_fu_293_p2;
reg   [12:0] o_index_reg_407;
reg    ap_sig_cseq_ST_st6_fsm_5;
reg    ap_sig_132;
reg   [12:0] i_reg_86;
reg   [4:0] m_reg_97;
reg   [7:0] phi_mul_reg_108;
reg   [4:0] x_reg_120;
reg   [4:0] y_reg_131;
reg    ap_sig_cseq_ST_st7_fsm_6;
reg    ap_sig_158;
wire   [63:0] tmp_1_fu_172_p1;
wire   [63:0] tmp_7_fu_298_p1;
wire   [63:0] tmp_8_fu_303_p1;
wire   [4:0] tmp_3_fu_142_p1;
wire   [4:0] tmp_s_fu_146_p2;
wire   [5:0] m_cast_fu_195_p1;
wire   [4:0] tmp_4_fu_210_p0;
wire   [4:0] tmp_4_fu_210_p1;
wire   [5:0] x_cast_fu_219_p1;
wire   [5:0] y_cast_fu_242_p1;
wire   [7:0] y_cast1_fu_238_p1;
wire   [7:0] tmp_fu_257_p2;
wire   [5:0] tmp4_fu_267_p0;
wire   [7:0] tmp4_fu_267_p1;
wire   [8:0] y_2_cast_fu_272_p1;
wire   [8:0] tmp6_fu_288_p0;
wire   [4:0] tmp6_fu_288_p1;
wire   [12:0] tmp6_fu_288_p2;
wire   [12:0] i_index_fu_281_p2;
reg   [6:0] ap_NS_fsm;
wire   [12:0] tmp4_fu_267_p10;
wire   [12:0] tmp6_fu_288_p00;
wire   [8:0] tmp_4_fu_210_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'b1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond1_fu_160_p2 == 1'b0))) begin
        i_reg_86 <= i_1_fu_166_p2;
    end else if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0))) begin
        i_reg_86 <= ap_const_lv13_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st4_fsm_3) & (1'b0 == tmp_5_fu_223_p2))) begin
        m_reg_97 <= m_1_reg_361;
    end else if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & ~(exitcond1_fu_160_p2 == 1'b0))) begin
        m_reg_97 <= ap_const_lv5_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st4_fsm_3) & (1'b0 == tmp_5_fu_223_p2))) begin
        phi_mul_reg_108 <= next_mul_reg_353;
    end else if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & ~(exitcond1_fu_160_p2 == 1'b0))) begin
        phi_mul_reg_108 <= ap_const_lv8_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st5_fsm_4) & ~(1'b0 == exitcond_fu_246_p2))) begin
        x_reg_120 <= x_2_reg_379;
    end else if (((1'b1 == ap_sig_cseq_ST_st3_fsm_2) & ~(1'b0 == tmp_2_fu_199_p2))) begin
        x_reg_120 <= ap_const_lv5_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st4_fsm_3) & ~(1'b0 == tmp_5_fu_223_p2))) begin
        y_reg_131 <= ap_const_lv5_0;
    end else if ((1'b1 == ap_sig_cseq_ST_st7_fsm_6)) begin
        y_reg_131 <= y_2_reg_392;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & ~(exitcond1_fu_160_p2 == 1'b0))) begin
        I_cast7_reg_343[5 : 0] <= I_cast7_fu_180_p1[5 : 0];
        I_cast_reg_348[5 : 0] <= I_cast_fu_183_p1[5 : 0];
        tmp_6_reg_338 <= tmp_6_fu_177_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        m_1_reg_361 <= m_1_fu_204_p2;
        next_mul_reg_353 <= next_mul_fu_186_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st6_fsm_5)) begin
        o_index_reg_407 <= o_index_fu_293_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st5_fsm_4) & (1'b0 == exitcond_fu_246_p2))) begin
        tmp4_reg_397 <= tmp4_fu_267_p2;
        tmp5_reg_402 <= tmp5_fu_276_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st3_fsm_2) & ~(1'b0 == tmp_2_fu_199_p2))) begin
        tmp_4_reg_366 <= tmp_4_fu_210_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st4_fsm_3) & ~(1'b0 == tmp_5_fu_223_p2))) begin
        tmp_6_cast_reg_384[4 : 0] <= tmp_6_cast_fu_234_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0))) begin
        tmp_cast6_cast_reg_320[4 : 0] <= tmp_cast6_cast_fu_152_p1[4 : 0];
        tmp_cast_cast_reg_325[4 : 0] <= tmp_cast_cast_fu_156_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        x_2_reg_379 <= x_2_fu_228_p2;
        x_cast2_reg_371[4 : 0] <= x_cast2_fu_215_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        y_2_reg_392 <= y_2_fu_251_p2;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_sig_cseq_ST_st1_fsm_0)) | ((1'b1 == ap_sig_cseq_ST_st3_fsm_2) & (1'b0 == tmp_2_fu_199_p2)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st3_fsm_2) & (1'b0 == tmp_2_fu_199_p2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_24) begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_62) begin
        ap_sig_cseq_ST_st2_fsm_1 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_82) begin
        ap_sig_cseq_ST_st3_fsm_2 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st3_fsm_2 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_99) begin
        ap_sig_cseq_ST_st4_fsm_3 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st4_fsm_3 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_116) begin
        ap_sig_cseq_ST_st5_fsm_4 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st5_fsm_4 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_132) begin
        ap_sig_cseq_ST_st6_fsm_5 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st6_fsm_5 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_158) begin
        ap_sig_cseq_ST_st7_fsm_6 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st7_fsm_6 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st6_fsm_5)) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st7_fsm_6)) begin
        output_r_address0 = tmp_8_fu_303_p1;
    end else if ((1'b1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        output_r_address0 = tmp_1_fu_172_p1;
    end else begin
        output_r_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) | (1'b1 == ap_sig_cseq_ST_st7_fsm_6))) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st7_fsm_6)) begin
        output_r_d0 = input_r_q0;
    end else if ((1'b1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        output_r_d0 = 1'b0;
    end else begin
        output_r_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond1_fu_160_p2 == 1'b0)) | (1'b1 == ap_sig_cseq_ST_st7_fsm_6))) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : begin
            if (~(ap_start == 1'b0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : begin
            if (~(exitcond1_fu_160_p2 == 1'b0)) begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end else begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end
        end
        ap_ST_st3_fsm_2 : begin
            if ((1'b0 == tmp_2_fu_199_p2)) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_st4_fsm_3;
            end
        end
        ap_ST_st4_fsm_3 : begin
            if (~(1'b0 == tmp_5_fu_223_p2)) begin
                ap_NS_fsm = ap_ST_st5_fsm_4;
            end else begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end
        end
        ap_ST_st5_fsm_4 : begin
            if ((1'b0 == exitcond_fu_246_p2)) begin
                ap_NS_fsm = ap_ST_st6_fsm_5;
            end else begin
                ap_NS_fsm = ap_ST_st4_fsm_3;
            end
        end
        ap_ST_st6_fsm_5 : begin
            ap_NS_fsm = ap_ST_st7_fsm_6;
        end
        ap_ST_st7_fsm_6 : begin
            ap_NS_fsm = ap_ST_st5_fsm_4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign I_cast7_fu_180_p1 = I;

assign I_cast_fu_183_p1 = I;

always @ (*) begin
    ap_sig_116 = (1'b1 == ap_CS_fsm[ap_const_lv32_4]);
end

always @ (*) begin
    ap_sig_132 = (1'b1 == ap_CS_fsm[ap_const_lv32_5]);
end

always @ (*) begin
    ap_sig_158 = (1'b1 == ap_CS_fsm[ap_const_lv32_6]);
end

always @ (*) begin
    ap_sig_24 = (ap_CS_fsm[ap_const_lv32_0] == 1'b1);
end

always @ (*) begin
    ap_sig_62 = (1'b1 == ap_CS_fsm[ap_const_lv32_1]);
end

always @ (*) begin
    ap_sig_82 = (1'b1 == ap_CS_fsm[ap_const_lv32_2]);
end

always @ (*) begin
    ap_sig_99 = (1'b1 == ap_CS_fsm[ap_const_lv32_3]);
end

assign exitcond1_fu_160_p2 = ((i_reg_86 == ap_const_lv13_1440) ? 1'b1 : 1'b0);

assign exitcond_fu_246_p2 = ((y_cast_fu_242_p1 == I) ? 1'b1 : 1'b0);

assign i_1_fu_166_p2 = (i_reg_86 + ap_const_lv13_1);

assign i_index_fu_281_p2 = (tmp4_reg_397 + x_cast2_reg_371);

assign input_r_address0 = tmp_7_fu_298_p1;

assign m_1_fu_204_p2 = (m_reg_97 + ap_const_lv5_1);

assign m_cast_fu_195_p1 = m_reg_97;

assign next_mul_fu_186_p2 = (phi_mul_reg_108 + I_cast7_reg_343);

assign o_index_fu_293_p2 = (tmp_6_cast_reg_384 + tmp6_fu_288_p2);

assign tmp4_fu_267_p0 = I_cast_reg_348;

assign tmp4_fu_267_p1 = tmp4_fu_267_p10;

assign tmp4_fu_267_p10 = tmp_fu_257_p2;

assign tmp4_fu_267_p2 = (tmp4_fu_267_p0 * tmp4_fu_267_p1);

assign tmp5_fu_276_p2 = (y_2_cast_fu_272_p1 + tmp_4_reg_366);

assign tmp6_fu_288_p0 = tmp6_fu_288_p00;

assign tmp6_fu_288_p00 = tmp5_reg_402;

assign tmp6_fu_288_p1 = tmp_cast6_cast_reg_320;

assign tmp6_fu_288_p2 = (tmp6_fu_288_p0 * tmp6_fu_288_p1);

assign tmp_1_fu_172_p1 = i_reg_86;

assign tmp_2_fu_199_p2 = (($signed(m_cast_fu_195_p1) < $signed(tmp_6_reg_338)) ? 1'b1 : 1'b0);

assign tmp_3_fu_142_p1 = I[4:0];

assign tmp_4_fu_210_p0 = tmp_4_fu_210_p00;

assign tmp_4_fu_210_p00 = m_reg_97;

assign tmp_4_fu_210_p1 = tmp_cast_cast_reg_325;

assign tmp_4_fu_210_p2 = (tmp_4_fu_210_p0 * tmp_4_fu_210_p1);

assign tmp_5_fu_223_p2 = (($signed(x_cast_fu_219_p1) < $signed(I)) ? 1'b1 : 1'b0);

assign tmp_6_cast_fu_234_p1 = x_2_fu_228_p2;

assign tmp_6_fu_177_p1 = M[5:0];

assign tmp_7_fu_298_p1 = i_index_fu_281_p2;

assign tmp_8_fu_303_p1 = o_index_reg_407;

assign tmp_cast6_cast_fu_152_p1 = tmp_s_fu_146_p2;

assign tmp_cast_cast_fu_156_p1 = tmp_s_fu_146_p2;

assign tmp_fu_257_p2 = (y_cast1_fu_238_p1 + phi_mul_reg_108);

assign tmp_s_fu_146_p2 = (ap_const_lv5_2 + tmp_3_fu_142_p1);

assign x_2_fu_228_p2 = (x_reg_120 + ap_const_lv5_1);

assign x_cast2_fu_215_p1 = x_reg_120;

assign x_cast_fu_219_p1 = x_reg_120;

assign y_2_cast_fu_272_p1 = y_2_fu_251_p2;

assign y_2_fu_251_p2 = (y_reg_131 + ap_const_lv5_1);

assign y_cast1_fu_238_p1 = y_reg_131;

assign y_cast_fu_242_p1 = y_reg_131;

always @ (posedge ap_clk) begin
    tmp_cast6_cast_reg_320[12:5] <= 8'b00000000;
    tmp_cast_cast_reg_325[8:5] <= 4'b0000;
    I_cast7_reg_343[7:6] <= 2'b00;
    I_cast_reg_348[12:6] <= 7'b0000000;
    x_cast2_reg_371[12:5] <= 8'b00000000;
    tmp_6_cast_reg_384[12:5] <= 8'b00000000;
end

endmodule //dut_pad
