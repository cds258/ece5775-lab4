// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.2
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module dut_reshape (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0
);

parameter    ap_ST_st1_fsm_0 = 5'b1;
parameter    ap_ST_st2_fsm_1 = 5'b10;
parameter    ap_ST_st3_fsm_2 = 5'b100;
parameter    ap_ST_st4_fsm_3 = 5'b1000;
parameter    ap_ST_st5_fsm_4 = 5'b10000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv6_0 = 6'b000000;
parameter    ap_const_lv3_0 = 3'b000;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv6_20 = 6'b100000;
parameter    ap_const_lv6_1 = 6'b1;
parameter    ap_const_lv3_4 = 3'b100;
parameter    ap_const_lv3_1 = 3'b1;
parameter    ap_const_lv2_0 = 2'b00;
parameter    ap_const_lv5_0 = 5'b00000;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [12:0] input_r_address0;
output   input_r_ce0;
input  [0:0] input_r_q0;
output  [12:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [0:0] output_r_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_r_ce0;
reg output_r_ce0;
reg output_r_we0;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_22;
wire   [8:0] c_cast2_fu_93_p1;
reg   [8:0] c_cast2_reg_188;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_47;
wire   [5:0] c_1_fu_103_p2;
reg   [5:0] c_1_reg_196;
wire   [2:0] y_1_fu_115_p2;
reg   [2:0] y_1_reg_204;
reg    ap_sig_cseq_ST_st3_fsm_2;
reg    ap_sig_58;
wire   [3:0] tmp_2_fu_125_p3;
reg   [3:0] tmp_2_reg_209;
wire   [0:0] exitcond1_fu_109_p2;
wire   [2:0] x_1_fu_143_p2;
reg   [2:0] x_1_reg_217;
reg    ap_sig_cseq_ST_st4_fsm_3;
reg    ap_sig_73;
wire   [8:0] o_index_fu_162_p2;
reg   [8:0] o_index_reg_222;
wire   [0:0] exitcond_fu_137_p2;
reg   [5:0] c_reg_59;
reg   [2:0] y_reg_71;
wire   [0:0] exitcond2_fu_97_p2;
reg   [2:0] x_reg_82;
reg    ap_sig_cseq_ST_st5_fsm_4;
reg    ap_sig_105;
wire   [63:0] tmp_7_fu_179_p1;
wire   [63:0] tmp_8_fu_184_p1;
wire   [1:0] tmp_fu_121_p1;
wire   [3:0] x_cast_fu_133_p1;
wire   [3:0] tmp_4_fu_149_p2;
wire   [8:0] tmp_5_fu_154_p3;
wire   [4:0] tmp_1_fu_167_p1;
wire   [8:0] i_index_fu_171_p3;
reg   [4:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'b1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st3_fsm_2) & ~(exitcond1_fu_109_p2 == 1'b0))) begin
        c_reg_59 <= c_1_reg_196;
    end else if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0))) begin
        c_reg_59 <= ap_const_lv6_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st3_fsm_2) & (exitcond1_fu_109_p2 == 1'b0))) begin
        x_reg_82 <= ap_const_lv3_0;
    end else if ((1'b1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        x_reg_82 <= x_1_reg_217;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st4_fsm_3) & ~(1'b0 == exitcond_fu_137_p2))) begin
        y_reg_71 <= y_1_reg_204;
    end else if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & (1'b0 == exitcond2_fu_97_p2))) begin
        y_reg_71 <= ap_const_lv3_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        c_1_reg_196 <= c_1_fu_103_p2;
        c_cast2_reg_188[5 : 0] <= c_cast2_fu_93_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st4_fsm_3) & (1'b0 == exitcond_fu_137_p2))) begin
        o_index_reg_222 <= o_index_fu_162_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st3_fsm_2) & (exitcond1_fu_109_p2 == 1'b0))) begin
        tmp_2_reg_209[3 : 2] <= tmp_2_fu_125_p3[3 : 2];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        x_1_reg_217 <= x_1_fu_143_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        y_1_reg_204 <= y_1_fu_115_p2;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_sig_cseq_ST_st1_fsm_0)) | ((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & ~(1'b0 == exitcond2_fu_97_p2)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & ~(1'b0 == exitcond2_fu_97_p2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_22) begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_47) begin
        ap_sig_cseq_ST_st2_fsm_1 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_58) begin
        ap_sig_cseq_ST_st3_fsm_2 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st3_fsm_2 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_73) begin
        ap_sig_cseq_ST_st4_fsm_3 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st4_fsm_3 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_105) begin
        ap_sig_cseq_ST_st5_fsm_4 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st5_fsm_4 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : begin
            if (~(ap_start == 1'b0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : begin
            if (~(1'b0 == exitcond2_fu_97_p2)) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end
        end
        ap_ST_st3_fsm_2 : begin
            if ((exitcond1_fu_109_p2 == 1'b0)) begin
                ap_NS_fsm = ap_ST_st4_fsm_3;
            end else begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end
        end
        ap_ST_st4_fsm_3 : begin
            if ((1'b0 == exitcond_fu_137_p2)) begin
                ap_NS_fsm = ap_ST_st5_fsm_4;
            end else begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end
        end
        ap_ST_st5_fsm_4 : begin
            ap_NS_fsm = ap_ST_st4_fsm_3;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    ap_sig_105 = (1'b1 == ap_CS_fsm[ap_const_lv32_4]);
end

always @ (*) begin
    ap_sig_22 = (ap_CS_fsm[ap_const_lv32_0] == 1'b1);
end

always @ (*) begin
    ap_sig_47 = (1'b1 == ap_CS_fsm[ap_const_lv32_1]);
end

always @ (*) begin
    ap_sig_58 = (1'b1 == ap_CS_fsm[ap_const_lv32_2]);
end

always @ (*) begin
    ap_sig_73 = (1'b1 == ap_CS_fsm[ap_const_lv32_3]);
end

assign c_1_fu_103_p2 = (c_reg_59 + ap_const_lv6_1);

assign c_cast2_fu_93_p1 = c_reg_59;

assign exitcond1_fu_109_p2 = ((y_reg_71 == ap_const_lv3_4) ? 1'b1 : 1'b0);

assign exitcond2_fu_97_p2 = ((c_reg_59 == ap_const_lv6_20) ? 1'b1 : 1'b0);

assign exitcond_fu_137_p2 = ((x_reg_82 == ap_const_lv3_4) ? 1'b1 : 1'b0);

assign i_index_fu_171_p3 = {{tmp_1_fu_167_p1}, {tmp_4_fu_149_p2}};

assign input_r_address0 = tmp_7_fu_179_p1;

assign o_index_fu_162_p2 = (tmp_5_fu_154_p3 + c_cast2_reg_188);

assign output_r_address0 = tmp_8_fu_184_p1;

assign output_r_d0 = input_r_q0;

assign tmp_1_fu_167_p1 = c_reg_59[4:0];

assign tmp_2_fu_125_p3 = {{tmp_fu_121_p1}, {ap_const_lv2_0}};

assign tmp_4_fu_149_p2 = (x_cast_fu_133_p1 + tmp_2_reg_209);

assign tmp_5_fu_154_p3 = {{tmp_4_fu_149_p2}, {ap_const_lv5_0}};

assign tmp_7_fu_179_p1 = i_index_fu_171_p3;

assign tmp_8_fu_184_p1 = o_index_reg_222;

assign tmp_fu_121_p1 = y_reg_71[1:0];

assign x_1_fu_143_p2 = (x_reg_82 + ap_const_lv3_1);

assign x_cast_fu_133_p1 = x_reg_82;

assign y_1_fu_115_p2 = (y_reg_71 + ap_const_lv3_1);

always @ (posedge ap_clk) begin
    c_cast2_reg_188[8:6] <= 3'b000;
    tmp_2_reg_209[1:0] <= 2'b00;
end

endmodule //dut_reshape
