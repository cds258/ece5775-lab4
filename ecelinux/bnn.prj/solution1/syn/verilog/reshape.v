// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module reshape (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [12:0] input_r_address0;
output   input_r_ce0;
input  [0:0] input_r_q0;
output  [12:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [0:0] output_r_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_r_ce0;
reg output_r_ce0;
reg output_r_we0;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [8:0] zext_ln130_fu_97_p1;
reg   [8:0] zext_ln130_reg_203;
wire    ap_CS_fsm_state2;
wire   [5:0] c_fu_107_p2;
reg   [5:0] c_reg_211;
wire   [2:0] y_fu_119_p2;
reg   [2:0] y_reg_219;
wire    ap_CS_fsm_state3;
wire   [3:0] shl_ln_fu_129_p3;
reg   [3:0] shl_ln_reg_224;
wire   [0:0] icmp_ln131_fu_113_p2;
wire   [8:0] zext_ln133_fu_137_p1;
reg   [8:0] zext_ln133_reg_229;
wire   [2:0] x_fu_147_p2;
reg   [2:0] x_reg_237;
wire    ap_CS_fsm_state4;
wire   [8:0] o_index_fu_170_p2;
reg   [8:0] o_index_reg_242;
wire   [0:0] icmp_ln132_fu_141_p2;
reg   [5:0] c_0_reg_63;
reg   [2:0] y_0_reg_75;
wire   [0:0] icmp_ln130_fu_101_p2;
reg   [2:0] x_0_reg_86;
wire    ap_CS_fsm_state5;
wire   [63:0] zext_ln135_fu_194_p1;
wire   [63:0] zext_ln135_1_fu_199_p1;
wire   [1:0] trunc_ln133_fu_125_p1;
wire   [3:0] zext_ln133_1_fu_153_p1;
wire   [3:0] add_ln133_fu_157_p2;
wire   [8:0] shl_ln133_1_fu_162_p3;
wire   [4:0] trunc_ln134_fu_175_p1;
wire   [8:0] tmp_fu_179_p4;
wire   [8:0] i_index_fu_189_p2;
reg   [4:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln131_fu_113_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        c_0_reg_63 <= c_reg_211;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        c_0_reg_63 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln131_fu_113_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        x_0_reg_86 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        x_0_reg_86 <= x_reg_237;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln130_fu_101_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        y_0_reg_75 <= 3'd0;
    end else if (((icmp_ln132_fu_141_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        y_0_reg_75 <= y_reg_219;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        c_reg_211 <= c_fu_107_p2;
        zext_ln130_reg_203[5 : 0] <= zext_ln130_fu_97_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln132_fu_141_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        o_index_reg_242 <= o_index_fu_170_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln131_fu_113_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        shl_ln_reg_224[3 : 2] <= shl_ln_fu_129_p3[3 : 2];
        zext_ln133_reg_229[3 : 2] <= zext_ln133_fu_137_p1[3 : 2];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        x_reg_237 <= x_fu_147_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        y_reg_219 <= y_fu_119_p2;
    end
end

always @ (*) begin
    if ((((icmp_ln130_fu_101_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln130_fu_101_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln130_fu_101_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln131_fu_113_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln132_fu_141_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln133_fu_157_p2 = (zext_ln133_1_fu_153_p1 + shl_ln_reg_224);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign c_fu_107_p2 = (c_0_reg_63 + 6'd1);

assign i_index_fu_189_p2 = (zext_ln133_reg_229 + tmp_fu_179_p4);

assign icmp_ln130_fu_101_p2 = ((c_0_reg_63 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln131_fu_113_p2 = ((y_0_reg_75 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln132_fu_141_p2 = ((x_0_reg_86 == 3'd4) ? 1'b1 : 1'b0);

assign input_r_address0 = zext_ln135_fu_194_p1;

assign o_index_fu_170_p2 = (zext_ln130_reg_203 + shl_ln133_1_fu_162_p3);

assign output_r_address0 = zext_ln135_1_fu_199_p1;

assign output_r_d0 = input_r_q0;

assign shl_ln133_1_fu_162_p3 = {{add_ln133_fu_157_p2}, {5'd0}};

assign shl_ln_fu_129_p3 = {{trunc_ln133_fu_125_p1}, {2'd0}};

assign tmp_fu_179_p4 = {{{trunc_ln134_fu_175_p1}, {1'd0}}, {x_0_reg_86}};

assign trunc_ln133_fu_125_p1 = y_0_reg_75[1:0];

assign trunc_ln134_fu_175_p1 = c_0_reg_63[4:0];

assign x_fu_147_p2 = (x_0_reg_86 + 3'd1);

assign y_fu_119_p2 = (y_0_reg_75 + 3'd1);

assign zext_ln130_fu_97_p1 = c_0_reg_63;

assign zext_ln133_1_fu_153_p1 = x_0_reg_86;

assign zext_ln133_fu_137_p1 = shl_ln_fu_129_p3;

assign zext_ln135_1_fu_199_p1 = o_index_reg_242;

assign zext_ln135_fu_194_p1 = i_index_fu_189_p2;

always @ (posedge ap_clk) begin
    zext_ln130_reg_203[8:6] <= 3'b000;
    shl_ln_reg_224[1:0] <= 2'b00;
    zext_ln133_reg_229[1:0] <= 2'b00;
    zext_ln133_reg_229[8:4] <= 5'b00000;
end

endmodule //reshape
