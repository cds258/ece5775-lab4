-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.2
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dut_pad is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    M : IN STD_LOGIC_VECTOR (6 downto 0);
    I : IN STD_LOGIC_VECTOR (5 downto 0) );
end;


architecture behav of dut_pad is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv13_1440 : STD_LOGIC_VECTOR (12 downto 0) := "1010001000000";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_24 : BOOLEAN;
    signal tmp_cast6_cast_fu_152_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_cast6_cast_reg_320 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_cast_cast_fu_156_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_cast_cast_reg_325 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_1_fu_166_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_62 : BOOLEAN;
    signal tmp_6_fu_177_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_6_reg_338 : STD_LOGIC_VECTOR (5 downto 0);
    signal exitcond1_fu_160_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal I_cast7_fu_180_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal I_cast7_reg_343 : STD_LOGIC_VECTOR (7 downto 0);
    signal I_cast_fu_183_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal I_cast_reg_348 : STD_LOGIC_VECTOR (12 downto 0);
    signal next_mul_fu_186_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal next_mul_reg_353 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_82 : BOOLEAN;
    signal m_1_fu_204_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal m_1_reg_361 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_4_fu_210_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_4_reg_366 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_2_fu_199_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_cast2_fu_215_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal x_cast2_reg_371 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_99 : BOOLEAN;
    signal x_2_fu_228_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal x_2_reg_379 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_6_cast_fu_234_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_6_cast_reg_384 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_5_fu_223_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal y_2_fu_251_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal y_2_reg_392 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_116 : BOOLEAN;
    signal tmp4_fu_267_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp4_reg_397 : STD_LOGIC_VECTOR (12 downto 0);
    signal exitcond_fu_246_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp5_fu_276_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp5_reg_402 : STD_LOGIC_VECTOR (8 downto 0);
    signal o_index_fu_293_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal o_index_reg_407 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_sig_cseq_ST_st6_fsm_5 : STD_LOGIC;
    signal ap_sig_132 : BOOLEAN;
    signal i_reg_86 : STD_LOGIC_VECTOR (12 downto 0);
    signal m_reg_97 : STD_LOGIC_VECTOR (4 downto 0);
    signal phi_mul_reg_108 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_reg_120 : STD_LOGIC_VECTOR (4 downto 0);
    signal y_reg_131 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_cseq_ST_st7_fsm_6 : STD_LOGIC;
    signal ap_sig_158 : BOOLEAN;
    signal tmp_1_fu_172_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_7_fu_298_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_fu_303_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_fu_142_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_s_fu_146_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal m_cast_fu_195_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_4_fu_210_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_4_fu_210_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal x_cast_fu_219_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal y_cast_fu_242_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal y_cast1_fu_238_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_257_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp4_fu_267_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp4_fu_267_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal y_2_cast_fu_272_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp6_fu_288_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp6_fu_288_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp6_fu_288_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal i_index_fu_281_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp4_fu_267_p10 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp6_fu_288_p00 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_4_fu_210_p00 : STD_LOGIC_VECTOR (8 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_reg_86_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond1_fu_160_p2 = ap_const_lv1_0))) then 
                i_reg_86 <= i_1_fu_166_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                i_reg_86 <= ap_const_lv13_0;
            end if; 
        end if;
    end process;

    m_reg_97_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (ap_const_lv1_0 = tmp_5_fu_223_p2))) then 
                m_reg_97 <= m_1_reg_361;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond1_fu_160_p2 = ap_const_lv1_0)))) then 
                m_reg_97 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_108_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (ap_const_lv1_0 = tmp_5_fu_223_p2))) then 
                phi_mul_reg_108 <= next_mul_reg_353;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond1_fu_160_p2 = ap_const_lv1_0)))) then 
                phi_mul_reg_108 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    x_reg_120_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and not((ap_const_lv1_0 = exitcond_fu_246_p2)))) then 
                x_reg_120 <= x_2_reg_379;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((ap_const_lv1_0 = tmp_2_fu_199_p2)))) then 
                x_reg_120 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    y_reg_131_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((ap_const_lv1_0 = tmp_5_fu_223_p2)))) then 
                y_reg_131 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
                y_reg_131 <= y_2_reg_392;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond1_fu_160_p2 = ap_const_lv1_0)))) then
                    I_cast7_reg_343(5 downto 0) <= I_cast7_fu_180_p1(5 downto 0);
                    I_cast_reg_348(5 downto 0) <= I_cast_fu_183_p1(5 downto 0);
                tmp_6_reg_338 <= tmp_6_fu_177_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then
                m_1_reg_361 <= m_1_fu_204_p2;
                next_mul_reg_353 <= next_mul_fu_186_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then
                o_index_reg_407 <= o_index_fu_293_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and (ap_const_lv1_0 = exitcond_fu_246_p2))) then
                tmp4_reg_397 <= tmp4_fu_267_p2;
                tmp5_reg_402 <= tmp5_fu_276_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((ap_const_lv1_0 = tmp_2_fu_199_p2)))) then
                tmp_4_reg_366 <= tmp_4_fu_210_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((ap_const_lv1_0 = tmp_5_fu_223_p2)))) then
                    tmp_6_cast_reg_384(4 downto 0) <= tmp_6_cast_fu_234_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then
                    tmp_cast6_cast_reg_320(4 downto 0) <= tmp_cast6_cast_fu_152_p1(4 downto 0);
                    tmp_cast_cast_reg_325(4 downto 0) <= tmp_cast_cast_fu_156_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then
                x_2_reg_379 <= x_2_fu_228_p2;
                    x_cast2_reg_371(4 downto 0) <= x_cast2_fu_215_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then
                y_2_reg_392 <= y_2_fu_251_p2;
            end if;
        end if;
    end process;
    tmp_cast6_cast_reg_320(12 downto 5) <= "00000000";
    tmp_cast_cast_reg_325(8 downto 5) <= "0000";
    I_cast7_reg_343(7 downto 6) <= "00";
    I_cast_reg_348(12 downto 6) <= "0000000";
    x_cast2_reg_371(12 downto 5) <= "00000000";
    tmp_6_cast_reg_384(12 downto 5) <= "00000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, exitcond1_fu_160_p2, tmp_2_fu_199_p2, tmp_5_fu_223_p2, exitcond_fu_246_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not((exitcond1_fu_160_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                end if;
            when ap_ST_st3_fsm_2 => 
                if ((ap_const_lv1_0 = tmp_2_fu_199_p2)) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                end if;
            when ap_ST_st4_fsm_3 => 
                if (not((ap_const_lv1_0 = tmp_5_fu_223_p2))) then
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st5_fsm_4 => 
                if ((ap_const_lv1_0 = exitcond_fu_246_p2)) then
                    ap_NS_fsm <= ap_ST_st6_fsm_5;
                else
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                end if;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    I_cast7_fu_180_p1 <= std_logic_vector(resize(unsigned(I),8));
    I_cast_fu_183_p1 <= std_logic_vector(resize(unsigned(I),13));

    ap_done_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st3_fsm_2, tmp_2_fu_199_p2)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = tmp_2_fu_199_p2)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, tmp_2_fu_199_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = tmp_2_fu_199_p2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_116_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_116 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    ap_sig_132_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_132 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    ap_sig_158_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_158 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    ap_sig_24_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_24 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    ap_sig_62_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_62 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    ap_sig_82_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_82 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    ap_sig_99_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_99 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_24)
    begin
        if (ap_sig_24) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_62)
    begin
        if (ap_sig_62) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_82)
    begin
        if (ap_sig_82) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_99)
    begin
        if (ap_sig_99) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_116)
    begin
        if (ap_sig_116) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st6_fsm_5_assign_proc : process(ap_sig_132)
    begin
        if (ap_sig_132) then 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st7_fsm_6_assign_proc : process(ap_sig_158)
    begin
        if (ap_sig_158) then 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_160_p2 <= "1" when (i_reg_86 = ap_const_lv13_1440) else "0";
    exitcond_fu_246_p2 <= "1" when (y_cast_fu_242_p1 = I) else "0";
    i_1_fu_166_p2 <= std_logic_vector(unsigned(i_reg_86) + unsigned(ap_const_lv13_1));
    i_index_fu_281_p2 <= std_logic_vector(unsigned(tmp4_reg_397) + unsigned(x_cast2_reg_371));
    input_r_address0 <= tmp_7_fu_298_p1(13 - 1 downto 0);

    input_r_ce0_assign_proc : process(ap_sig_cseq_ST_st6_fsm_5)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    m_1_fu_204_p2 <= std_logic_vector(unsigned(m_reg_97) + unsigned(ap_const_lv5_1));
    m_cast_fu_195_p1 <= std_logic_vector(resize(unsigned(m_reg_97),6));
    next_mul_fu_186_p2 <= std_logic_vector(unsigned(phi_mul_reg_108) + unsigned(I_cast7_reg_343));
    o_index_fu_293_p2 <= std_logic_vector(unsigned(tmp_6_cast_reg_384) + unsigned(tmp6_fu_288_p2));

    output_r_address0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st7_fsm_6, tmp_1_fu_172_p1, tmp_8_fu_303_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            output_r_address0 <= tmp_8_fu_303_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            output_r_address0 <= tmp_1_fu_172_p1(13 - 1 downto 0);
        else 
            output_r_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    output_r_ce0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st7_fsm_6)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) or (ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6))) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_r_d0_assign_proc : process(input_r_q0, ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st7_fsm_6)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            output_r_d0 <= input_r_q0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            output_r_d0 <= ap_const_lv1_0;
        else 
            output_r_d0 <= "X";
        end if; 
    end process;


    output_r_we0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, exitcond1_fu_160_p2, ap_sig_cseq_ST_st7_fsm_6)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond1_fu_160_p2 = ap_const_lv1_0)) or (ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6))) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp4_fu_267_p0 <= I_cast_reg_348(6 - 1 downto 0);
    tmp4_fu_267_p1 <= tmp4_fu_267_p10(8 - 1 downto 0);
    tmp4_fu_267_p10 <= std_logic_vector(resize(unsigned(tmp_fu_257_p2),13));
    tmp4_fu_267_p2 <= std_logic_vector(resize(unsigned(tmp4_fu_267_p0) * unsigned(tmp4_fu_267_p1), 13));
    tmp5_fu_276_p2 <= std_logic_vector(unsigned(y_2_cast_fu_272_p1) + unsigned(tmp_4_reg_366));
    tmp6_fu_288_p0 <= tmp6_fu_288_p00(9 - 1 downto 0);
    tmp6_fu_288_p00 <= std_logic_vector(resize(unsigned(tmp5_reg_402),13));
    tmp6_fu_288_p1 <= tmp_cast6_cast_reg_320(5 - 1 downto 0);
    tmp6_fu_288_p2 <= std_logic_vector(resize(unsigned(tmp6_fu_288_p0) * unsigned(tmp6_fu_288_p1), 13));
    tmp_1_fu_172_p1 <= std_logic_vector(resize(unsigned(i_reg_86),64));
    tmp_2_fu_199_p2 <= "1" when (signed(m_cast_fu_195_p1) < signed(tmp_6_reg_338)) else "0";
    tmp_3_fu_142_p1 <= I(5 - 1 downto 0);
    tmp_4_fu_210_p0 <= tmp_4_fu_210_p00(5 - 1 downto 0);
    tmp_4_fu_210_p00 <= std_logic_vector(resize(unsigned(m_reg_97),9));
    tmp_4_fu_210_p1 <= tmp_cast_cast_reg_325(5 - 1 downto 0);
    tmp_4_fu_210_p2 <= std_logic_vector(resize(unsigned(tmp_4_fu_210_p0) * unsigned(tmp_4_fu_210_p1), 9));
    tmp_5_fu_223_p2 <= "1" when (signed(x_cast_fu_219_p1) < signed(I)) else "0";
    tmp_6_cast_fu_234_p1 <= std_logic_vector(resize(unsigned(x_2_fu_228_p2),13));
    tmp_6_fu_177_p1 <= M(6 - 1 downto 0);
    tmp_7_fu_298_p1 <= std_logic_vector(resize(unsigned(i_index_fu_281_p2),64));
    tmp_8_fu_303_p1 <= std_logic_vector(resize(unsigned(o_index_reg_407),64));
    tmp_cast6_cast_fu_152_p1 <= std_logic_vector(resize(unsigned(tmp_s_fu_146_p2),13));
    tmp_cast_cast_fu_156_p1 <= std_logic_vector(resize(unsigned(tmp_s_fu_146_p2),9));
    tmp_fu_257_p2 <= std_logic_vector(unsigned(y_cast1_fu_238_p1) + unsigned(phi_mul_reg_108));
    tmp_s_fu_146_p2 <= std_logic_vector(unsigned(ap_const_lv5_2) + unsigned(tmp_3_fu_142_p1));
    x_2_fu_228_p2 <= std_logic_vector(unsigned(x_reg_120) + unsigned(ap_const_lv5_1));
    x_cast2_fu_215_p1 <= std_logic_vector(resize(unsigned(x_reg_120),13));
    x_cast_fu_219_p1 <= std_logic_vector(resize(unsigned(x_reg_120),6));
    y_2_cast_fu_272_p1 <= std_logic_vector(resize(unsigned(y_2_fu_251_p2),9));
    y_2_fu_251_p2 <= std_logic_vector(unsigned(y_reg_131) + unsigned(ap_const_lv5_1));
    y_cast1_fu_238_p1 <= std_logic_vector(resize(unsigned(y_reg_131),8));
    y_cast_fu_242_p1 <= std_logic_vector(resize(unsigned(y_reg_131),6));
end behav;
