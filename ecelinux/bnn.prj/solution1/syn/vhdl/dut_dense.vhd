-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.2
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dut_dense is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of dut_dense is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000000001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000000010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000000100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000001000000";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000010000000";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000100000000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000001000000000";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000010000000000";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000100000000000";
    constant ap_ST_st13_fsm_12 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000001000000000000";
    constant ap_ST_st14_fsm_13 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000010000000000000";
    constant ap_ST_st15_fsm_14 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000100000000000000";
    constant ap_ST_st16_fsm_15 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000001000000000000000";
    constant ap_ST_st17_fsm_16 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000010000000000000000";
    constant ap_ST_st18_fsm_17 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000100000000000000000";
    constant ap_ST_st19_fsm_18 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000001000000000000000000";
    constant ap_ST_st20_fsm_19 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000010000000000000000000";
    constant ap_ST_st21_fsm_20 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000100000000000000000000";
    constant ap_ST_st22_fsm_21 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000001000000000000000000000";
    constant ap_ST_st23_fsm_22 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000010000000000000000000000";
    constant ap_ST_st24_fsm_23 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000100000000000000000000000";
    constant ap_ST_st25_fsm_24 : STD_LOGIC_VECTOR (33 downto 0) := "0000000001000000000000000000000000";
    constant ap_ST_st26_fsm_25 : STD_LOGIC_VECTOR (33 downto 0) := "0000000010000000000000000000000000";
    constant ap_ST_st27_fsm_26 : STD_LOGIC_VECTOR (33 downto 0) := "0000000100000000000000000000000000";
    constant ap_ST_st28_fsm_27 : STD_LOGIC_VECTOR (33 downto 0) := "0000001000000000000000000000000000";
    constant ap_ST_st29_fsm_28 : STD_LOGIC_VECTOR (33 downto 0) := "0000010000000000000000000000000000";
    constant ap_ST_st30_fsm_29 : STD_LOGIC_VECTOR (33 downto 0) := "0000100000000000000000000000000000";
    constant ap_ST_st31_fsm_30 : STD_LOGIC_VECTOR (33 downto 0) := "0001000000000000000000000000000000";
    constant ap_ST_st32_fsm_31 : STD_LOGIC_VECTOR (33 downto 0) := "0010000000000000000000000000000000";
    constant ap_ST_st33_fsm_32 : STD_LOGIC_VECTOR (33 downto 0) := "0100000000000000000000000000000000";
    constant ap_ST_st34_fsm_33 : STD_LOGIC_VECTOR (33 downto 0) := "1000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_C2C80000 : STD_LOGIC_VECTOR (31 downto 0) := "11000010110010000000000000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_C3800000 : STD_LOGIC_VECTOR (31 downto 0) := "11000011100000000000000000000000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_40000000 : STD_LOGIC_VECTOR (31 downto 0) := "01000000000000000000000000000000";
    constant ap_const_lv32_3DB504F3 : STD_LOGIC_VECTOR (31 downto 0) := "00111101101101010000010011110011";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_51 : BOOLEAN;
    signal w_fc2_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal w_fc2_ce0 : STD_LOGIC;
    signal w_fc2_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal b_fc2_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal b_fc2_ce0 : STD_LOGIC;
    signal b_fc2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_155_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_170 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st18_fsm_17 : STD_LOGIC;
    signal ap_sig_90 : BOOLEAN;
    signal ap_sig_cseq_ST_st27_fsm_26 : STD_LOGIC;
    signal ap_sig_97 : BOOLEAN;
    signal grp_fu_149_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_175 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st23_fsm_22 : STD_LOGIC;
    signal ap_sig_107 : BOOLEAN;
    signal ap_sig_cseq_ST_st32_fsm_31 : STD_LOGIC;
    signal ap_sig_114 : BOOLEAN;
    signal n_cast6_fu_181_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal n_cast6_reg_373 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_124 : BOOLEAN;
    signal n_1_fu_191_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal n_1_reg_381 : STD_LOGIC_VECTOR (3 downto 0);
    signal m_3_fu_203_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal m_3_reg_389 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_135 : BOOLEAN;
    signal exitcond_fu_197_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_fu_266_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_reg_404 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_152 : BOOLEAN;
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_161 : BOOLEAN;
    signal grp_fu_162_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_reg_414 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st10_fsm_9 : STD_LOGIC;
    signal ap_sig_170 : BOOLEAN;
    signal ap_sig_cseq_ST_st15_fsm_14 : STD_LOGIC;
    signal ap_sig_178 : BOOLEAN;
    signal tmp_6_fu_276_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_reg_424 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st26_fsm_25 : STD_LOGIC;
    signal ap_sig_187 : BOOLEAN;
    signal b_fc2_load_reg_434 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_fu_165_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_reg_439 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st33_fsm_32 : STD_LOGIC;
    signal ap_sig_199 : BOOLEAN;
    signal biased_max_fu_365_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st34_fsm_33 : STD_LOGIC;
    signal ap_sig_208 : BOOLEAN;
    signal max_reg_102 : STD_LOGIC_VECTOR (31 downto 0);
    signal n_reg_114 : STD_LOGIC_VECTOR (3 downto 0);
    signal one_out_reg_126 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond2_fu_185_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal m_reg_138 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_3_fu_250_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_10_fu_255_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_fu_359_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_149_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_149_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st11_fsm_10 : STD_LOGIC;
    signal ap_sig_240 : BOOLEAN;
    signal ap_sig_cseq_ST_st19_fsm_18 : STD_LOGIC;
    signal ap_sig_247 : BOOLEAN;
    signal ap_sig_cseq_ST_st28_fsm_27 : STD_LOGIC;
    signal ap_sig_254 : BOOLEAN;
    signal grp_fu_155_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_155_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st24_fsm_23 : STD_LOGIC;
    signal ap_sig_266 : BOOLEAN;
    signal grp_fu_162_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_18_fu_209_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl_fu_213_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_19_fu_225_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl1_cast_fu_231_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp1_fu_235_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl_cast_fu_221_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp1_cast_fu_240_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal w_index_fu_244_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp2_fu_260_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal biased_to_int_fu_281_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_to_int_fu_299_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_285_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_16_fu_295_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs_fu_323_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_fu_317_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_303_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_17_fu_313_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs8_fu_341_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs7_fu_335_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_329_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_347_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_fu_353_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (33 downto 0);

    component dut_fadd_32ns_32ns_32_5_full_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dut_fmul_32ns_32ns_32_4_max_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dut_sitofp_32ns_32_6 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dut_fcmp_32ns_32ns_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component dut_dense_w_fc2 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component dut_dense_b_fc2 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    w_fc2_U : component dut_dense_w_fc2
    generic map (
        DataWidth => 1,
        AddressRange => 2560,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => w_fc2_address0,
        ce0 => w_fc2_ce0,
        q0 => w_fc2_q0);

    b_fc2_U : component dut_dense_b_fc2
    generic map (
        DataWidth => 32,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => b_fc2_address0,
        ce0 => b_fc2_ce0,
        q0 => b_fc2_q0);

    dut_fadd_32ns_32ns_32_5_full_dsp_U20 : component dut_fadd_32ns_32ns_32_5_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_149_p0,
        din1 => grp_fu_149_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_149_p2);

    dut_fmul_32ns_32ns_32_4_max_dsp_U21 : component dut_fmul_32ns_32ns_32_4_max_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_155_p0,
        din1 => grp_fu_155_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_155_p2);

    dut_sitofp_32ns_32_6_U22 : component dut_sitofp_32ns_32_6
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_162_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_162_p1);

    dut_fcmp_32ns_32ns_1_1_U23 : component dut_fcmp_32ns_32ns_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => reg_175,
        din1 => max_reg_102,
        opcode => ap_const_lv5_2,
        dout => tmp_9_fu_165_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    m_reg_138_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (ap_const_lv1_0 = exitcond2_fu_185_p2))) then 
                m_reg_138 <= ap_const_lv9_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14)) then 
                m_reg_138 <= m_3_reg_389;
            end if; 
        end if;
    end process;

    max_reg_102_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st34_fsm_33)) then 
                max_reg_102 <= biased_max_fu_365_p3;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                max_reg_102 <= ap_const_lv32_C2C80000;
            end if; 
        end if;
    end process;

    n_reg_114_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st34_fsm_33)) then 
                n_reg_114 <= n_1_reg_381;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                n_reg_114 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    one_out_reg_126_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (ap_const_lv1_0 = exitcond2_fu_185_p2))) then 
                one_out_reg_126 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14)) then 
                one_out_reg_126 <= grp_fu_149_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st27_fsm_26)) then
                b_fc2_load_reg_434 <= b_fc2_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then
                m_3_reg_389 <= m_3_fu_203_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
                n_1_reg_381 <= n_1_fu_191_p2;
                    n_cast6_reg_373(3 downto 0) <= n_cast6_fu_181_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17) or (ap_const_logic_1 = ap_sig_cseq_ST_st27_fsm_26))) then
                reg_170 <= grp_fu_155_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22) or (ap_const_logic_1 = ap_sig_cseq_ST_st32_fsm_31))) then
                reg_175 <= grp_fu_149_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then
                tmp_11_reg_404 <= tmp_11_fu_266_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then
                tmp_13_reg_414 <= grp_fu_162_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st26_fsm_25)) then
                    tmp_6_reg_424(3 downto 0) <= tmp_6_fu_276_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st33_fsm_32)) then
                tmp_9_reg_439 <= tmp_9_fu_165_p2;
            end if;
        end if;
    end process;
    n_cast6_reg_373(9 downto 4) <= "000000";
    tmp_6_reg_424(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, exitcond_fu_197_p2, exitcond2_fu_185_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not((ap_const_lv1_0 = exitcond2_fu_185_p2))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st3_fsm_2 => 
                if (not((exitcond_fu_197_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st16_fsm_15;
                else
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                end if;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st8_fsm_7;
            when ap_ST_st8_fsm_7 => 
                ap_NS_fsm <= ap_ST_st9_fsm_8;
            when ap_ST_st9_fsm_8 => 
                ap_NS_fsm <= ap_ST_st10_fsm_9;
            when ap_ST_st10_fsm_9 => 
                ap_NS_fsm <= ap_ST_st11_fsm_10;
            when ap_ST_st11_fsm_10 => 
                ap_NS_fsm <= ap_ST_st12_fsm_11;
            when ap_ST_st12_fsm_11 => 
                ap_NS_fsm <= ap_ST_st13_fsm_12;
            when ap_ST_st13_fsm_12 => 
                ap_NS_fsm <= ap_ST_st14_fsm_13;
            when ap_ST_st14_fsm_13 => 
                ap_NS_fsm <= ap_ST_st15_fsm_14;
            when ap_ST_st15_fsm_14 => 
                ap_NS_fsm <= ap_ST_st3_fsm_2;
            when ap_ST_st16_fsm_15 => 
                ap_NS_fsm <= ap_ST_st17_fsm_16;
            when ap_ST_st17_fsm_16 => 
                ap_NS_fsm <= ap_ST_st18_fsm_17;
            when ap_ST_st18_fsm_17 => 
                ap_NS_fsm <= ap_ST_st19_fsm_18;
            when ap_ST_st19_fsm_18 => 
                ap_NS_fsm <= ap_ST_st20_fsm_19;
            when ap_ST_st20_fsm_19 => 
                ap_NS_fsm <= ap_ST_st21_fsm_20;
            when ap_ST_st21_fsm_20 => 
                ap_NS_fsm <= ap_ST_st22_fsm_21;
            when ap_ST_st22_fsm_21 => 
                ap_NS_fsm <= ap_ST_st23_fsm_22;
            when ap_ST_st23_fsm_22 => 
                ap_NS_fsm <= ap_ST_st24_fsm_23;
            when ap_ST_st24_fsm_23 => 
                ap_NS_fsm <= ap_ST_st25_fsm_24;
            when ap_ST_st25_fsm_24 => 
                ap_NS_fsm <= ap_ST_st26_fsm_25;
            when ap_ST_st26_fsm_25 => 
                ap_NS_fsm <= ap_ST_st27_fsm_26;
            when ap_ST_st27_fsm_26 => 
                ap_NS_fsm <= ap_ST_st28_fsm_27;
            when ap_ST_st28_fsm_27 => 
                ap_NS_fsm <= ap_ST_st29_fsm_28;
            when ap_ST_st29_fsm_28 => 
                ap_NS_fsm <= ap_ST_st30_fsm_29;
            when ap_ST_st30_fsm_29 => 
                ap_NS_fsm <= ap_ST_st31_fsm_30;
            when ap_ST_st31_fsm_30 => 
                ap_NS_fsm <= ap_ST_st32_fsm_31;
            when ap_ST_st32_fsm_31 => 
                ap_NS_fsm <= ap_ST_st33_fsm_32;
            when ap_ST_st33_fsm_32 => 
                ap_NS_fsm <= ap_ST_st34_fsm_33;
            when ap_ST_st34_fsm_33 => 
                ap_NS_fsm <= ap_ST_st2_fsm_1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    ap_done_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st2_fsm_1, exitcond2_fu_185_p2)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((ap_const_lv1_0 = exitcond2_fu_185_p2))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, exitcond2_fu_185_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((ap_const_lv1_0 = exitcond2_fu_185_p2)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_107_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_107 <= (ap_const_lv1_1 = ap_CS_fsm(22 downto 22));
    end process;


    ap_sig_114_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_114 <= (ap_const_lv1_1 = ap_CS_fsm(31 downto 31));
    end process;


    ap_sig_124_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_124 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    ap_sig_135_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_135 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    ap_sig_152_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_152 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    ap_sig_161_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_161 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    ap_sig_170_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_170 <= (ap_const_lv1_1 = ap_CS_fsm(9 downto 9));
    end process;


    ap_sig_178_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_178 <= (ap_const_lv1_1 = ap_CS_fsm(14 downto 14));
    end process;


    ap_sig_187_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_187 <= (ap_const_lv1_1 = ap_CS_fsm(25 downto 25));
    end process;


    ap_sig_199_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_199 <= (ap_const_lv1_1 = ap_CS_fsm(32 downto 32));
    end process;


    ap_sig_208_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_208 <= (ap_const_lv1_1 = ap_CS_fsm(33 downto 33));
    end process;


    ap_sig_240_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_240 <= (ap_const_lv1_1 = ap_CS_fsm(10 downto 10));
    end process;


    ap_sig_247_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_247 <= (ap_const_lv1_1 = ap_CS_fsm(18 downto 18));
    end process;


    ap_sig_254_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_254 <= (ap_const_lv1_1 = ap_CS_fsm(27 downto 27));
    end process;


    ap_sig_266_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_266 <= (ap_const_lv1_1 = ap_CS_fsm(23 downto 23));
    end process;


    ap_sig_51_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_51 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    ap_sig_90_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_90 <= (ap_const_lv1_1 = ap_CS_fsm(17 downto 17));
    end process;


    ap_sig_97_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_97 <= (ap_const_lv1_1 = ap_CS_fsm(26 downto 26));
    end process;


    ap_sig_cseq_ST_st10_fsm_9_assign_proc : process(ap_sig_170)
    begin
        if (ap_sig_170) then 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st11_fsm_10_assign_proc : process(ap_sig_240)
    begin
        if (ap_sig_240) then 
            ap_sig_cseq_ST_st11_fsm_10 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st11_fsm_10 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st15_fsm_14_assign_proc : process(ap_sig_178)
    begin
        if (ap_sig_178) then 
            ap_sig_cseq_ST_st15_fsm_14 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st15_fsm_14 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st18_fsm_17_assign_proc : process(ap_sig_90)
    begin
        if (ap_sig_90) then 
            ap_sig_cseq_ST_st18_fsm_17 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st18_fsm_17 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st19_fsm_18_assign_proc : process(ap_sig_247)
    begin
        if (ap_sig_247) then 
            ap_sig_cseq_ST_st19_fsm_18 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st19_fsm_18 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_51)
    begin
        if (ap_sig_51) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st23_fsm_22_assign_proc : process(ap_sig_107)
    begin
        if (ap_sig_107) then 
            ap_sig_cseq_ST_st23_fsm_22 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st23_fsm_22 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st24_fsm_23_assign_proc : process(ap_sig_266)
    begin
        if (ap_sig_266) then 
            ap_sig_cseq_ST_st24_fsm_23 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st24_fsm_23 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st26_fsm_25_assign_proc : process(ap_sig_187)
    begin
        if (ap_sig_187) then 
            ap_sig_cseq_ST_st26_fsm_25 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st26_fsm_25 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st27_fsm_26_assign_proc : process(ap_sig_97)
    begin
        if (ap_sig_97) then 
            ap_sig_cseq_ST_st27_fsm_26 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st27_fsm_26 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st28_fsm_27_assign_proc : process(ap_sig_254)
    begin
        if (ap_sig_254) then 
            ap_sig_cseq_ST_st28_fsm_27 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st28_fsm_27 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_124)
    begin
        if (ap_sig_124) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st32_fsm_31_assign_proc : process(ap_sig_114)
    begin
        if (ap_sig_114) then 
            ap_sig_cseq_ST_st32_fsm_31 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st32_fsm_31 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st33_fsm_32_assign_proc : process(ap_sig_199)
    begin
        if (ap_sig_199) then 
            ap_sig_cseq_ST_st33_fsm_32 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st33_fsm_32 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st34_fsm_33_assign_proc : process(ap_sig_208)
    begin
        if (ap_sig_208) then 
            ap_sig_cseq_ST_st34_fsm_33 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st34_fsm_33 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_135)
    begin
        if (ap_sig_135) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_152)
    begin
        if (ap_sig_152) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_161)
    begin
        if (ap_sig_161) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;

    b_fc2_address0 <= tmp_6_fu_276_p1(4 - 1 downto 0);

    b_fc2_ce0_assign_proc : process(ap_sig_cseq_ST_st26_fsm_25)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st26_fsm_25)) then 
            b_fc2_ce0 <= ap_const_logic_1;
        else 
            b_fc2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    biased_max_fu_365_p3 <= 
        reg_175 when (tmp_1_fu_359_p2(0) = '1') else 
        max_reg_102;
    biased_to_int_fu_281_p1 <= reg_175;
    exitcond2_fu_185_p2 <= "1" when (n_reg_114 = ap_const_lv4_A) else "0";
    exitcond_fu_197_p2 <= "1" when (m_reg_138 = ap_const_lv9_100) else "0";

    grp_fu_149_p0_assign_proc : process(reg_170, one_out_reg_126, ap_sig_cseq_ST_st11_fsm_10, ap_sig_cseq_ST_st19_fsm_18, ap_sig_cseq_ST_st28_fsm_27)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st19_fsm_18) or (ap_const_logic_1 = ap_sig_cseq_ST_st28_fsm_27))) then 
            grp_fu_149_p0 <= reg_170;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10)) then 
            grp_fu_149_p0 <= one_out_reg_126;
        else 
            grp_fu_149_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_149_p1_assign_proc : process(tmp_13_reg_414, b_fc2_load_reg_434, ap_sig_cseq_ST_st11_fsm_10, ap_sig_cseq_ST_st19_fsm_18, ap_sig_cseq_ST_st28_fsm_27)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st28_fsm_27)) then 
            grp_fu_149_p1 <= b_fc2_load_reg_434;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st19_fsm_18)) then 
            grp_fu_149_p1 <= ap_const_lv32_C3800000;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10)) then 
            grp_fu_149_p1 <= tmp_13_reg_414;
        else 
            grp_fu_149_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_155_p0_assign_proc : process(reg_175, ap_sig_cseq_ST_st3_fsm_2, one_out_reg_126, ap_sig_cseq_ST_st24_fsm_23)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st24_fsm_23)) then 
            grp_fu_155_p0 <= reg_175;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            grp_fu_155_p0 <= one_out_reg_126;
        else 
            grp_fu_155_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_155_p1_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st24_fsm_23)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st24_fsm_23)) then 
            grp_fu_155_p1 <= ap_const_lv32_3DB504F3;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            grp_fu_155_p1 <= ap_const_lv32_40000000;
        else 
            grp_fu_155_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_162_p0 <= std_logic_vector(resize(unsigned(tmp_11_reg_404),32));
    input_r_address0 <= tmp_3_fu_250_p1(13 - 1 downto 0);

    input_r_ce0_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    m_3_fu_203_p2 <= std_logic_vector(unsigned(m_reg_138) + unsigned(ap_const_lv9_1));
    max_to_int_fu_299_p1 <= max_reg_102;
    n_1_fu_191_p2 <= std_logic_vector(unsigned(n_reg_114) + unsigned(ap_const_lv4_1));
    n_cast6_fu_181_p1 <= std_logic_vector(resize(unsigned(n_reg_114),10));
    notlhs7_fu_335_p2 <= "0" when (tmp_2_fu_303_p4 = ap_const_lv8_FF) else "1";
    notlhs_fu_317_p2 <= "0" when (tmp_fu_285_p4 = ap_const_lv8_FF) else "1";
    notrhs8_fu_341_p2 <= "1" when (tmp_17_fu_313_p1 = ap_const_lv23_0) else "0";
    notrhs_fu_323_p2 <= "1" when (tmp_16_fu_295_p1 = ap_const_lv23_0) else "0";
    output_r_address0 <= tmp_6_reg_424(13 - 1 downto 0);

    output_r_ce0_assign_proc : process(ap_sig_cseq_ST_st34_fsm_33)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st34_fsm_33)) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_r_d0 <= tmp_1_fu_359_p2;

    output_r_we0_assign_proc : process(ap_sig_cseq_ST_st34_fsm_33)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st34_fsm_33))) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_shl1_cast_fu_231_p1 <= std_logic_vector(resize(unsigned(tmp_19_fu_225_p2),10));
    p_shl_cast_fu_221_p1 <= std_logic_vector(resize(unsigned(p_shl_fu_213_p3),12));
    p_shl_fu_213_p3 <= (tmp_18_fu_209_p1 & ap_const_lv3_0);
    tmp1_cast_fu_240_p1 <= std_logic_vector(resize(unsigned(tmp1_fu_235_p2),12));
    tmp1_fu_235_p2 <= std_logic_vector(unsigned(n_cast6_reg_373) + unsigned(p_shl1_cast_fu_231_p1));
    tmp2_fu_260_p2 <= (w_fc2_q0 xor ap_const_lv1_1);
    tmp_10_fu_255_p1 <= std_logic_vector(resize(unsigned(w_index_fu_244_p2),64));
    tmp_11_fu_266_p2 <= (input_r_q0 xor tmp2_fu_260_p2);
    tmp_16_fu_295_p1 <= biased_to_int_fu_281_p1(23 - 1 downto 0);
    tmp_17_fu_313_p1 <= max_to_int_fu_299_p1(23 - 1 downto 0);
    tmp_18_fu_209_p1 <= m_reg_138(8 - 1 downto 0);
    tmp_19_fu_225_p2 <= std_logic_vector(shift_left(unsigned(m_reg_138),to_integer(unsigned('0' & ap_const_lv9_1(9-1 downto 0)))));
    tmp_1_fu_359_p2 <= (tmp_8_fu_353_p2 and tmp_9_reg_439);
    tmp_2_fu_303_p4 <= max_to_int_fu_299_p1(30 downto 23);
    tmp_3_fu_250_p1 <= std_logic_vector(resize(unsigned(m_reg_138),64));
    tmp_4_fu_329_p2 <= (notrhs_fu_323_p2 or notlhs_fu_317_p2);
    tmp_6_fu_276_p1 <= std_logic_vector(resize(unsigned(n_reg_114),64));
    tmp_7_fu_347_p2 <= (notrhs8_fu_341_p2 or notlhs7_fu_335_p2);
    tmp_8_fu_353_p2 <= (tmp_4_fu_329_p2 and tmp_7_fu_347_p2);
    tmp_fu_285_p4 <= biased_to_int_fu_281_p1(30 downto 23);
    w_fc2_address0 <= tmp_10_fu_255_p1(12 - 1 downto 0);

    w_fc2_ce0_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            w_fc2_ce0 <= ap_const_logic_1;
        else 
            w_fc2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    w_index_fu_244_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_221_p1) + unsigned(tmp1_cast_fu_240_p1));
end behav;
