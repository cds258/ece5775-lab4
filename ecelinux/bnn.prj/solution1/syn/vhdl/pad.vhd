-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity pad is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    M : IN STD_LOGIC_VECTOR (6 downto 0);
    I : IN STD_LOGIC_VECTOR (5 downto 0) );
end;


architecture behav of pad is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv13_1440 : STD_LOGIC_VECTOR (12 downto 0) := "1010001000000";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal trunc_ln31_fu_144_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln31_reg_309 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln31_cast4_cast_fu_154_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln31_cast4_cast_reg_314 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln39_fu_158_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln39_reg_319 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_fu_168_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal trunc_ln35_fu_179_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln35_reg_332 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln33_fu_162_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln38_fu_182_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln38_reg_337 : STD_LOGIC_VECTOR (7 downto 0);
    signal I_cast_fu_185_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal I_cast_reg_342 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln39_fu_188_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln39_reg_347 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal m_fu_206_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal m_reg_355 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln39_fu_212_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln39_reg_360 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln35_fu_201_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln36_fu_217_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln36_reg_365 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal x_fu_230_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal x_reg_373 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln39_2_fu_236_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln39_2_reg_378 : STD_LOGIC_VECTOR (12 downto 0);
    signal icmp_ln36_fu_225_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal y_fu_249_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal y_reg_386 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_fu_285_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal i_index_reg_391 : STD_LOGIC_VECTOR (12 downto 0);
    signal icmp_ln37_fu_244_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp4_fu_269_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp4_reg_396 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_291_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal o_index_reg_401 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal i_0_reg_88 : STD_LOGIC_VECTOR (12 downto 0);
    signal m_0_reg_99 : STD_LOGIC_VECTOR (4 downto 0);
    signal phi_mul_reg_110 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_0_reg_122 : STD_LOGIC_VECTOR (4 downto 0);
    signal y_0_reg_133 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal zext_ln33_fu_174_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln40_fu_277_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln40_1_fu_281_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln31_fu_148_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln35_fu_197_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln39_fu_212_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln39_fu_212_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln36_1_fu_221_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln37_fu_240_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_255_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln39_3_fu_265_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_285_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_285_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_285_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_291_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_291_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_291_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_285_p10 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_291_p00 : STD_LOGIC_VECTOR (12 downto 0);
    signal mul_ln39_fu_212_p00 : STD_LOGIC_VECTOR (8 downto 0);

    component dut_mac_muladd_6nbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (5 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (12 downto 0) );
    end component;


    component dut_mac_muladd_9ncud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (4 downto 0);
        din2 : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (12 downto 0) );
    end component;



begin
    dut_mac_muladd_6nbkb_U1 : component dut_mac_muladd_6nbkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 8,
        din2_WIDTH => 5,
        dout_WIDTH => 13)
    port map (
        din0 => grp_fu_285_p0,
        din1 => grp_fu_285_p1,
        din2 => grp_fu_285_p2,
        dout => grp_fu_285_p3);

    dut_mac_muladd_9ncud_U2 : component dut_mac_muladd_9ncud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 5,
        din2_WIDTH => 5,
        dout_WIDTH => 13)
    port map (
        din0 => grp_fu_291_p0,
        din1 => grp_fu_291_p1,
        din2 => grp_fu_291_p2,
        dout => grp_fu_291_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_0_reg_88_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln33_fu_162_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_0_reg_88 <= i_fu_168_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_reg_88 <= ap_const_lv13_0;
            end if; 
        end if;
    end process;

    m_0_reg_99_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln36_fu_225_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                m_0_reg_99 <= m_reg_355;
            elsif (((icmp_ln33_fu_162_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                m_0_reg_99 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_110_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln36_fu_225_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                phi_mul_reg_110 <= add_ln39_reg_347;
            elsif (((icmp_ln33_fu_162_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                phi_mul_reg_110 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    x_0_reg_122_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln37_fu_244_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                x_0_reg_122 <= x_reg_373;
            elsif (((icmp_ln35_fu_201_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                x_0_reg_122 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    y_0_reg_133_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln36_fu_225_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                y_0_reg_133 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                y_0_reg_133 <= y_reg_386;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln33_fu_162_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    I_cast_reg_342(5 downto 0) <= I_cast_fu_185_p1(5 downto 0);
                trunc_ln35_reg_332 <= trunc_ln35_fu_179_p1;
                    zext_ln38_reg_337(5 downto 0) <= zext_ln38_fu_182_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    add_ln31_cast4_cast_reg_314(4 downto 0) <= add_ln31_cast4_cast_fu_154_p1(4 downto 0);
                trunc_ln31_reg_309 <= trunc_ln31_fu_144_p1;
                    zext_ln39_reg_319(4 downto 0) <= zext_ln39_fu_158_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                add_ln39_reg_347 <= add_ln39_fu_188_p2;
                m_reg_355 <= m_fu_206_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln37_fu_244_p2 = ap_const_lv1_0))) then
                i_index_reg_391 <= grp_fu_285_p3;
                tmp4_reg_396 <= tmp4_fu_269_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln35_fu_201_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                mul_ln39_reg_360 <= mul_ln39_fu_212_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                o_index_reg_401 <= grp_fu_291_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                x_reg_373 <= x_fu_230_p2;
                    zext_ln36_reg_365(4 downto 0) <= zext_ln36_fu_217_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                y_reg_386 <= y_fu_249_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln36_fu_225_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    zext_ln39_2_reg_378(4 downto 0) <= zext_ln39_2_fu_236_p1(4 downto 0);
            end if;
        end if;
    end process;
    add_ln31_cast4_cast_reg_314(12 downto 5) <= "00000000";
    zext_ln39_reg_319(8 downto 5) <= "0000";
    zext_ln38_reg_337(7 downto 6) <= "00";
    I_cast_reg_342(12 downto 6) <= "0000000";
    zext_ln36_reg_365(12 downto 5) <= "00000000";
    zext_ln39_2_reg_378(12 downto 5) <= "00000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln33_fu_162_p2, ap_CS_fsm_state3, icmp_ln35_fu_201_p2, ap_CS_fsm_state4, icmp_ln36_fu_225_p2, ap_CS_fsm_state5, icmp_ln37_fu_244_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln33_fu_162_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln35_fu_201_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln36_fu_225_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((icmp_ln37_fu_244_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    I_cast_fu_185_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(I),13));
    add_ln31_cast4_cast_fu_154_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln31_fu_148_p2),13));
    add_ln31_fu_148_p2 <= std_logic_vector(unsigned(ap_const_lv5_2) + unsigned(trunc_ln31_fu_144_p1));
    add_ln39_fu_188_p2 <= std_logic_vector(unsigned(phi_mul_reg_110) + unsigned(zext_ln38_reg_337));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state3, icmp_ln35_fu_201_p2)
    begin
        if ((((icmp_ln35_fu_201_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state3, icmp_ln35_fu_201_p2)
    begin
        if (((icmp_ln35_fu_201_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_285_p0 <= I_cast_reg_342(6 - 1 downto 0);
    grp_fu_285_p1 <= grp_fu_285_p10(8 - 1 downto 0);
    grp_fu_285_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_255_p2),13));
    grp_fu_285_p2 <= zext_ln36_reg_365(5 - 1 downto 0);
    grp_fu_291_p0 <= grp_fu_291_p00(9 - 1 downto 0);
    grp_fu_291_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp4_reg_396),13));
    grp_fu_291_p1 <= add_ln31_cast4_cast_reg_314(5 - 1 downto 0);
    grp_fu_291_p2 <= zext_ln39_2_reg_378(5 - 1 downto 0);
    i_fu_168_p2 <= std_logic_vector(unsigned(i_0_reg_88) + unsigned(ap_const_lv13_1));
    icmp_ln33_fu_162_p2 <= "1" when (i_0_reg_88 = ap_const_lv13_1440) else "0";
    icmp_ln35_fu_201_p2 <= "1" when (signed(zext_ln35_fu_197_p1) < signed(trunc_ln35_reg_332)) else "0";
    icmp_ln36_fu_225_p2 <= "1" when (signed(zext_ln36_1_fu_221_p1) < signed(I)) else "0";
    icmp_ln37_fu_244_p2 <= "1" when (y_0_reg_133 = trunc_ln31_reg_309) else "0";
    input_r_address0 <= zext_ln40_fu_277_p1(13 - 1 downto 0);

    input_r_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    m_fu_206_p2 <= std_logic_vector(unsigned(m_0_reg_99) + unsigned(ap_const_lv5_1));
    mul_ln39_fu_212_p0 <= mul_ln39_fu_212_p00(5 - 1 downto 0);
    mul_ln39_fu_212_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_0_reg_99),9));
    mul_ln39_fu_212_p1 <= zext_ln39_reg_319(5 - 1 downto 0);
    mul_ln39_fu_212_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln39_fu_212_p0) * unsigned(mul_ln39_fu_212_p1), 9));

    output_r_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state7, zext_ln33_fu_174_p1, zext_ln40_1_fu_281_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            output_r_address0 <= zext_ln40_1_fu_281_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            output_r_address0 <= zext_ln33_fu_174_p1(13 - 1 downto 0);
        else 
            output_r_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    output_r_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_r_d0_assign_proc : process(input_r_q0, ap_CS_fsm_state2, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            output_r_d0 <= input_r_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            output_r_d0 <= ap_const_lv1_0;
        else 
            output_r_d0 <= "X";
        end if; 
    end process;


    output_r_we0_assign_proc : process(ap_CS_fsm_state2, icmp_ln33_fu_162_p2, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or ((icmp_ln33_fu_162_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp4_fu_269_p2 <= std_logic_vector(unsigned(zext_ln39_3_fu_265_p1) + unsigned(mul_ln39_reg_360));
    tmp_fu_255_p2 <= std_logic_vector(unsigned(zext_ln37_fu_240_p1) + unsigned(phi_mul_reg_110));
    trunc_ln31_fu_144_p1 <= I(5 - 1 downto 0);
    trunc_ln35_fu_179_p1 <= M(6 - 1 downto 0);
    x_fu_230_p2 <= std_logic_vector(unsigned(x_0_reg_122) + unsigned(ap_const_lv5_1));
    y_fu_249_p2 <= std_logic_vector(unsigned(y_0_reg_133) + unsigned(ap_const_lv5_1));
    zext_ln33_fu_174_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_88),64));
    zext_ln35_fu_197_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_0_reg_99),6));
    zext_ln36_1_fu_221_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_0_reg_122),6));
    zext_ln36_fu_217_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_0_reg_122),13));
    zext_ln37_fu_240_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_0_reg_133),8));
    zext_ln38_fu_182_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(I),8));
    zext_ln39_2_fu_236_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_fu_230_p2),13));
    zext_ln39_3_fu_265_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_fu_249_p2),9));
    zext_ln39_fu_158_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln31_fu_148_p2),9));
    zext_ln40_1_fu_281_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(o_index_reg_401),64));
    zext_ln40_fu_277_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_index_reg_391),64));
end behav;
