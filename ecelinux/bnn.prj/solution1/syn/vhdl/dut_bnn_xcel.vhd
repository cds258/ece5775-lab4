-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.2
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dut_bnn_xcel is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of dut_bnn_xcel is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000000000000000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000000000000000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000000000000000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000000000000000001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000000000000000010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000000000000000100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000000000000001000000";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000000000000010000000";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000000000000100000000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000000000001000000000";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000000000010000000000";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000000000100000000000";
    constant ap_ST_st13_fsm_12 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000000001000000000000";
    constant ap_ST_st14_fsm_13 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000000010000000000000";
    constant ap_ST_st15_fsm_14 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000000100000000000000";
    constant ap_ST_st16_fsm_15 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000001000000000000000";
    constant ap_ST_st17_fsm_16 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000010000000000000000";
    constant ap_ST_st18_fsm_17 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000100000000000000000";
    constant ap_ST_st19_fsm_18 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000001000000000000000000";
    constant ap_ST_st20_fsm_19 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000010000000000000000000";
    constant ap_ST_st21_fsm_20 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000100000000000000000000";
    constant ap_ST_st22_fsm_21 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000001000000000000000000000";
    constant ap_ST_st23_fsm_22 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000010000000000000000000000";
    constant ap_ST_st24_fsm_23 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000100000000000000000000000";
    constant ap_ST_st25_fsm_24 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000001000000000000000000000000";
    constant ap_ST_st26_fsm_25 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000010000000000000000000000000";
    constant ap_ST_st27_fsm_26 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000100000000000000000000000000";
    constant ap_ST_st28_fsm_27 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000001000000000000000000000000000";
    constant ap_ST_st29_fsm_28 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000010000000000000000000000000000";
    constant ap_ST_st30_fsm_29 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000100000000000000000000000000000";
    constant ap_ST_st31_fsm_30 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000001000000000000000000000000000000";
    constant ap_ST_st32_fsm_31 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000010000000000000000000000000000000";
    constant ap_ST_st33_fsm_32 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000100000000000000000000000000000000";
    constant ap_ST_st34_fsm_33 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000001000000000000000000000000000000000";
    constant ap_ST_st35_fsm_34 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000010000000000000000000000000000000000";
    constant ap_ST_st36_fsm_35 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000100000000000000000000000000000000000";
    constant ap_ST_st37_fsm_36 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000001000000000000000000000000000000000000";
    constant ap_ST_st38_fsm_37 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000010000000000000000000000000000000000000";
    constant ap_ST_st39_fsm_38 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000100000000000000000000000000000000000000";
    constant ap_ST_st40_fsm_39 : STD_LOGIC_VECTOR (49 downto 0) := "00000000001000000000000000000000000000000000000000";
    constant ap_ST_st41_fsm_40 : STD_LOGIC_VECTOR (49 downto 0) := "00000000010000000000000000000000000000000000000000";
    constant ap_ST_st42_fsm_41 : STD_LOGIC_VECTOR (49 downto 0) := "00000000100000000000000000000000000000000000000000";
    constant ap_ST_st43_fsm_42 : STD_LOGIC_VECTOR (49 downto 0) := "00000001000000000000000000000000000000000000000000";
    constant ap_ST_st44_fsm_43 : STD_LOGIC_VECTOR (49 downto 0) := "00000010000000000000000000000000000000000000000000";
    constant ap_ST_st45_fsm_44 : STD_LOGIC_VECTOR (49 downto 0) := "00000100000000000000000000000000000000000000000000";
    constant ap_ST_st46_fsm_45 : STD_LOGIC_VECTOR (49 downto 0) := "00001000000000000000000000000000000000000000000000";
    constant ap_ST_st47_fsm_46 : STD_LOGIC_VECTOR (49 downto 0) := "00010000000000000000000000000000000000000000000000";
    constant ap_ST_st48_fsm_47 : STD_LOGIC_VECTOR (49 downto 0) := "00100000000000000000000000000000000000000000000000";
    constant ap_ST_st49_fsm_48 : STD_LOGIC_VECTOR (49 downto 0) := "01000000000000000000000000000000000000000000000000";
    constant ap_ST_st50_fsm_49 : STD_LOGIC_VECTOR (49 downto 0) := "10000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv7_10 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_const_lv7_20 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_const_lv6_12 : STD_LOGIC_VECTOR (5 downto 0) := "010010";
    constant ap_const_lv6_A : STD_LOGIC_VECTOR (5 downto 0) := "001010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv6_10 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_const_lv6_8 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_C4000000 : STD_LOGIC_VECTOR (31 downto 0) := "11000100000000000000000000000000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_40000000 : STD_LOGIC_VECTOR (31 downto 0) := "01000000000000000000000000000000";
    constant ap_const_lv32_3D800000 : STD_LOGIC_VECTOR (31 downto 0) := "00111101100000000000000000000000";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv10_200 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_67 : BOOLEAN;
    signal threshold1_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal threshold2_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal w_fc1_address0 : STD_LOGIC_VECTOR (16 downto 0);
    signal w_fc1_ce0 : STD_LOGIC;
    signal w_fc1_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal b_fc1_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal b_fc1_ce0 : STD_LOGIC;
    signal b_fc1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_290_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_305 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st31_fsm_30 : STD_LOGIC;
    signal ap_sig_116 : BOOLEAN;
    signal ap_sig_cseq_ST_st40_fsm_39 : STD_LOGIC;
    signal ap_sig_123 : BOOLEAN;
    signal grp_fu_284_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_310 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st36_fsm_35 : STD_LOGIC;
    signal ap_sig_133 : BOOLEAN;
    signal ap_sig_cseq_ST_st45_fsm_44 : STD_LOGIC;
    signal ap_sig_140 : BOOLEAN;
    signal n_i_cast6_fu_316_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal n_i_cast6_reg_462 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_sig_cseq_ST_st15_fsm_14 : STD_LOGIC;
    signal ap_sig_150 : BOOLEAN;
    signal n_fu_326_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal n_reg_470 : STD_LOGIC_VECTOR (8 downto 0);
    signal m_fu_338_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal m_reg_478 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_sig_cseq_ST_st16_fsm_15 : STD_LOGIC;
    signal ap_sig_161 : BOOLEAN;
    signal exitcond2_fu_332_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_20_i_fu_377_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_20_i_reg_493 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st17_fsm_16 : STD_LOGIC;
    signal ap_sig_178 : BOOLEAN;
    signal ap_sig_cseq_ST_st18_fsm_17 : STD_LOGIC;
    signal ap_sig_187 : BOOLEAN;
    signal grp_fu_297_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_22_i_reg_503 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st23_fsm_22 : STD_LOGIC;
    signal ap_sig_196 : BOOLEAN;
    signal ap_sig_cseq_ST_st28_fsm_27 : STD_LOGIC;
    signal ap_sig_204 : BOOLEAN;
    signal tmp_25_i_fu_387_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_25_i_reg_513 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st39_fsm_38 : STD_LOGIC;
    signal ap_sig_213 : BOOLEAN;
    signal b_fc1_load_reg_523 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_16_fu_428_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_16_reg_528 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st46_fsm_45 : STD_LOGIC;
    signal ap_sig_225 : BOOLEAN;
    signal max_id_V_cast2_fu_434_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_id_V_cast2_reg_533 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st49_fsm_48 : STD_LOGIC;
    signal ap_sig_234 : BOOLEAN;
    signal exitcond_fu_438_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_449_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_reg_546 : STD_LOGIC_VECTOR (3 downto 0);
    signal val_assign_agg_result_V_fu_455_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st50_fsm_49 : STD_LOGIC;
    signal ap_sig_250 : BOOLEAN;
    signal mem_conv1_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal mem_conv1_ce0 : STD_LOGIC;
    signal mem_conv1_we0 : STD_LOGIC;
    signal mem_conv1_d0 : STD_LOGIC_VECTOR (0 downto 0);
    signal mem_conv1_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal mem_conv2_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal mem_conv2_ce0 : STD_LOGIC;
    signal mem_conv2_we0 : STD_LOGIC;
    signal mem_conv2_d0 : STD_LOGIC_VECTOR (0 downto 0);
    signal mem_conv2_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_dut_dense_fu_217_ap_start : STD_LOGIC;
    signal grp_dut_dense_fu_217_ap_done : STD_LOGIC;
    signal grp_dut_dense_fu_217_ap_idle : STD_LOGIC;
    signal grp_dut_dense_fu_217_ap_ready : STD_LOGIC;
    signal grp_dut_dense_fu_217_input_r_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_dut_dense_fu_217_input_r_ce0 : STD_LOGIC;
    signal grp_dut_dense_fu_217_output_r_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_dut_dense_fu_217_output_r_ce0 : STD_LOGIC;
    signal grp_dut_dense_fu_217_output_r_we0 : STD_LOGIC;
    signal grp_dut_dense_fu_217_output_r_d0 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_dut_conv_fu_227_ap_start : STD_LOGIC;
    signal grp_dut_conv_fu_227_ap_done : STD_LOGIC;
    signal grp_dut_conv_fu_227_ap_idle : STD_LOGIC;
    signal grp_dut_conv_fu_227_ap_ready : STD_LOGIC;
    signal grp_dut_conv_fu_227_input_r_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_dut_conv_fu_227_input_r_ce0 : STD_LOGIC;
    signal grp_dut_conv_fu_227_input_r_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_dut_conv_fu_227_output_r_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_dut_conv_fu_227_output_r_ce0 : STD_LOGIC;
    signal grp_dut_conv_fu_227_output_r_we0 : STD_LOGIC;
    signal grp_dut_conv_fu_227_output_r_d0 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_dut_conv_fu_227_threshold_V_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_dut_conv_fu_227_threshold_V_ce0 : STD_LOGIC;
    signal grp_dut_conv_fu_227_threshold_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_dut_conv_fu_227_M : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_dut_conv_fu_227_N : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_dut_conv_fu_227_I : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_dut_conv_fu_227_L : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_dut_max_pool_fu_252_ap_start : STD_LOGIC;
    signal grp_dut_max_pool_fu_252_ap_done : STD_LOGIC;
    signal grp_dut_max_pool_fu_252_ap_idle : STD_LOGIC;
    signal grp_dut_max_pool_fu_252_ap_ready : STD_LOGIC;
    signal grp_dut_max_pool_fu_252_input_r_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_dut_max_pool_fu_252_input_r_ce0 : STD_LOGIC;
    signal grp_dut_max_pool_fu_252_input_r_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_dut_max_pool_fu_252_output_r_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_dut_max_pool_fu_252_output_r_ce0 : STD_LOGIC;
    signal grp_dut_max_pool_fu_252_output_r_we0 : STD_LOGIC;
    signal grp_dut_max_pool_fu_252_output_r_d0 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_dut_max_pool_fu_252_M : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_dut_max_pool_fu_252_I : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_dut_pad_fu_264_ap_start : STD_LOGIC;
    signal grp_dut_pad_fu_264_ap_done : STD_LOGIC;
    signal grp_dut_pad_fu_264_ap_idle : STD_LOGIC;
    signal grp_dut_pad_fu_264_ap_ready : STD_LOGIC;
    signal grp_dut_pad_fu_264_input_r_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_dut_pad_fu_264_input_r_ce0 : STD_LOGIC;
    signal grp_dut_pad_fu_264_input_r_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_dut_pad_fu_264_output_r_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_dut_pad_fu_264_output_r_ce0 : STD_LOGIC;
    signal grp_dut_pad_fu_264_output_r_we0 : STD_LOGIC;
    signal grp_dut_pad_fu_264_output_r_d0 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_dut_pad_fu_264_M : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_dut_pad_fu_264_I : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_dut_reshape_fu_278_ap_start : STD_LOGIC;
    signal grp_dut_reshape_fu_278_ap_done : STD_LOGIC;
    signal grp_dut_reshape_fu_278_ap_idle : STD_LOGIC;
    signal grp_dut_reshape_fu_278_ap_ready : STD_LOGIC;
    signal grp_dut_reshape_fu_278_input_r_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_dut_reshape_fu_278_input_r_ce0 : STD_LOGIC;
    signal grp_dut_reshape_fu_278_output_r_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_dut_reshape_fu_278_output_r_ce0 : STD_LOGIC;
    signal grp_dut_reshape_fu_278_output_r_we0 : STD_LOGIC;
    signal grp_dut_reshape_fu_278_output_r_d0 : STD_LOGIC_VECTOR (0 downto 0);
    signal n_i_reg_159 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_sig_cseq_ST_st14_fsm_13 : STD_LOGIC;
    signal ap_sig_355 : BOOLEAN;
    signal ap_sig_cseq_ST_st47_fsm_46 : STD_LOGIC;
    signal ap_sig_365 : BOOLEAN;
    signal one_out_i_reg_171 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond3_fu_320_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal m_i_reg_183 : STD_LOGIC_VECTOR (9 downto 0);
    signal agg_result_V_reg_194 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st48_fsm_47 : STD_LOGIC;
    signal ap_sig_382 : BOOLEAN;
    signal max_id_V_reg_206 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_grp_dut_dense_fu_217_ap_start : STD_LOGIC := '0';
    signal ap_reg_grp_dut_conv_fu_227_ap_start : STD_LOGIC := '0';
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_417 : BOOLEAN;
    signal ap_sig_cseq_ST_st9_fsm_8 : STD_LOGIC;
    signal ap_sig_424 : BOOLEAN;
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_432 : BOOLEAN;
    signal ap_sig_cseq_ST_st10_fsm_9 : STD_LOGIC;
    signal ap_sig_439 : BOOLEAN;
    signal ap_reg_grp_dut_max_pool_fu_252_ap_start : STD_LOGIC := '0';
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_470 : BOOLEAN;
    signal ap_sig_cseq_ST_st11_fsm_10 : STD_LOGIC;
    signal ap_sig_477 : BOOLEAN;
    signal ap_sig_cseq_ST_st6_fsm_5 : STD_LOGIC;
    signal ap_sig_485 : BOOLEAN;
    signal ap_sig_cseq_ST_st12_fsm_11 : STD_LOGIC;
    signal ap_sig_492 : BOOLEAN;
    signal ap_reg_grp_dut_pad_fu_264_ap_start : STD_LOGIC := '0';
    signal ap_sig_cseq_ST_st7_fsm_6 : STD_LOGIC;
    signal ap_sig_506 : BOOLEAN;
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_514 : BOOLEAN;
    signal ap_sig_cseq_ST_st8_fsm_7 : STD_LOGIC;
    signal ap_sig_521 : BOOLEAN;
    signal ap_reg_grp_dut_reshape_fu_278_ap_start : STD_LOGIC := '0';
    signal ap_sig_cseq_ST_st13_fsm_12 : STD_LOGIC;
    signal ap_sig_530 : BOOLEAN;
    signal tmp_18_i_fu_361_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_19_i_fu_366_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_444_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_284_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_284_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st24_fsm_23 : STD_LOGIC;
    signal ap_sig_546 : BOOLEAN;
    signal ap_sig_cseq_ST_st32_fsm_31 : STD_LOGIC;
    signal ap_sig_553 : BOOLEAN;
    signal ap_sig_cseq_ST_st41_fsm_40 : STD_LOGIC;
    signal ap_sig_560 : BOOLEAN;
    signal grp_fu_290_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_290_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st37_fsm_36 : STD_LOGIC;
    signal ap_sig_572 : BOOLEAN;
    signal grp_fu_297_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_32_fu_344_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_17_i_fu_348_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal w_index_fu_356_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp1_fu_371_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal biased_to_int_fu_392_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_fu_396_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_31_fu_406_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs_fu_416_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_fu_410_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_14_fu_422_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_fu_300_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (49 downto 0);

    component dut_dense IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_r_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        input_r_ce0 : OUT STD_LOGIC;
        input_r_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
        output_r_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component dut_conv IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_r_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        input_r_ce0 : OUT STD_LOGIC;
        input_r_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
        output_r_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (0 downto 0);
        threshold_V_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        threshold_V_ce0 : OUT STD_LOGIC;
        threshold_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        M : IN STD_LOGIC_VECTOR (6 downto 0);
        N : IN STD_LOGIC_VECTOR (6 downto 0);
        I : IN STD_LOGIC_VECTOR (5 downto 0);
        L : IN STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component dut_max_pool IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_r_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        input_r_ce0 : OUT STD_LOGIC;
        input_r_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
        output_r_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (0 downto 0);
        M : IN STD_LOGIC_VECTOR (6 downto 0);
        I : IN STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component dut_pad IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_r_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        input_r_ce0 : OUT STD_LOGIC;
        input_r_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
        output_r_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (0 downto 0);
        M : IN STD_LOGIC_VECTOR (6 downto 0);
        I : IN STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component dut_reshape IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_r_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        input_r_ce0 : OUT STD_LOGIC;
        input_r_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
        output_r_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component dut_fadd_32ns_32ns_32_5_full_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dut_fmul_32ns_32ns_32_4_max_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dut_sitofp_32ns_32_6 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dut_fcmp_32ns_32ns_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component dut_bnn_xcel_threshold1_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component dut_bnn_xcel_threshold2_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component dut_bnn_xcel_w_fc1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (16 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component dut_bnn_xcel_b_fc1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dut_bnn_xcel_mem_conv1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (0 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    threshold1_V_U : component dut_bnn_xcel_threshold1_V
    generic map (
        DataWidth => 8,
        AddressRange => 5184,
        AddressWidth => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => grp_dut_conv_fu_227_threshold_V_address0,
        ce0 => grp_dut_conv_fu_227_threshold_V_ce0,
        q0 => threshold1_V_q0);

    threshold2_V_U : component dut_bnn_xcel_threshold2_V
    generic map (
        DataWidth => 8,
        AddressRange => 5184,
        AddressWidth => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => grp_dut_conv_fu_227_threshold_V_address0,
        ce0 => grp_dut_conv_fu_227_threshold_V_ce0,
        q0 => threshold2_V_q0);

    w_fc1_U : component dut_bnn_xcel_w_fc1
    generic map (
        DataWidth => 1,
        AddressRange => 131072,
        AddressWidth => 17)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => w_fc1_address0,
        ce0 => w_fc1_ce0,
        q0 => w_fc1_q0);

    b_fc1_U : component dut_bnn_xcel_b_fc1
    generic map (
        DataWidth => 32,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => b_fc1_address0,
        ce0 => b_fc1_ce0,
        q0 => b_fc1_q0);

    mem_conv1_U : component dut_bnn_xcel_mem_conv1
    generic map (
        DataWidth => 1,
        AddressRange => 5184,
        AddressWidth => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => mem_conv1_address0,
        ce0 => mem_conv1_ce0,
        we0 => mem_conv1_we0,
        d0 => mem_conv1_d0,
        q0 => mem_conv1_q0);

    mem_conv2_U : component dut_bnn_xcel_mem_conv1
    generic map (
        DataWidth => 1,
        AddressRange => 5184,
        AddressWidth => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => mem_conv2_address0,
        ce0 => mem_conv2_ce0,
        we0 => mem_conv2_we0,
        d0 => mem_conv2_d0,
        q0 => mem_conv2_q0);

    grp_dut_dense_fu_217 : component dut_dense
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_dut_dense_fu_217_ap_start,
        ap_done => grp_dut_dense_fu_217_ap_done,
        ap_idle => grp_dut_dense_fu_217_ap_idle,
        ap_ready => grp_dut_dense_fu_217_ap_ready,
        input_r_address0 => grp_dut_dense_fu_217_input_r_address0,
        input_r_ce0 => grp_dut_dense_fu_217_input_r_ce0,
        input_r_q0 => mem_conv2_q0,
        output_r_address0 => grp_dut_dense_fu_217_output_r_address0,
        output_r_ce0 => grp_dut_dense_fu_217_output_r_ce0,
        output_r_we0 => grp_dut_dense_fu_217_output_r_we0,
        output_r_d0 => grp_dut_dense_fu_217_output_r_d0);

    grp_dut_conv_fu_227 : component dut_conv
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_dut_conv_fu_227_ap_start,
        ap_done => grp_dut_conv_fu_227_ap_done,
        ap_idle => grp_dut_conv_fu_227_ap_idle,
        ap_ready => grp_dut_conv_fu_227_ap_ready,
        input_r_address0 => grp_dut_conv_fu_227_input_r_address0,
        input_r_ce0 => grp_dut_conv_fu_227_input_r_ce0,
        input_r_q0 => grp_dut_conv_fu_227_input_r_q0,
        output_r_address0 => grp_dut_conv_fu_227_output_r_address0,
        output_r_ce0 => grp_dut_conv_fu_227_output_r_ce0,
        output_r_we0 => grp_dut_conv_fu_227_output_r_we0,
        output_r_d0 => grp_dut_conv_fu_227_output_r_d0,
        threshold_V_address0 => grp_dut_conv_fu_227_threshold_V_address0,
        threshold_V_ce0 => grp_dut_conv_fu_227_threshold_V_ce0,
        threshold_V_q0 => grp_dut_conv_fu_227_threshold_V_q0,
        M => grp_dut_conv_fu_227_M,
        N => grp_dut_conv_fu_227_N,
        I => grp_dut_conv_fu_227_I,
        L => grp_dut_conv_fu_227_L);

    grp_dut_max_pool_fu_252 : component dut_max_pool
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_dut_max_pool_fu_252_ap_start,
        ap_done => grp_dut_max_pool_fu_252_ap_done,
        ap_idle => grp_dut_max_pool_fu_252_ap_idle,
        ap_ready => grp_dut_max_pool_fu_252_ap_ready,
        input_r_address0 => grp_dut_max_pool_fu_252_input_r_address0,
        input_r_ce0 => grp_dut_max_pool_fu_252_input_r_ce0,
        input_r_q0 => grp_dut_max_pool_fu_252_input_r_q0,
        output_r_address0 => grp_dut_max_pool_fu_252_output_r_address0,
        output_r_ce0 => grp_dut_max_pool_fu_252_output_r_ce0,
        output_r_we0 => grp_dut_max_pool_fu_252_output_r_we0,
        output_r_d0 => grp_dut_max_pool_fu_252_output_r_d0,
        M => grp_dut_max_pool_fu_252_M,
        I => grp_dut_max_pool_fu_252_I);

    grp_dut_pad_fu_264 : component dut_pad
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_dut_pad_fu_264_ap_start,
        ap_done => grp_dut_pad_fu_264_ap_done,
        ap_idle => grp_dut_pad_fu_264_ap_idle,
        ap_ready => grp_dut_pad_fu_264_ap_ready,
        input_r_address0 => grp_dut_pad_fu_264_input_r_address0,
        input_r_ce0 => grp_dut_pad_fu_264_input_r_ce0,
        input_r_q0 => grp_dut_pad_fu_264_input_r_q0,
        output_r_address0 => grp_dut_pad_fu_264_output_r_address0,
        output_r_ce0 => grp_dut_pad_fu_264_output_r_ce0,
        output_r_we0 => grp_dut_pad_fu_264_output_r_we0,
        output_r_d0 => grp_dut_pad_fu_264_output_r_d0,
        M => grp_dut_pad_fu_264_M,
        I => grp_dut_pad_fu_264_I);

    grp_dut_reshape_fu_278 : component dut_reshape
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_dut_reshape_fu_278_ap_start,
        ap_done => grp_dut_reshape_fu_278_ap_done,
        ap_idle => grp_dut_reshape_fu_278_ap_idle,
        ap_ready => grp_dut_reshape_fu_278_ap_ready,
        input_r_address0 => grp_dut_reshape_fu_278_input_r_address0,
        input_r_ce0 => grp_dut_reshape_fu_278_input_r_ce0,
        input_r_q0 => mem_conv2_q0,
        output_r_address0 => grp_dut_reshape_fu_278_output_r_address0,
        output_r_ce0 => grp_dut_reshape_fu_278_output_r_ce0,
        output_r_we0 => grp_dut_reshape_fu_278_output_r_we0,
        output_r_d0 => grp_dut_reshape_fu_278_output_r_d0);

    dut_fadd_32ns_32ns_32_5_full_dsp_U28 : component dut_fadd_32ns_32ns_32_5_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_284_p0,
        din1 => grp_fu_284_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_284_p2);

    dut_fmul_32ns_32ns_32_4_max_dsp_U29 : component dut_fmul_32ns_32ns_32_4_max_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_290_p0,
        din1 => grp_fu_290_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_290_p2);

    dut_sitofp_32ns_32_6_U30 : component dut_sitofp_32ns_32_6
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_297_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_297_p1);

    dut_fcmp_32ns_32ns_1_1_U31 : component dut_fcmp_32ns_32ns_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => reg_310,
        din1 => ap_const_lv32_0,
        opcode => ap_const_lv5_2,
        dout => tmp_15_fu_300_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_grp_dut_conv_fu_227_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_grp_dut_conv_fu_227_ap_start <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or (ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8))) then 
                    ap_reg_grp_dut_conv_fu_227_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_dut_conv_fu_227_ap_ready)) then 
                    ap_reg_grp_dut_conv_fu_227_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_dut_dense_fu_217_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_grp_dut_dense_fu_217_ap_start <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14) and not((ap_const_lv1_0 = exitcond3_fu_320_p2)))) then 
                    ap_reg_grp_dut_dense_fu_217_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_dut_dense_fu_217_ap_ready)) then 
                    ap_reg_grp_dut_dense_fu_217_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_dut_max_pool_fu_252_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_grp_dut_max_pool_fu_252_ap_start <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or (ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10))) then 
                    ap_reg_grp_dut_max_pool_fu_252_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_dut_max_pool_fu_252_ap_ready)) then 
                    ap_reg_grp_dut_max_pool_fu_252_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_dut_pad_fu_264_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_grp_dut_pad_fu_264_ap_start <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0))) or (ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6))) then 
                    ap_reg_grp_dut_pad_fu_264_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_dut_pad_fu_264_ap_ready)) then 
                    ap_reg_grp_dut_pad_fu_264_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_dut_reshape_fu_278_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_grp_dut_reshape_fu_278_ap_start <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12)) then 
                    ap_reg_grp_dut_reshape_fu_278_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_dut_reshape_fu_278_ap_ready)) then 
                    ap_reg_grp_dut_reshape_fu_278_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv32_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_st49_fsm_48) and not((ap_const_lv1_0 = exitcond_fu_438_p2)))) then 
                    ap_return_preg <= agg_result_V_reg_194;
                end if; 
            end if;
        end if;
    end process;


    agg_result_V_reg_194_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st50_fsm_49)) then 
                agg_result_V_reg_194 <= val_assign_agg_result_V_fu_455_p3;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st48_fsm_47) and not((ap_const_logic_0 = grp_dut_dense_fu_217_ap_done)))) then 
                agg_result_V_reg_194 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    m_i_reg_183_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14) and (ap_const_lv1_0 = exitcond3_fu_320_p2))) then 
                m_i_reg_183 <= ap_const_lv10_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st28_fsm_27)) then 
                m_i_reg_183 <= m_reg_478;
            end if; 
        end if;
    end process;

    max_id_V_reg_206_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st50_fsm_49)) then 
                max_id_V_reg_206 <= i_reg_546;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st48_fsm_47) and not((ap_const_logic_0 = grp_dut_dense_fu_217_ap_done)))) then 
                max_id_V_reg_206 <= ap_const_lv4_1;
            end if; 
        end if;
    end process;

    n_i_reg_159_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st47_fsm_46)) then 
                n_i_reg_159 <= n_reg_470;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13) and not((ap_const_logic_0 = grp_dut_reshape_fu_278_ap_done)))) then 
                n_i_reg_159 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    one_out_i_reg_171_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14) and (ap_const_lv1_0 = exitcond3_fu_320_p2))) then 
                one_out_i_reg_171 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st28_fsm_27)) then 
                one_out_i_reg_171 <= grp_fu_284_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st40_fsm_39)) then
                b_fc1_load_reg_523 <= b_fc1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st49_fsm_48) and (ap_const_lv1_0 = exitcond_fu_438_p2))) then
                i_reg_546 <= i_fu_449_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15)) then
                m_reg_478 <= m_fu_338_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st49_fsm_48)) then
                    max_id_V_cast2_reg_533(3 downto 0) <= max_id_V_cast2_fu_434_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14)) then
                    n_i_cast6_reg_462(8 downto 0) <= n_i_cast6_fu_316_p1(8 downto 0);
                n_reg_470 <= n_fu_326_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st31_fsm_30) or (ap_const_logic_1 = ap_sig_cseq_ST_st40_fsm_39))) then
                reg_305 <= grp_fu_290_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st36_fsm_35) or (ap_const_logic_1 = ap_sig_cseq_ST_st45_fsm_44))) then
                reg_310 <= grp_fu_284_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st46_fsm_45)) then
                tmp_16_reg_528 <= tmp_16_fu_428_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st17_fsm_16)) then
                tmp_20_i_reg_493 <= tmp_20_i_fu_377_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22)) then
                tmp_22_i_reg_503 <= grp_fu_297_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st39_fsm_38)) then
                    tmp_25_i_reg_513(8 downto 0) <= tmp_25_i_fu_387_p1(8 downto 0);
            end if;
        end if;
    end process;
    n_i_cast6_reg_462(16 downto 9) <= "00000000";
    tmp_25_i_reg_513(63 downto 9) <= "0000000000000000000000000000000000000000000000000000000";
    max_id_V_cast2_reg_533(31 downto 4) <= "0000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, exitcond2_fu_332_p2, exitcond_fu_438_p2, grp_dut_dense_fu_217_ap_done, grp_dut_conv_fu_227_ap_done, grp_dut_max_pool_fu_252_ap_done, grp_dut_pad_fu_264_ap_done, grp_dut_reshape_fu_278_ap_done, exitcond3_fu_320_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not((ap_const_logic_0 = grp_dut_pad_fu_264_ap_done))) then
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                end if;
            when ap_ST_st3_fsm_2 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when ap_ST_st4_fsm_3 => 
                if (not((ap_const_logic_0 = grp_dut_conv_fu_227_ap_done))) then
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                else
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                end if;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st6_fsm_5 => 
                if (not((ap_const_logic_0 = grp_dut_max_pool_fu_252_ap_done))) then
                    ap_NS_fsm <= ap_ST_st7_fsm_6;
                else
                    ap_NS_fsm <= ap_ST_st6_fsm_5;
                end if;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st8_fsm_7;
            when ap_ST_st8_fsm_7 => 
                if (not((ap_const_logic_0 = grp_dut_pad_fu_264_ap_done))) then
                    ap_NS_fsm <= ap_ST_st9_fsm_8;
                else
                    ap_NS_fsm <= ap_ST_st8_fsm_7;
                end if;
            when ap_ST_st9_fsm_8 => 
                ap_NS_fsm <= ap_ST_st10_fsm_9;
            when ap_ST_st10_fsm_9 => 
                if (not((ap_const_logic_0 = grp_dut_conv_fu_227_ap_done))) then
                    ap_NS_fsm <= ap_ST_st11_fsm_10;
                else
                    ap_NS_fsm <= ap_ST_st10_fsm_9;
                end if;
            when ap_ST_st11_fsm_10 => 
                ap_NS_fsm <= ap_ST_st12_fsm_11;
            when ap_ST_st12_fsm_11 => 
                if (not((ap_const_logic_0 = grp_dut_max_pool_fu_252_ap_done))) then
                    ap_NS_fsm <= ap_ST_st13_fsm_12;
                else
                    ap_NS_fsm <= ap_ST_st12_fsm_11;
                end if;
            when ap_ST_st13_fsm_12 => 
                ap_NS_fsm <= ap_ST_st14_fsm_13;
            when ap_ST_st14_fsm_13 => 
                if (not((ap_const_logic_0 = grp_dut_reshape_fu_278_ap_done))) then
                    ap_NS_fsm <= ap_ST_st15_fsm_14;
                else
                    ap_NS_fsm <= ap_ST_st14_fsm_13;
                end if;
            when ap_ST_st15_fsm_14 => 
                if (not((ap_const_lv1_0 = exitcond3_fu_320_p2))) then
                    ap_NS_fsm <= ap_ST_st48_fsm_47;
                else
                    ap_NS_fsm <= ap_ST_st16_fsm_15;
                end if;
            when ap_ST_st16_fsm_15 => 
                if (not((exitcond2_fu_332_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st29_fsm_28;
                else
                    ap_NS_fsm <= ap_ST_st17_fsm_16;
                end if;
            when ap_ST_st17_fsm_16 => 
                ap_NS_fsm <= ap_ST_st18_fsm_17;
            when ap_ST_st18_fsm_17 => 
                ap_NS_fsm <= ap_ST_st19_fsm_18;
            when ap_ST_st19_fsm_18 => 
                ap_NS_fsm <= ap_ST_st20_fsm_19;
            when ap_ST_st20_fsm_19 => 
                ap_NS_fsm <= ap_ST_st21_fsm_20;
            when ap_ST_st21_fsm_20 => 
                ap_NS_fsm <= ap_ST_st22_fsm_21;
            when ap_ST_st22_fsm_21 => 
                ap_NS_fsm <= ap_ST_st23_fsm_22;
            when ap_ST_st23_fsm_22 => 
                ap_NS_fsm <= ap_ST_st24_fsm_23;
            when ap_ST_st24_fsm_23 => 
                ap_NS_fsm <= ap_ST_st25_fsm_24;
            when ap_ST_st25_fsm_24 => 
                ap_NS_fsm <= ap_ST_st26_fsm_25;
            when ap_ST_st26_fsm_25 => 
                ap_NS_fsm <= ap_ST_st27_fsm_26;
            when ap_ST_st27_fsm_26 => 
                ap_NS_fsm <= ap_ST_st28_fsm_27;
            when ap_ST_st28_fsm_27 => 
                ap_NS_fsm <= ap_ST_st16_fsm_15;
            when ap_ST_st29_fsm_28 => 
                ap_NS_fsm <= ap_ST_st30_fsm_29;
            when ap_ST_st30_fsm_29 => 
                ap_NS_fsm <= ap_ST_st31_fsm_30;
            when ap_ST_st31_fsm_30 => 
                ap_NS_fsm <= ap_ST_st32_fsm_31;
            when ap_ST_st32_fsm_31 => 
                ap_NS_fsm <= ap_ST_st33_fsm_32;
            when ap_ST_st33_fsm_32 => 
                ap_NS_fsm <= ap_ST_st34_fsm_33;
            when ap_ST_st34_fsm_33 => 
                ap_NS_fsm <= ap_ST_st35_fsm_34;
            when ap_ST_st35_fsm_34 => 
                ap_NS_fsm <= ap_ST_st36_fsm_35;
            when ap_ST_st36_fsm_35 => 
                ap_NS_fsm <= ap_ST_st37_fsm_36;
            when ap_ST_st37_fsm_36 => 
                ap_NS_fsm <= ap_ST_st38_fsm_37;
            when ap_ST_st38_fsm_37 => 
                ap_NS_fsm <= ap_ST_st39_fsm_38;
            when ap_ST_st39_fsm_38 => 
                ap_NS_fsm <= ap_ST_st40_fsm_39;
            when ap_ST_st40_fsm_39 => 
                ap_NS_fsm <= ap_ST_st41_fsm_40;
            when ap_ST_st41_fsm_40 => 
                ap_NS_fsm <= ap_ST_st42_fsm_41;
            when ap_ST_st42_fsm_41 => 
                ap_NS_fsm <= ap_ST_st43_fsm_42;
            when ap_ST_st43_fsm_42 => 
                ap_NS_fsm <= ap_ST_st44_fsm_43;
            when ap_ST_st44_fsm_43 => 
                ap_NS_fsm <= ap_ST_st45_fsm_44;
            when ap_ST_st45_fsm_44 => 
                ap_NS_fsm <= ap_ST_st46_fsm_45;
            when ap_ST_st46_fsm_45 => 
                ap_NS_fsm <= ap_ST_st47_fsm_46;
            when ap_ST_st47_fsm_46 => 
                ap_NS_fsm <= ap_ST_st15_fsm_14;
            when ap_ST_st48_fsm_47 => 
                if (not((ap_const_logic_0 = grp_dut_dense_fu_217_ap_done))) then
                    ap_NS_fsm <= ap_ST_st49_fsm_48;
                else
                    ap_NS_fsm <= ap_ST_st48_fsm_47;
                end if;
            when ap_ST_st49_fsm_48 => 
                if (not((ap_const_lv1_0 = exitcond_fu_438_p2))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st50_fsm_49;
                end if;
            when ap_ST_st50_fsm_49 => 
                ap_NS_fsm <= ap_ST_st49_fsm_48;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    ap_done_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st49_fsm_48, exitcond_fu_438_p2)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st49_fsm_48) and not((ap_const_lv1_0 = exitcond_fu_438_p2))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_sig_cseq_ST_st49_fsm_48, exitcond_fu_438_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st49_fsm_48) and not((ap_const_lv1_0 = exitcond_fu_438_p2)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(ap_sig_cseq_ST_st49_fsm_48, exitcond_fu_438_p2, agg_result_V_reg_194, ap_return_preg)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st49_fsm_48) and not((ap_const_lv1_0 = exitcond_fu_438_p2)))) then 
            ap_return <= agg_result_V_reg_194;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;


    ap_sig_116_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_116 <= (ap_const_lv1_1 = ap_CS_fsm(30 downto 30));
    end process;


    ap_sig_123_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_123 <= (ap_const_lv1_1 = ap_CS_fsm(39 downto 39));
    end process;


    ap_sig_133_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_133 <= (ap_const_lv1_1 = ap_CS_fsm(35 downto 35));
    end process;


    ap_sig_140_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_140 <= (ap_const_lv1_1 = ap_CS_fsm(44 downto 44));
    end process;


    ap_sig_150_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_150 <= (ap_const_lv1_1 = ap_CS_fsm(14 downto 14));
    end process;


    ap_sig_161_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_161 <= (ap_const_lv1_1 = ap_CS_fsm(15 downto 15));
    end process;


    ap_sig_178_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_178 <= (ap_const_lv1_1 = ap_CS_fsm(16 downto 16));
    end process;


    ap_sig_187_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_187 <= (ap_const_lv1_1 = ap_CS_fsm(17 downto 17));
    end process;


    ap_sig_196_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_196 <= (ap_const_lv1_1 = ap_CS_fsm(22 downto 22));
    end process;


    ap_sig_204_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_204 <= (ap_const_lv1_1 = ap_CS_fsm(27 downto 27));
    end process;


    ap_sig_213_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_213 <= (ap_const_lv1_1 = ap_CS_fsm(38 downto 38));
    end process;


    ap_sig_225_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_225 <= (ap_const_lv1_1 = ap_CS_fsm(45 downto 45));
    end process;


    ap_sig_234_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_234 <= (ap_const_lv1_1 = ap_CS_fsm(48 downto 48));
    end process;


    ap_sig_250_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_250 <= (ap_const_lv1_1 = ap_CS_fsm(49 downto 49));
    end process;


    ap_sig_355_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_355 <= (ap_const_lv1_1 = ap_CS_fsm(13 downto 13));
    end process;


    ap_sig_365_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_365 <= (ap_const_lv1_1 = ap_CS_fsm(46 downto 46));
    end process;


    ap_sig_382_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_382 <= (ap_const_lv1_1 = ap_CS_fsm(47 downto 47));
    end process;


    ap_sig_417_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_417 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    ap_sig_424_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_424 <= (ap_const_lv1_1 = ap_CS_fsm(8 downto 8));
    end process;


    ap_sig_432_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_432 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    ap_sig_439_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_439 <= (ap_const_lv1_1 = ap_CS_fsm(9 downto 9));
    end process;


    ap_sig_470_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_470 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    ap_sig_477_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_477 <= (ap_const_lv1_1 = ap_CS_fsm(10 downto 10));
    end process;


    ap_sig_485_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_485 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    ap_sig_492_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_492 <= (ap_const_lv1_1 = ap_CS_fsm(11 downto 11));
    end process;


    ap_sig_506_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_506 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    ap_sig_514_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_514 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    ap_sig_521_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_521 <= (ap_const_lv1_1 = ap_CS_fsm(7 downto 7));
    end process;


    ap_sig_530_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_530 <= (ap_const_lv1_1 = ap_CS_fsm(12 downto 12));
    end process;


    ap_sig_546_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_546 <= (ap_const_lv1_1 = ap_CS_fsm(23 downto 23));
    end process;


    ap_sig_553_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_553 <= (ap_const_lv1_1 = ap_CS_fsm(31 downto 31));
    end process;


    ap_sig_560_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_560 <= (ap_const_lv1_1 = ap_CS_fsm(40 downto 40));
    end process;


    ap_sig_572_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_572 <= (ap_const_lv1_1 = ap_CS_fsm(36 downto 36));
    end process;


    ap_sig_67_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_67 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    ap_sig_cseq_ST_st10_fsm_9_assign_proc : process(ap_sig_439)
    begin
        if (ap_sig_439) then 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st11_fsm_10_assign_proc : process(ap_sig_477)
    begin
        if (ap_sig_477) then 
            ap_sig_cseq_ST_st11_fsm_10 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st11_fsm_10 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st12_fsm_11_assign_proc : process(ap_sig_492)
    begin
        if (ap_sig_492) then 
            ap_sig_cseq_ST_st12_fsm_11 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st12_fsm_11 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st13_fsm_12_assign_proc : process(ap_sig_530)
    begin
        if (ap_sig_530) then 
            ap_sig_cseq_ST_st13_fsm_12 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st13_fsm_12 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st14_fsm_13_assign_proc : process(ap_sig_355)
    begin
        if (ap_sig_355) then 
            ap_sig_cseq_ST_st14_fsm_13 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st14_fsm_13 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st15_fsm_14_assign_proc : process(ap_sig_150)
    begin
        if (ap_sig_150) then 
            ap_sig_cseq_ST_st15_fsm_14 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st15_fsm_14 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st16_fsm_15_assign_proc : process(ap_sig_161)
    begin
        if (ap_sig_161) then 
            ap_sig_cseq_ST_st16_fsm_15 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st16_fsm_15 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st17_fsm_16_assign_proc : process(ap_sig_178)
    begin
        if (ap_sig_178) then 
            ap_sig_cseq_ST_st17_fsm_16 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st17_fsm_16 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st18_fsm_17_assign_proc : process(ap_sig_187)
    begin
        if (ap_sig_187) then 
            ap_sig_cseq_ST_st18_fsm_17 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st18_fsm_17 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_67)
    begin
        if (ap_sig_67) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st23_fsm_22_assign_proc : process(ap_sig_196)
    begin
        if (ap_sig_196) then 
            ap_sig_cseq_ST_st23_fsm_22 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st23_fsm_22 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st24_fsm_23_assign_proc : process(ap_sig_546)
    begin
        if (ap_sig_546) then 
            ap_sig_cseq_ST_st24_fsm_23 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st24_fsm_23 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st28_fsm_27_assign_proc : process(ap_sig_204)
    begin
        if (ap_sig_204) then 
            ap_sig_cseq_ST_st28_fsm_27 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st28_fsm_27 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_514)
    begin
        if (ap_sig_514) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st31_fsm_30_assign_proc : process(ap_sig_116)
    begin
        if (ap_sig_116) then 
            ap_sig_cseq_ST_st31_fsm_30 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st31_fsm_30 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st32_fsm_31_assign_proc : process(ap_sig_553)
    begin
        if (ap_sig_553) then 
            ap_sig_cseq_ST_st32_fsm_31 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st32_fsm_31 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st36_fsm_35_assign_proc : process(ap_sig_133)
    begin
        if (ap_sig_133) then 
            ap_sig_cseq_ST_st36_fsm_35 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st36_fsm_35 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st37_fsm_36_assign_proc : process(ap_sig_572)
    begin
        if (ap_sig_572) then 
            ap_sig_cseq_ST_st37_fsm_36 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st37_fsm_36 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st39_fsm_38_assign_proc : process(ap_sig_213)
    begin
        if (ap_sig_213) then 
            ap_sig_cseq_ST_st39_fsm_38 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st39_fsm_38 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_417)
    begin
        if (ap_sig_417) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st40_fsm_39_assign_proc : process(ap_sig_123)
    begin
        if (ap_sig_123) then 
            ap_sig_cseq_ST_st40_fsm_39 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st40_fsm_39 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st41_fsm_40_assign_proc : process(ap_sig_560)
    begin
        if (ap_sig_560) then 
            ap_sig_cseq_ST_st41_fsm_40 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st41_fsm_40 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st45_fsm_44_assign_proc : process(ap_sig_140)
    begin
        if (ap_sig_140) then 
            ap_sig_cseq_ST_st45_fsm_44 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st45_fsm_44 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st46_fsm_45_assign_proc : process(ap_sig_225)
    begin
        if (ap_sig_225) then 
            ap_sig_cseq_ST_st46_fsm_45 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st46_fsm_45 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st47_fsm_46_assign_proc : process(ap_sig_365)
    begin
        if (ap_sig_365) then 
            ap_sig_cseq_ST_st47_fsm_46 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st47_fsm_46 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st48_fsm_47_assign_proc : process(ap_sig_382)
    begin
        if (ap_sig_382) then 
            ap_sig_cseq_ST_st48_fsm_47 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st48_fsm_47 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st49_fsm_48_assign_proc : process(ap_sig_234)
    begin
        if (ap_sig_234) then 
            ap_sig_cseq_ST_st49_fsm_48 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st49_fsm_48 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_432)
    begin
        if (ap_sig_432) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st50_fsm_49_assign_proc : process(ap_sig_250)
    begin
        if (ap_sig_250) then 
            ap_sig_cseq_ST_st50_fsm_49 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st50_fsm_49 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_470)
    begin
        if (ap_sig_470) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st6_fsm_5_assign_proc : process(ap_sig_485)
    begin
        if (ap_sig_485) then 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st7_fsm_6_assign_proc : process(ap_sig_506)
    begin
        if (ap_sig_506) then 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st8_fsm_7_assign_proc : process(ap_sig_521)
    begin
        if (ap_sig_521) then 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st9_fsm_8_assign_proc : process(ap_sig_424)
    begin
        if (ap_sig_424) then 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_0;
        end if; 
    end process;

    b_fc1_address0 <= tmp_25_i_fu_387_p1(8 - 1 downto 0);

    b_fc1_ce0_assign_proc : process(ap_sig_cseq_ST_st39_fsm_38)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st39_fsm_38)) then 
            b_fc1_ce0 <= ap_const_logic_1;
        else 
            b_fc1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    biased_to_int_fu_392_p1 <= reg_310;
    exitcond2_fu_332_p2 <= "1" when (m_i_reg_183 = ap_const_lv10_200) else "0";
    exitcond3_fu_320_p2 <= "1" when (n_i_reg_159 = ap_const_lv9_100) else "0";
    exitcond_fu_438_p2 <= "1" when (max_id_V_reg_206 = ap_const_lv4_A) else "0";

    grp_dut_conv_fu_227_I_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st10_fsm_9)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then 
            grp_dut_conv_fu_227_I <= ap_const_lv6_A;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            grp_dut_conv_fu_227_I <= ap_const_lv6_12;
        else 
            grp_dut_conv_fu_227_I <= "XXXXXX";
        end if; 
    end process;


    grp_dut_conv_fu_227_L_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st10_fsm_9)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then 
            grp_dut_conv_fu_227_L <= ap_const_lv1_1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            grp_dut_conv_fu_227_L <= ap_const_lv1_0;
        else 
            grp_dut_conv_fu_227_L <= "X";
        end if; 
    end process;


    grp_dut_conv_fu_227_M_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st10_fsm_9)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then 
            grp_dut_conv_fu_227_M <= ap_const_lv7_10;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            grp_dut_conv_fu_227_M <= ap_const_lv7_1;
        else 
            grp_dut_conv_fu_227_M <= "XXXXXXX";
        end if; 
    end process;


    grp_dut_conv_fu_227_N_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st10_fsm_9)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then 
            grp_dut_conv_fu_227_N <= ap_const_lv7_20;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            grp_dut_conv_fu_227_N <= ap_const_lv7_10;
        else 
            grp_dut_conv_fu_227_N <= "XXXXXXX";
        end if; 
    end process;

    grp_dut_conv_fu_227_ap_start <= ap_reg_grp_dut_conv_fu_227_ap_start;

    grp_dut_conv_fu_227_input_r_q0_assign_proc : process(mem_conv1_q0, mem_conv2_q0, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st10_fsm_9)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then 
            grp_dut_conv_fu_227_input_r_q0 <= mem_conv2_q0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            grp_dut_conv_fu_227_input_r_q0 <= mem_conv1_q0;
        else 
            grp_dut_conv_fu_227_input_r_q0 <= "X";
        end if; 
    end process;


    grp_dut_conv_fu_227_threshold_V_q0_assign_proc : process(threshold1_V_q0, threshold2_V_q0, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st10_fsm_9)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then 
            grp_dut_conv_fu_227_threshold_V_q0 <= threshold2_V_q0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            grp_dut_conv_fu_227_threshold_V_q0 <= threshold1_V_q0;
        else 
            grp_dut_conv_fu_227_threshold_V_q0 <= "XXXXXXXX";
        end if; 
    end process;

    grp_dut_dense_fu_217_ap_start <= ap_reg_grp_dut_dense_fu_217_ap_start;

    grp_dut_max_pool_fu_252_I_assign_proc : process(ap_sig_cseq_ST_st6_fsm_5, ap_sig_cseq_ST_st12_fsm_11)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11)) then 
            grp_dut_max_pool_fu_252_I <= ap_const_lv6_8;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            grp_dut_max_pool_fu_252_I <= ap_const_lv6_10;
        else 
            grp_dut_max_pool_fu_252_I <= "XXXXXX";
        end if; 
    end process;


    grp_dut_max_pool_fu_252_M_assign_proc : process(ap_sig_cseq_ST_st6_fsm_5, ap_sig_cseq_ST_st12_fsm_11)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11)) then 
            grp_dut_max_pool_fu_252_M <= ap_const_lv7_20;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            grp_dut_max_pool_fu_252_M <= ap_const_lv7_10;
        else 
            grp_dut_max_pool_fu_252_M <= "XXXXXXX";
        end if; 
    end process;

    grp_dut_max_pool_fu_252_ap_start <= ap_reg_grp_dut_max_pool_fu_252_ap_start;

    grp_dut_max_pool_fu_252_input_r_q0_assign_proc : process(mem_conv1_q0, mem_conv2_q0, ap_sig_cseq_ST_st6_fsm_5, ap_sig_cseq_ST_st12_fsm_11)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11)) then 
            grp_dut_max_pool_fu_252_input_r_q0 <= mem_conv1_q0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            grp_dut_max_pool_fu_252_input_r_q0 <= mem_conv2_q0;
        else 
            grp_dut_max_pool_fu_252_input_r_q0 <= "X";
        end if; 
    end process;


    grp_dut_pad_fu_264_I_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st8_fsm_7)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
            grp_dut_pad_fu_264_I <= ap_const_lv6_8;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            grp_dut_pad_fu_264_I <= ap_const_lv6_10;
        else 
            grp_dut_pad_fu_264_I <= "XXXXXX";
        end if; 
    end process;


    grp_dut_pad_fu_264_M_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st8_fsm_7)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
            grp_dut_pad_fu_264_M <= ap_const_lv7_10;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            grp_dut_pad_fu_264_M <= ap_const_lv7_1;
        else 
            grp_dut_pad_fu_264_M <= "XXXXXXX";
        end if; 
    end process;

    grp_dut_pad_fu_264_ap_start <= ap_reg_grp_dut_pad_fu_264_ap_start;

    grp_dut_pad_fu_264_input_r_q0_assign_proc : process(input_r_q0, mem_conv1_q0, ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st8_fsm_7)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
            grp_dut_pad_fu_264_input_r_q0 <= mem_conv1_q0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            grp_dut_pad_fu_264_input_r_q0 <= input_r_q0;
        else 
            grp_dut_pad_fu_264_input_r_q0 <= "X";
        end if; 
    end process;

    grp_dut_reshape_fu_278_ap_start <= ap_reg_grp_dut_reshape_fu_278_ap_start;

    grp_fu_284_p0_assign_proc : process(reg_305, one_out_i_reg_171, ap_sig_cseq_ST_st24_fsm_23, ap_sig_cseq_ST_st32_fsm_31, ap_sig_cseq_ST_st41_fsm_40)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st32_fsm_31) or (ap_const_logic_1 = ap_sig_cseq_ST_st41_fsm_40))) then 
            grp_fu_284_p0 <= reg_305;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st24_fsm_23)) then 
            grp_fu_284_p0 <= one_out_i_reg_171;
        else 
            grp_fu_284_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_284_p1_assign_proc : process(tmp_22_i_reg_503, b_fc1_load_reg_523, ap_sig_cseq_ST_st24_fsm_23, ap_sig_cseq_ST_st32_fsm_31, ap_sig_cseq_ST_st41_fsm_40)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st41_fsm_40)) then 
            grp_fu_284_p1 <= b_fc1_load_reg_523;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st32_fsm_31)) then 
            grp_fu_284_p1 <= ap_const_lv32_C4000000;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st24_fsm_23)) then 
            grp_fu_284_p1 <= tmp_22_i_reg_503;
        else 
            grp_fu_284_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_290_p0_assign_proc : process(reg_310, ap_sig_cseq_ST_st16_fsm_15, one_out_i_reg_171, ap_sig_cseq_ST_st37_fsm_36)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st37_fsm_36)) then 
            grp_fu_290_p0 <= reg_310;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15)) then 
            grp_fu_290_p0 <= one_out_i_reg_171;
        else 
            grp_fu_290_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_290_p1_assign_proc : process(ap_sig_cseq_ST_st16_fsm_15, ap_sig_cseq_ST_st37_fsm_36)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st37_fsm_36)) then 
            grp_fu_290_p1 <= ap_const_lv32_3D800000;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15)) then 
            grp_fu_290_p1 <= ap_const_lv32_40000000;
        else 
            grp_fu_290_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_297_p0 <= std_logic_vector(resize(unsigned(tmp_20_i_reg_493),32));
    i_fu_449_p2 <= std_logic_vector(unsigned(max_id_V_reg_206) + unsigned(ap_const_lv4_1));
    input_r_address0 <= grp_dut_pad_fu_264_input_r_address0;
    input_r_ce0 <= grp_dut_pad_fu_264_input_r_ce0;
    m_fu_338_p2 <= std_logic_vector(unsigned(m_i_reg_183) + unsigned(ap_const_lv10_1));
    max_id_V_cast2_fu_434_p1 <= std_logic_vector(resize(unsigned(max_id_V_reg_206),32));

    mem_conv1_address0_assign_proc : process(ap_sig_cseq_ST_st16_fsm_15, ap_sig_cseq_ST_st49_fsm_48, grp_dut_dense_fu_217_output_r_address0, grp_dut_conv_fu_227_input_r_address0, grp_dut_conv_fu_227_output_r_address0, grp_dut_max_pool_fu_252_input_r_address0, grp_dut_max_pool_fu_252_output_r_address0, grp_dut_pad_fu_264_input_r_address0, grp_dut_pad_fu_264_output_r_address0, grp_dut_reshape_fu_278_output_r_address0, ap_sig_cseq_ST_st14_fsm_13, ap_sig_cseq_ST_st48_fsm_47, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st10_fsm_9, ap_sig_cseq_ST_st6_fsm_5, ap_sig_cseq_ST_st12_fsm_11, ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st8_fsm_7, tmp_18_i_fu_361_p1, tmp_fu_444_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st49_fsm_48)) then 
            mem_conv1_address0 <= tmp_fu_444_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15)) then 
            mem_conv1_address0 <= tmp_18_i_fu_361_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13)) then 
            mem_conv1_address0 <= grp_dut_reshape_fu_278_output_r_address0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            mem_conv1_address0 <= grp_dut_pad_fu_264_output_r_address0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
            mem_conv1_address0 <= grp_dut_pad_fu_264_input_r_address0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            mem_conv1_address0 <= grp_dut_max_pool_fu_252_output_r_address0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11)) then 
            mem_conv1_address0 <= grp_dut_max_pool_fu_252_input_r_address0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then 
            mem_conv1_address0 <= grp_dut_conv_fu_227_output_r_address0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            mem_conv1_address0 <= grp_dut_conv_fu_227_input_r_address0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st48_fsm_47)) then 
            mem_conv1_address0 <= grp_dut_dense_fu_217_output_r_address0;
        else 
            mem_conv1_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    mem_conv1_ce0_assign_proc : process(ap_sig_cseq_ST_st16_fsm_15, ap_sig_cseq_ST_st49_fsm_48, grp_dut_dense_fu_217_output_r_ce0, grp_dut_conv_fu_227_input_r_ce0, grp_dut_conv_fu_227_output_r_ce0, grp_dut_max_pool_fu_252_input_r_ce0, grp_dut_max_pool_fu_252_output_r_ce0, grp_dut_pad_fu_264_input_r_ce0, grp_dut_pad_fu_264_output_r_ce0, grp_dut_reshape_fu_278_output_r_ce0, ap_sig_cseq_ST_st14_fsm_13, ap_sig_cseq_ST_st48_fsm_47, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st10_fsm_9, ap_sig_cseq_ST_st6_fsm_5, ap_sig_cseq_ST_st12_fsm_11, ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st8_fsm_7)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15) or (ap_const_logic_1 = ap_sig_cseq_ST_st49_fsm_48))) then 
            mem_conv1_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13)) then 
            mem_conv1_ce0 <= grp_dut_reshape_fu_278_output_r_ce0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            mem_conv1_ce0 <= grp_dut_pad_fu_264_output_r_ce0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
            mem_conv1_ce0 <= grp_dut_pad_fu_264_input_r_ce0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            mem_conv1_ce0 <= grp_dut_max_pool_fu_252_output_r_ce0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11)) then 
            mem_conv1_ce0 <= grp_dut_max_pool_fu_252_input_r_ce0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then 
            mem_conv1_ce0 <= grp_dut_conv_fu_227_output_r_ce0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            mem_conv1_ce0 <= grp_dut_conv_fu_227_input_r_ce0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st48_fsm_47)) then 
            mem_conv1_ce0 <= grp_dut_dense_fu_217_output_r_ce0;
        else 
            mem_conv1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    mem_conv1_d0_assign_proc : process(grp_dut_dense_fu_217_output_r_d0, grp_dut_conv_fu_227_output_r_d0, grp_dut_max_pool_fu_252_output_r_d0, grp_dut_pad_fu_264_output_r_d0, grp_dut_reshape_fu_278_output_r_d0, ap_sig_cseq_ST_st14_fsm_13, ap_sig_cseq_ST_st48_fsm_47, ap_sig_cseq_ST_st10_fsm_9, ap_sig_cseq_ST_st6_fsm_5, ap_sig_cseq_ST_st2_fsm_1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13)) then 
            mem_conv1_d0 <= grp_dut_reshape_fu_278_output_r_d0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            mem_conv1_d0 <= grp_dut_pad_fu_264_output_r_d0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            mem_conv1_d0 <= grp_dut_max_pool_fu_252_output_r_d0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then 
            mem_conv1_d0 <= grp_dut_conv_fu_227_output_r_d0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st48_fsm_47)) then 
            mem_conv1_d0 <= grp_dut_dense_fu_217_output_r_d0;
        else 
            mem_conv1_d0 <= "X";
        end if; 
    end process;


    mem_conv1_we0_assign_proc : process(grp_dut_dense_fu_217_output_r_we0, grp_dut_conv_fu_227_output_r_we0, grp_dut_max_pool_fu_252_output_r_we0, grp_dut_pad_fu_264_output_r_we0, grp_dut_reshape_fu_278_output_r_we0, ap_sig_cseq_ST_st14_fsm_13, ap_sig_cseq_ST_st48_fsm_47, ap_sig_cseq_ST_st10_fsm_9, ap_sig_cseq_ST_st6_fsm_5, ap_sig_cseq_ST_st2_fsm_1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13)) then 
            mem_conv1_we0 <= grp_dut_reshape_fu_278_output_r_we0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            mem_conv1_we0 <= grp_dut_pad_fu_264_output_r_we0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            mem_conv1_we0 <= grp_dut_max_pool_fu_252_output_r_we0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then 
            mem_conv1_we0 <= grp_dut_conv_fu_227_output_r_we0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st48_fsm_47)) then 
            mem_conv1_we0 <= grp_dut_dense_fu_217_output_r_we0;
        else 
            mem_conv1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    mem_conv2_address0_assign_proc : process(tmp_25_i_reg_513, grp_dut_dense_fu_217_input_r_address0, grp_dut_conv_fu_227_input_r_address0, grp_dut_conv_fu_227_output_r_address0, grp_dut_max_pool_fu_252_input_r_address0, grp_dut_max_pool_fu_252_output_r_address0, grp_dut_pad_fu_264_output_r_address0, grp_dut_reshape_fu_278_input_r_address0, ap_sig_cseq_ST_st14_fsm_13, ap_sig_cseq_ST_st47_fsm_46, ap_sig_cseq_ST_st48_fsm_47, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st10_fsm_9, ap_sig_cseq_ST_st6_fsm_5, ap_sig_cseq_ST_st12_fsm_11, ap_sig_cseq_ST_st8_fsm_7)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st47_fsm_46)) then 
            mem_conv2_address0 <= tmp_25_i_reg_513(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13)) then 
            mem_conv2_address0 <= grp_dut_reshape_fu_278_input_r_address0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
            mem_conv2_address0 <= grp_dut_pad_fu_264_output_r_address0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11)) then 
            mem_conv2_address0 <= grp_dut_max_pool_fu_252_output_r_address0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            mem_conv2_address0 <= grp_dut_max_pool_fu_252_input_r_address0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            mem_conv2_address0 <= grp_dut_conv_fu_227_output_r_address0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then 
            mem_conv2_address0 <= grp_dut_conv_fu_227_input_r_address0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st48_fsm_47)) then 
            mem_conv2_address0 <= grp_dut_dense_fu_217_input_r_address0;
        else 
            mem_conv2_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    mem_conv2_ce0_assign_proc : process(grp_dut_dense_fu_217_input_r_ce0, grp_dut_conv_fu_227_input_r_ce0, grp_dut_conv_fu_227_output_r_ce0, grp_dut_max_pool_fu_252_input_r_ce0, grp_dut_max_pool_fu_252_output_r_ce0, grp_dut_pad_fu_264_output_r_ce0, grp_dut_reshape_fu_278_input_r_ce0, ap_sig_cseq_ST_st14_fsm_13, ap_sig_cseq_ST_st47_fsm_46, ap_sig_cseq_ST_st48_fsm_47, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st10_fsm_9, ap_sig_cseq_ST_st6_fsm_5, ap_sig_cseq_ST_st12_fsm_11, ap_sig_cseq_ST_st8_fsm_7)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st47_fsm_46)) then 
            mem_conv2_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13)) then 
            mem_conv2_ce0 <= grp_dut_reshape_fu_278_input_r_ce0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
            mem_conv2_ce0 <= grp_dut_pad_fu_264_output_r_ce0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11)) then 
            mem_conv2_ce0 <= grp_dut_max_pool_fu_252_output_r_ce0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            mem_conv2_ce0 <= grp_dut_max_pool_fu_252_input_r_ce0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            mem_conv2_ce0 <= grp_dut_conv_fu_227_output_r_ce0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then 
            mem_conv2_ce0 <= grp_dut_conv_fu_227_input_r_ce0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st48_fsm_47)) then 
            mem_conv2_ce0 <= grp_dut_dense_fu_217_input_r_ce0;
        else 
            mem_conv2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    mem_conv2_d0_assign_proc : process(tmp_16_reg_528, grp_dut_conv_fu_227_output_r_d0, grp_dut_max_pool_fu_252_output_r_d0, grp_dut_pad_fu_264_output_r_d0, ap_sig_cseq_ST_st47_fsm_46, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st12_fsm_11, ap_sig_cseq_ST_st8_fsm_7)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st47_fsm_46)) then 
            mem_conv2_d0 <= tmp_16_reg_528;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
            mem_conv2_d0 <= grp_dut_pad_fu_264_output_r_d0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11)) then 
            mem_conv2_d0 <= grp_dut_max_pool_fu_252_output_r_d0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            mem_conv2_d0 <= grp_dut_conv_fu_227_output_r_d0;
        else 
            mem_conv2_d0 <= "X";
        end if; 
    end process;


    mem_conv2_we0_assign_proc : process(grp_dut_conv_fu_227_output_r_we0, grp_dut_max_pool_fu_252_output_r_we0, grp_dut_pad_fu_264_output_r_we0, ap_sig_cseq_ST_st47_fsm_46, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st12_fsm_11, ap_sig_cseq_ST_st8_fsm_7)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st47_fsm_46))) then 
            mem_conv2_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
            mem_conv2_we0 <= grp_dut_pad_fu_264_output_r_we0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11)) then 
            mem_conv2_we0 <= grp_dut_max_pool_fu_252_output_r_we0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            mem_conv2_we0 <= grp_dut_conv_fu_227_output_r_we0;
        else 
            mem_conv2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    n_fu_326_p2 <= std_logic_vector(unsigned(n_i_reg_159) + unsigned(ap_const_lv9_1));
    n_i_cast6_fu_316_p1 <= std_logic_vector(resize(unsigned(n_i_reg_159),17));
    notlhs_fu_410_p2 <= "0" when (tmp_12_fu_396_p4 = ap_const_lv8_FF) else "1";
    notrhs_fu_416_p2 <= "1" when (tmp_31_fu_406_p1 = ap_const_lv23_0) else "0";
    tmp1_fu_371_p2 <= (w_fc1_q0 xor ap_const_lv1_1);
    tmp_12_fu_396_p4 <= biased_to_int_fu_392_p1(30 downto 23);
    tmp_14_fu_422_p2 <= (notrhs_fu_416_p2 or notlhs_fu_410_p2);
    tmp_16_fu_428_p2 <= (tmp_14_fu_422_p2 and tmp_15_fu_300_p2);
    tmp_17_i_fu_348_p3 <= (tmp_32_fu_344_p1 & ap_const_lv8_0);
    tmp_18_i_fu_361_p1 <= std_logic_vector(resize(unsigned(m_i_reg_183),64));
    tmp_19_i_fu_366_p1 <= std_logic_vector(resize(unsigned(w_index_fu_356_p2),64));
    tmp_20_i_fu_377_p2 <= (mem_conv1_q0 xor tmp1_fu_371_p2);
    tmp_25_i_fu_387_p1 <= std_logic_vector(resize(unsigned(n_i_reg_159),64));
    tmp_31_fu_406_p1 <= biased_to_int_fu_392_p1(23 - 1 downto 0);
    tmp_32_fu_344_p1 <= m_i_reg_183(9 - 1 downto 0);
    tmp_fu_444_p1 <= std_logic_vector(resize(unsigned(max_id_V_reg_206),64));
    val_assign_agg_result_V_fu_455_p3 <= 
        max_id_V_cast2_reg_533 when (mem_conv1_q0(0) = '1') else 
        agg_result_V_reg_194;
    w_fc1_address0 <= tmp_19_i_fu_366_p1(17 - 1 downto 0);

    w_fc1_ce0_assign_proc : process(ap_sig_cseq_ST_st16_fsm_15)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15)) then 
            w_fc1_ce0 <= ap_const_logic_1;
        else 
            w_fc1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    w_index_fu_356_p2 <= std_logic_vector(unsigned(n_i_cast6_reg_462) + unsigned(tmp_17_i_fu_348_p3));
end behav;
