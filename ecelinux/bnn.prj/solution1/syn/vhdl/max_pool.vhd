-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity max_pool is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    M : IN STD_LOGIC_VECTOR (6 downto 0);
    I : IN STD_LOGIC_VECTOR (5 downto 0) );
end;


architecture behav of max_pool is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv13_1440 : STD_LOGIC_VECTOR (12 downto 0) := "1010001000000";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal O_fu_208_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal O_reg_426 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln109_fu_218_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln109_reg_432 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln113_fu_222_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln113_reg_437 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_fu_232_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln113_1_fu_243_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln113_1_reg_450 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln104_fu_226_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal I_cast_fu_246_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal I_cast_reg_455 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln113_1_fu_249_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln113_1_reg_460 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal m_fu_267_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal m_reg_468 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln113_fu_273_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln113_reg_473 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln106_fu_262_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln107_fu_278_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln107_reg_478 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal x_fu_287_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal x_reg_486 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln113_3_fu_299_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln113_3_reg_491 : STD_LOGIC_VECTOR (12 downto 0);
    signal icmp_ln107_fu_282_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal y_fu_312_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal y_reg_499 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_fu_402_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal o_index_reg_504 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln108_fu_307_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln113_4_fu_333_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln113_4_reg_509 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln111_fu_337_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln111_reg_514 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal c_fu_347_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal c_reg_522 : STD_LOGIC_VECTOR (1 downto 0);
    signal r_fu_367_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal r_reg_530 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp5_fu_379_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp5_reg_535 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln112_fu_361_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal or_ln114_fu_396_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal i_0_reg_105 : STD_LOGIC_VECTOR (12 downto 0);
    signal m_0_reg_116 : STD_LOGIC_VECTOR (5 downto 0);
    signal phi_mul_reg_127 : STD_LOGIC_VECTOR (8 downto 0);
    signal x_0_reg_139 : STD_LOGIC_VECTOR (3 downto 0);
    signal y_0_reg_150 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln111_fu_341_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal max_0_reg_161 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_0_reg_174 : STD_LOGIC_VECTOR (1 downto 0);
    signal max_1_reg_185 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_0_reg_197 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln104_fu_238_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln117_fu_353_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln114_fu_391_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln106_fu_258_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln113_fu_273_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal mul_ln113_fu_273_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal shl_ln113_fu_293_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln108_fu_303_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_318_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln113_1_fu_327_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln112_fu_357_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp1_fu_373_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_408_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal i_index_fu_387_p2 : STD_LOGIC_VECTOR (12 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of i_index_fu_387_p2 : signal is "no";
    signal grp_fu_402_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_402_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_402_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_408_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_408_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_408_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_402_p00 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_408_p10 : STD_LOGIC_VECTOR (12 downto 0);
    signal mul_ln113_fu_273_p10 : STD_LOGIC_VECTOR (7 downto 0);

    component dut_mac_muladd_8neOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (3 downto 0);
        din2 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;


    component dut_mac_muladd_6nfYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (5 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        din2 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (12 downto 0) );
    end component;



begin
    dut_mac_muladd_8neOg_U21 : component dut_mac_muladd_8neOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 4,
        din2_WIDTH => 4,
        dout_WIDTH => 11)
    port map (
        din0 => grp_fu_402_p0,
        din1 => grp_fu_402_p1,
        din2 => grp_fu_402_p2,
        dout => grp_fu_402_p3);

    dut_mac_muladd_6nfYi_U22 : component dut_mac_muladd_6nfYi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 9,
        din2_WIDTH => 4,
        dout_WIDTH => 13)
    port map (
        din0 => grp_fu_408_p0,
        din1 => grp_fu_408_p1,
        din2 => grp_fu_408_p2,
        dout => grp_fu_408_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    c_0_reg_174_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln112_fu_361_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                c_0_reg_174 <= c_reg_522;
            elsif (((icmp_ln108_fu_307_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                c_0_reg_174 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    i_0_reg_105_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln104_fu_226_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_0_reg_105 <= i_fu_232_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_reg_105 <= ap_const_lv13_0;
            end if; 
        end if;
    end process;

    m_0_reg_116_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln107_fu_282_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                m_0_reg_116 <= m_reg_468;
            elsif (((icmp_ln104_fu_226_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                m_0_reg_116 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    max_0_reg_161_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln112_fu_361_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                max_0_reg_161 <= max_1_reg_185;
            elsif (((icmp_ln108_fu_307_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                max_0_reg_161 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    max_1_reg_185_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln111_fu_341_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                max_1_reg_185 <= max_0_reg_161;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                max_1_reg_185 <= or_ln114_fu_396_p2;
            end if; 
        end if;
    end process;

    phi_mul_reg_127_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln107_fu_282_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                phi_mul_reg_127 <= add_ln113_1_reg_460;
            elsif (((icmp_ln104_fu_226_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                phi_mul_reg_127 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    r_0_reg_197_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln111_fu_341_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                r_0_reg_197 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                r_0_reg_197 <= r_reg_530;
            end if; 
        end if;
    end process;

    x_0_reg_139_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln108_fu_307_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                x_0_reg_139 <= x_reg_486;
            elsif (((icmp_ln106_fu_262_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                x_0_reg_139 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    y_0_reg_150_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln107_fu_282_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                y_0_reg_150 <= ap_const_lv4_0;
            elsif (((icmp_ln111_fu_341_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                y_0_reg_150 <= y_reg_499;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln104_fu_226_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    I_cast_reg_455(5 downto 0) <= I_cast_fu_246_p1(5 downto 0);
                    zext_ln113_1_reg_450(5 downto 0) <= zext_ln113_1_fu_243_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                O_reg_426 <= I(4 downto 1);
                    zext_ln109_reg_432(3 downto 0) <= zext_ln109_fu_218_p1(3 downto 0);
                    zext_ln113_reg_437(3 downto 0) <= zext_ln113_fu_222_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                add_ln113_1_reg_460 <= add_ln113_1_fu_249_p2;
                m_reg_468 <= m_fu_267_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                c_reg_522 <= c_fu_347_p2;
                    zext_ln111_reg_514(1 downto 0) <= zext_ln111_fu_337_p1(1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln106_fu_262_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                mul_ln113_reg_473 <= mul_ln113_fu_273_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln108_fu_307_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                o_index_reg_504 <= grp_fu_402_p3;
                    zext_ln113_4_reg_509(3 downto 1) <= zext_ln113_4_fu_333_p1(3 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                r_reg_530 <= r_fu_367_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln112_fu_361_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                tmp5_reg_535 <= tmp5_fu_379_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                x_reg_486 <= x_fu_287_p2;
                    zext_ln107_reg_478(3 downto 0) <= zext_ln107_fu_278_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                y_reg_499 <= y_fu_312_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln107_fu_282_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    zext_ln113_3_reg_491(3 downto 1) <= zext_ln113_3_fu_299_p1(3 downto 1);
            end if;
        end if;
    end process;
    zext_ln109_reg_432(10 downto 4) <= "0000000";
    zext_ln113_reg_437(7 downto 4) <= "0000";
    zext_ln113_1_reg_450(8 downto 6) <= "000";
    I_cast_reg_455(12 downto 6) <= "0000000";
    zext_ln107_reg_478(10 downto 4) <= "0000000";
    zext_ln113_3_reg_491(0) <= '0';
    zext_ln113_3_reg_491(12 downto 4) <= "000000000";
    zext_ln113_4_reg_509(0) <= '0';
    zext_ln113_4_reg_509(8 downto 4) <= "00000";
    zext_ln111_reg_514(12 downto 2) <= "00000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln104_fu_226_p2, ap_CS_fsm_state3, icmp_ln106_fu_262_p2, ap_CS_fsm_state4, icmp_ln107_fu_282_p2, ap_CS_fsm_state5, icmp_ln108_fu_307_p2, ap_CS_fsm_state6, ap_CS_fsm_state7, icmp_ln112_fu_361_p2, icmp_ln111_fu_341_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln104_fu_226_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln106_fu_262_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln107_fu_282_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((icmp_ln108_fu_307_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                if (((icmp_ln111_fu_341_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                if (((icmp_ln112_fu_361_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;
    I_cast_fu_246_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(I),13));
    O_fu_208_p4 <= I(4 downto 1);
    add_ln113_1_fu_249_p2 <= std_logic_vector(unsigned(phi_mul_reg_127) + unsigned(zext_ln113_1_reg_450));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state3, icmp_ln106_fu_262_p2)
    begin
        if ((((icmp_ln106_fu_262_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state3, icmp_ln106_fu_262_p2)
    begin
        if (((icmp_ln106_fu_262_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    c_fu_347_p2 <= std_logic_vector(unsigned(c_0_reg_174) + unsigned(ap_const_lv2_1));
    grp_fu_402_p0 <= grp_fu_402_p00(8 - 1 downto 0);
    grp_fu_402_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_318_p2),11));
    grp_fu_402_p1 <= zext_ln109_reg_432(4 - 1 downto 0);
    grp_fu_402_p2 <= zext_ln107_reg_478(4 - 1 downto 0);
    grp_fu_408_p0 <= I_cast_reg_455(6 - 1 downto 0);
    grp_fu_408_p1 <= grp_fu_408_p10(9 - 1 downto 0);
    grp_fu_408_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp5_reg_535),13));
    grp_fu_408_p2 <= zext_ln113_3_reg_491(4 - 1 downto 0);
    i_fu_232_p2 <= std_logic_vector(unsigned(i_0_reg_105) + unsigned(ap_const_lv13_1));
    i_index_fu_387_p2 <= std_logic_vector(unsigned(zext_ln111_reg_514) + unsigned(grp_fu_408_p3));
    icmp_ln104_fu_226_p2 <= "1" when (i_0_reg_105 = ap_const_lv13_1440) else "0";
    icmp_ln106_fu_262_p2 <= "1" when (signed(zext_ln106_fu_258_p1) < signed(M)) else "0";
    icmp_ln107_fu_282_p2 <= "1" when (x_0_reg_139 = O_reg_426) else "0";
    icmp_ln108_fu_307_p2 <= "1" when (y_0_reg_150 = O_reg_426) else "0";
    icmp_ln111_fu_341_p2 <= "1" when (c_0_reg_174 = ap_const_lv2_2) else "0";
    icmp_ln112_fu_361_p2 <= "1" when (r_0_reg_197 = ap_const_lv2_2) else "0";
    input_r_address0 <= zext_ln114_fu_391_p1(13 - 1 downto 0);

    input_r_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    m_fu_267_p2 <= std_logic_vector(unsigned(m_0_reg_116) + unsigned(ap_const_lv6_1));
    mul_ln113_fu_273_p0 <= zext_ln113_reg_437(4 - 1 downto 0);
    mul_ln113_fu_273_p1 <= mul_ln113_fu_273_p10(6 - 1 downto 0);
    mul_ln113_fu_273_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_0_reg_116),8));
    mul_ln113_fu_273_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln113_fu_273_p0) * unsigned(mul_ln113_fu_273_p1), 8));
    or_ln114_fu_396_p2 <= (max_1_reg_185 or input_r_q0);

    output_r_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state6, zext_ln104_fu_238_p1, zext_ln117_fu_353_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            output_r_address0 <= zext_ln117_fu_353_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            output_r_address0 <= zext_ln104_fu_238_p1(13 - 1 downto 0);
        else 
            output_r_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    output_r_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_r_d0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state6, max_0_reg_161)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            output_r_d0 <= max_0_reg_161;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            output_r_d0 <= ap_const_lv1_0;
        else 
            output_r_d0 <= "X";
        end if; 
    end process;


    output_r_we0_assign_proc : process(ap_CS_fsm_state2, icmp_ln104_fu_226_p2, ap_CS_fsm_state6, icmp_ln111_fu_341_p2)
    begin
        if ((((icmp_ln104_fu_226_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((icmp_ln111_fu_341_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6)))) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    r_fu_367_p2 <= std_logic_vector(unsigned(r_0_reg_197) + unsigned(ap_const_lv2_1));
    shl_ln113_1_fu_327_p2 <= std_logic_vector(shift_left(unsigned(y_0_reg_150),to_integer(unsigned('0' & ap_const_lv4_1(4-1 downto 0)))));
    shl_ln113_fu_293_p2 <= std_logic_vector(shift_left(unsigned(x_0_reg_139),to_integer(unsigned('0' & ap_const_lv4_1(4-1 downto 0)))));
    tmp1_fu_373_p2 <= std_logic_vector(unsigned(zext_ln112_fu_357_p1) + unsigned(phi_mul_reg_127));
    tmp5_fu_379_p2 <= std_logic_vector(unsigned(zext_ln113_4_reg_509) + unsigned(tmp1_fu_373_p2));
    tmp_fu_318_p2 <= std_logic_vector(unsigned(zext_ln108_fu_303_p1) + unsigned(mul_ln113_reg_473));
    x_fu_287_p2 <= std_logic_vector(unsigned(x_0_reg_139) + unsigned(ap_const_lv4_1));
    y_fu_312_p2 <= std_logic_vector(unsigned(y_0_reg_150) + unsigned(ap_const_lv4_1));
    zext_ln104_fu_238_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_105),64));
    zext_ln106_fu_258_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_0_reg_116),7));
    zext_ln107_fu_278_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_0_reg_139),11));
    zext_ln108_fu_303_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_0_reg_150),8));
    zext_ln109_fu_218_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(O_fu_208_p4),11));
    zext_ln111_fu_337_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_0_reg_174),13));
    zext_ln112_fu_357_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_0_reg_197),9));
    zext_ln113_1_fu_243_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(I),9));
    zext_ln113_3_fu_299_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln113_fu_293_p2),13));
    zext_ln113_4_fu_333_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln113_1_fu_327_p2),9));
    zext_ln113_fu_222_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(O_fu_208_p4),8));
    zext_ln114_fu_391_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_index_fu_387_p2),64));
    zext_ln117_fu_353_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(o_index_reg_504),64));
end behav;
