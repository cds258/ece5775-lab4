-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    threshold_V_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    threshold_V_ce0 : OUT STD_LOGIC;
    threshold_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    M : IN STD_LOGIC_VECTOR (6 downto 0);
    N : IN STD_LOGIC_VECTOR (6 downto 0);
    I : IN STD_LOGIC_VECTOR (5 downto 0);
    L : IN STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of conv is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (10 downto 0) := "00000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (10 downto 0) := "00000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (10 downto 0) := "00001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (10 downto 0) := "00010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (10 downto 0) := "00100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv5_1E : STD_LOGIC_VECTOR (4 downto 0) := "11110";
    constant ap_const_lv5_1F : STD_LOGIC_VECTOR (4 downto 0) := "11111";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal w_conv1_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal w_conv1_ce0 : STD_LOGIC;
    signal w_conv1_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal w_conv2_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal w_conv2_ce0 : STD_LOGIC;
    signal w_conv2_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal L_read_read_fu_90_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal O_fu_334_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal O_reg_752 : STD_LOGIC_VECTOR (4 downto 0);
    signal O_cast21_cast_fu_340_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal O_cast21_cast_reg_758 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln68_fu_344_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln68_reg_763 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln16_fu_348_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln16_reg_768 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln69_fu_354_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln69_reg_774 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln75_fu_358_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln75_reg_779 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln76_fu_362_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln76_reg_784 : STD_LOGIC_VECTOR (8 downto 0);
    signal I_cast_fu_366_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal I_cast_reg_789 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln64_fu_370_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln64_reg_794 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal n_fu_383_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal n_reg_802 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln68_fu_389_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln68_reg_807 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln64_fu_378_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln65_fu_394_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln65_reg_812 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal x_fu_403_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal x_reg_820 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln66_fu_409_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln66_reg_825 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal y_fu_418_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal y_reg_833 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_729_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal o_index_reg_838 : STD_LOGIC_VECTOR (12 downto 0);
    signal icmp_ln66_fu_413_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln76_3_fu_433_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln76_3_reg_843 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal add_ln76_4_fu_438_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln76_4_reg_848 : STD_LOGIC_VECTOR (8 downto 0);
    signal m_fu_452_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal m_reg_856 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln76_3_fu_485_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln76_3_reg_861 : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln69_fu_447_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln85_fu_489_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln85_reg_866 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln72_fu_493_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln72_reg_876 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal c_fu_503_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal c_reg_884 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln74_fu_515_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln74_reg_889 : STD_LOGIC_VECTOR (12 downto 0);
    signal icmp_ln72_fu_497_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_fu_519_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_reg_894 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_1_fu_525_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_1_reg_899 : STD_LOGIC_VECTOR (0 downto 0);
    signal sum_fu_542_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_fu_562_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal r_reg_912 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp31_fu_602_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp31_reg_917 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln73_fu_556_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln16_fu_657_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln16_reg_932 : STD_LOGIC_VECTOR (0 downto 0);
    signal mac_num_2_fu_662_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal mac_num_2_reg_937 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal w_conv1_load_reg_947 : STD_LOGIC_VECTOR (0 downto 0);
    signal w_conv2_load_reg_952 : STD_LOGIC_VECTOR (0 downto 0);
    signal one_out_2_fu_704_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal icmp_ln1494_fu_723_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1494_reg_962 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal n_0_reg_179 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln65_fu_398_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_0_reg_190 : STD_LOGIC_VECTOR (4 downto 0);
    signal y_0_reg_202 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal p_Val2_s_reg_214 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_0_reg_226 : STD_LOGIC_VECTOR (4 downto 0);
    signal phi_mul_reg_237 : STD_LOGIC_VECTOR (8 downto 0);
    signal phi_mul2_reg_249 : STD_LOGIC_VECTOR (8 downto 0);
    signal one_out_0_reg_260 : STD_LOGIC_VECTOR (31 downto 0);
    signal mac_num_0_reg_272 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_0_reg_284 : STD_LOGIC_VECTOR (1 downto 0);
    signal one_out_1_reg_295 : STD_LOGIC_VECTOR (31 downto 0);
    signal mac_num_1_reg_307 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_0_reg_319 : STD_LOGIC_VECTOR (1 downto 0);
    signal sext_ln77_fu_639_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln77_fu_673_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln59_fu_330_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln64_1_fu_374_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln68_fu_389_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln68_fu_389_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp29_fu_424_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln69_fu_443_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln76_fu_458_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal shl_ln_fu_467_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln76_2_fu_475_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln76_1_fu_463_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln76_1_fu_479_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln74_fu_509_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln83_fu_536_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln83_fu_530_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln73_1_fu_552_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln74_1_fu_568_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln16_3_fu_580_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln16_fu_585_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_2_fu_574_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln73_fu_548_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp7_fu_596_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal shl_ln76_1_fu_607_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln76_4_fu_615_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln76_fu_619_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln76_2_fu_625_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal sext_ln76_fu_630_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal w_index_fu_634_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal and_ln16_1_fu_590_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln16_fu_651_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mac_num_fu_645_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_735_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal select_ln77_fu_677_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln78_fu_682_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln78_1_fu_688_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln78_fu_694_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal one_out_fu_698_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln1_fu_711_p3 : STD_LOGIC_VECTOR (33 downto 0);
    signal sext_ln1494_fu_719_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal grp_fu_729_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_729_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_729_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_735_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_735_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_735_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_729_p00 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_735_p00 : STD_LOGIC_VECTOR (12 downto 0);
    signal mul_ln68_fu_389_p00 : STD_LOGIC_VECTOR (8 downto 0);

    component dut_mac_muladd_9ncud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (4 downto 0);
        din2 : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (12 downto 0) );
    end component;


    component dut_mac_muladd_9ndEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (5 downto 0);
        din2 : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (12 downto 0) );
    end component;


    component conv_w_conv1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component conv_w_conv2 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    w_conv1_U : component conv_w_conv1
    generic map (
        DataWidth => 1,
        AddressRange => 4608,
        AddressWidth => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => w_conv1_address0,
        ce0 => w_conv1_ce0,
        q0 => w_conv1_q0);

    w_conv2_U : component conv_w_conv2
    generic map (
        DataWidth => 1,
        AddressRange => 4608,
        AddressWidth => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => w_conv2_address0,
        ce0 => w_conv2_ce0,
        q0 => w_conv2_q0);

    dut_mac_muladd_9ncud_U9 : component dut_mac_muladd_9ncud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 5,
        din2_WIDTH => 5,
        dout_WIDTH => 13)
    port map (
        din0 => grp_fu_729_p0,
        din1 => grp_fu_729_p1,
        din2 => grp_fu_729_p2,
        dout => grp_fu_729_p3);

    dut_mac_muladd_9ndEe_U10 : component dut_mac_muladd_9ndEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 6,
        din2_WIDTH => 5,
        dout_WIDTH => 13)
    port map (
        din0 => grp_fu_735_p0,
        din1 => grp_fu_735_p1,
        din2 => grp_fu_735_p2,
        dout => grp_fu_735_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    c_0_reg_284_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln73_fu_556_p2 = ap_const_lv1_1))) then 
                c_0_reg_284 <= c_reg_884;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln69_fu_447_p2 = ap_const_lv1_1))) then 
                c_0_reg_284 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    m_0_reg_226_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln72_fu_497_p2 = ap_const_lv1_1))) then 
                m_0_reg_226 <= m_reg_856;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln66_fu_413_p2 = ap_const_lv1_0))) then 
                m_0_reg_226 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    mac_num_0_reg_272_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln73_fu_556_p2 = ap_const_lv1_1))) then 
                mac_num_0_reg_272 <= mac_num_1_reg_307;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln69_fu_447_p2 = ap_const_lv1_1))) then 
                mac_num_0_reg_272 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    mac_num_1_reg_307_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                mac_num_1_reg_307 <= mac_num_2_reg_937;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln72_fu_497_p2 = ap_const_lv1_0))) then 
                mac_num_1_reg_307 <= mac_num_0_reg_272;
            end if; 
        end if;
    end process;

    n_0_reg_179_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln65_fu_398_p2 = ap_const_lv1_1))) then 
                n_0_reg_179 <= n_reg_802;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                n_0_reg_179 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    one_out_0_reg_260_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln73_fu_556_p2 = ap_const_lv1_1))) then 
                one_out_0_reg_260 <= one_out_1_reg_295;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln69_fu_447_p2 = ap_const_lv1_1))) then 
                one_out_0_reg_260 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    one_out_1_reg_295_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                one_out_1_reg_295 <= one_out_2_fu_704_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln72_fu_497_p2 = ap_const_lv1_0))) then 
                one_out_1_reg_295 <= one_out_0_reg_260;
            end if; 
        end if;
    end process;

    p_Val2_s_reg_214_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln72_fu_497_p2 = ap_const_lv1_1))) then 
                p_Val2_s_reg_214 <= sum_fu_542_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln66_fu_413_p2 = ap_const_lv1_0))) then 
                p_Val2_s_reg_214 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    phi_mul2_reg_249_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln72_fu_497_p2 = ap_const_lv1_1))) then 
                phi_mul2_reg_249 <= add_ln76_3_reg_843;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln66_fu_413_p2 = ap_const_lv1_0))) then 
                phi_mul2_reg_249 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_237_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln72_fu_497_p2 = ap_const_lv1_1))) then 
                phi_mul_reg_237 <= add_ln76_4_reg_848;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln66_fu_413_p2 = ap_const_lv1_0))) then 
                phi_mul_reg_237 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    r_0_reg_319_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                r_0_reg_319 <= r_reg_912;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln72_fu_497_p2 = ap_const_lv1_0))) then 
                r_0_reg_319 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    x_0_reg_190_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln66_fu_413_p2 = ap_const_lv1_1))) then 
                x_0_reg_190 <= x_reg_820;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln64_fu_378_p2 = ap_const_lv1_1))) then 
                x_0_reg_190 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    y_0_reg_202_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                y_0_reg_202 <= y_reg_833;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln65_fu_398_p2 = ap_const_lv1_0))) then 
                y_0_reg_202 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    I_cast_reg_789(5 downto 0) <= I_cast_fu_366_p1(5 downto 0);
                    O_cast21_cast_reg_758(4 downto 0) <= O_cast21_cast_fu_340_p1(4 downto 0);
                O_reg_752 <= O_fu_334_p2;
                add_ln16_reg_768 <= add_ln16_fu_348_p2;
                trunc_ln69_reg_774 <= trunc_ln69_fu_354_p1;
                    zext_ln68_reg_763(4 downto 0) <= zext_ln68_fu_344_p1(4 downto 0);
                    zext_ln75_reg_779(5 downto 0) <= zext_ln75_fu_358_p1(5 downto 0);
                    zext_ln76_reg_784(6 downto 0) <= zext_ln76_fu_362_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                add_ln76_3_reg_843 <= add_ln76_3_fu_433_p2;
                add_ln76_4_reg_848 <= add_ln76_4_fu_438_p2;
                m_reg_856 <= m_fu_452_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                c_reg_884 <= c_fu_503_p2;
                    zext_ln72_reg_876(1 downto 0) <= zext_ln72_fu_493_p1(1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                icmp_ln1494_reg_962 <= icmp_ln1494_fu_723_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln72_fu_497_p2 = ap_const_lv1_0))) then
                icmp_ln16_1_reg_899 <= icmp_ln16_1_fu_525_p2;
                icmp_ln16_reg_894 <= icmp_ln16_fu_519_p2;
                    zext_ln74_reg_889(4 downto 0) <= zext_ln74_fu_515_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln73_fu_556_p2 = ap_const_lv1_0))) then
                mac_num_2_reg_937 <= mac_num_2_fu_662_p3;
                or_ln16_reg_932 <= or_ln16_fu_657_p2;
                tmp31_reg_917 <= tmp31_fu_602_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln64_fu_378_p2 = ap_const_lv1_1))) then
                mul_ln68_reg_807 <= mul_ln68_fu_389_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                n_reg_802 <= n_fu_383_p2;
                    zext_ln64_reg_794(5 downto 0) <= zext_ln64_fu_370_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln66_fu_413_p2 = ap_const_lv1_0))) then
                o_index_reg_838 <= grp_fu_729_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                r_reg_912 <= r_fu_562_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = L_read_read_fu_90_p2) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                w_conv1_load_reg_947 <= w_conv1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = L_read_read_fu_90_p2) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                w_conv2_load_reg_952 <= w_conv2_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                x_reg_820 <= x_fu_403_p2;
                    zext_ln65_reg_812(4 downto 0) <= zext_ln65_fu_394_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                y_reg_833 <= y_fu_418_p2;
                    zext_ln66_reg_825(4 downto 0) <= zext_ln66_fu_409_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln69_fu_447_p2 = ap_const_lv1_1))) then
                    zext_ln76_3_reg_861(12 downto 0) <= zext_ln76_3_fu_485_p1(12 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln69_fu_447_p2 = ap_const_lv1_0))) then
                    zext_ln85_reg_866(12 downto 0) <= zext_ln85_fu_489_p1(12 downto 0);
            end if;
        end if;
    end process;
    O_cast21_cast_reg_758(12 downto 5) <= "00000000";
    zext_ln68_reg_763(8 downto 5) <= "0000";
    zext_ln75_reg_779(8 downto 6) <= "000";
    zext_ln76_reg_784(8 downto 7) <= "00";
    I_cast_reg_789(12 downto 6) <= "0000000";
    zext_ln64_reg_794(8 downto 6) <= "000";
    zext_ln65_reg_812(12 downto 5) <= "00000000";
    zext_ln66_reg_825(8 downto 5) <= "0000";
    zext_ln76_3_reg_861(13) <= '0';
    zext_ln85_reg_866(63 downto 13) <= "000000000000000000000000000000000000000000000000000";
    zext_ln72_reg_876(4 downto 2) <= "000";
    zext_ln74_reg_889(12 downto 5) <= "00000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln64_fu_378_p2, ap_CS_fsm_state3, ap_CS_fsm_state4, icmp_ln66_fu_413_p2, ap_CS_fsm_state5, icmp_ln69_fu_447_p2, ap_CS_fsm_state6, icmp_ln72_fu_497_p2, ap_CS_fsm_state7, icmp_ln73_fu_556_p2, icmp_ln65_fu_398_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln64_fu_378_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln65_fu_398_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln66_fu_413_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln69_fu_447_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln72_fu_497_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln73_fu_556_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXX";
        end case;
    end process;
    I_cast_fu_366_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(I),13));
    L_read_read_fu_90_p2 <= L;
    O_cast21_cast_fu_340_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(O_fu_334_p2),13));
    O_fu_334_p2 <= std_logic_vector(signed(ap_const_lv5_1E) + signed(trunc_ln59_fu_330_p1));
    add_ln16_fu_348_p2 <= std_logic_vector(signed(ap_const_lv5_1F) + signed(trunc_ln59_fu_330_p1));
    add_ln74_1_fu_568_p2 <= std_logic_vector(unsigned(zext_ln73_1_fu_552_p1) + unsigned(y_0_reg_202));
    add_ln74_fu_509_p2 <= std_logic_vector(unsigned(zext_ln72_fu_493_p1) + unsigned(x_0_reg_190));
    add_ln76_1_fu_479_p2 <= std_logic_vector(unsigned(zext_ln76_2_fu_475_p1) + unsigned(zext_ln76_1_fu_463_p1));
    add_ln76_2_fu_625_p2 <= std_logic_vector(unsigned(zext_ln72_reg_876) + unsigned(sub_ln76_fu_619_p2));
    add_ln76_3_fu_433_p2 <= std_logic_vector(unsigned(phi_mul2_reg_249) + unsigned(zext_ln76_reg_784));
    add_ln76_4_fu_438_p2 <= std_logic_vector(unsigned(phi_mul_reg_237) + unsigned(zext_ln75_reg_779));
    add_ln76_fu_458_p2 <= std_logic_vector(unsigned(zext_ln64_reg_794) + unsigned(phi_mul2_reg_249));
    and_ln16_1_fu_590_p2 <= (icmp_ln16_2_fu_574_p2 and and_ln16_fu_585_p2);
    and_ln16_fu_585_p2 <= (icmp_ln16_3_fu_580_p2 and icmp_ln16_1_reg_899);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln64_fu_378_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln64_fu_378_p2 = ap_const_lv1_0)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln64_fu_378_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln64_fu_378_p2 = ap_const_lv1_0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    c_fu_503_p2 <= std_logic_vector(unsigned(c_0_reg_284) + unsigned(ap_const_lv2_1));
    grp_fu_729_p0 <= grp_fu_729_p00(9 - 1 downto 0);
    grp_fu_729_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp29_fu_424_p2),13));
    grp_fu_729_p1 <= O_cast21_cast_reg_758(5 - 1 downto 0);
    grp_fu_729_p2 <= zext_ln65_reg_812(5 - 1 downto 0);
    grp_fu_735_p0 <= grp_fu_735_p00(9 - 1 downto 0);
    grp_fu_735_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp31_reg_917),13));
    grp_fu_735_p1 <= I_cast_reg_789(6 - 1 downto 0);
    grp_fu_735_p2 <= zext_ln74_reg_889(5 - 1 downto 0);
    icmp_ln1494_fu_723_p2 <= "1" when (signed(shl_ln1_fu_711_p3) > signed(sext_ln1494_fu_719_p1)) else "0";
    icmp_ln16_1_fu_525_p2 <= "1" when (unsigned(add_ln16_reg_768) > unsigned(add_ln74_fu_509_p2)) else "0";
    icmp_ln16_2_fu_574_p2 <= "0" when (add_ln74_1_fu_568_p2 = ap_const_lv5_0) else "1";
    icmp_ln16_3_fu_580_p2 <= "1" when (unsigned(add_ln16_reg_768) > unsigned(add_ln74_1_fu_568_p2)) else "0";
    icmp_ln16_fu_519_p2 <= "1" when (add_ln74_fu_509_p2 = ap_const_lv5_0) else "0";
    icmp_ln64_fu_378_p2 <= "1" when (signed(zext_ln64_1_fu_374_p1) < signed(N)) else "0";
    icmp_ln65_fu_398_p2 <= "1" when (x_0_reg_190 = O_reg_752) else "0";
    icmp_ln66_fu_413_p2 <= "1" when (y_0_reg_202 = O_reg_752) else "0";
    icmp_ln69_fu_447_p2 <= "1" when (signed(zext_ln69_fu_443_p1) < signed(trunc_ln69_reg_774)) else "0";
    icmp_ln72_fu_497_p2 <= "1" when (c_0_reg_284 = ap_const_lv2_3) else "0";
    icmp_ln73_fu_556_p2 <= "1" when (r_0_reg_319 = ap_const_lv2_3) else "0";
    input_r_address0 <= zext_ln77_fu_673_p1(13 - 1 downto 0);

    input_r_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    m_fu_452_p2 <= std_logic_vector(unsigned(m_0_reg_226) + unsigned(ap_const_lv5_1));
    mac_num_2_fu_662_p3 <= 
        mac_num_1_reg_307 when (or_ln16_fu_657_p2(0) = '1') else 
        mac_num_fu_645_p2;
    mac_num_fu_645_p2 <= std_logic_vector(unsigned(mac_num_1_reg_307) + unsigned(ap_const_lv32_1));
    mul_ln68_fu_389_p0 <= mul_ln68_fu_389_p00(6 - 1 downto 0);
    mul_ln68_fu_389_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n_0_reg_179),9));
    mul_ln68_fu_389_p1 <= zext_ln68_reg_763(5 - 1 downto 0);
    mul_ln68_fu_389_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln68_fu_389_p0) * unsigned(mul_ln68_fu_389_p1), 9));
    n_fu_383_p2 <= std_logic_vector(unsigned(n_0_reg_179) + unsigned(ap_const_lv6_1));
    one_out_2_fu_704_p3 <= 
        one_out_1_reg_295 when (or_ln16_reg_932(0) = '1') else 
        one_out_fu_698_p2;
    one_out_fu_698_p2 <= std_logic_vector(unsigned(one_out_1_reg_295) + unsigned(zext_ln78_fu_694_p1));
    or_ln16_fu_657_p2 <= (xor_ln16_fu_651_p2 or icmp_ln16_reg_894);
    output_r_address0 <= zext_ln85_reg_866(13 - 1 downto 0);

    output_r_ce0_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_r_d0 <= icmp_ln1494_reg_962;

    output_r_we0_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    r_fu_562_p2 <= std_logic_vector(unsigned(r_0_reg_319) + unsigned(ap_const_lv2_1));
    select_ln77_fu_677_p3 <= 
        w_conv2_load_reg_952 when (L(0) = '1') else 
        w_conv1_load_reg_947;
        sext_ln1494_fu_719_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(threshold_V_q0),34));

        sext_ln76_fu_630_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln76_2_fu_625_p2),14));

        sext_ln77_fu_639_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(w_index_fu_634_p2),64));

    shl_ln1_fu_711_p3 <= (p_Val2_s_reg_214 & ap_const_lv2_0);
    shl_ln76_1_fu_607_p3 <= (r_0_reg_319 & ap_const_lv2_0);
    shl_ln83_fu_530_p2 <= std_logic_vector(shift_left(unsigned(one_out_0_reg_260),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
    shl_ln_fu_467_p3 <= (add_ln76_fu_458_p2 & ap_const_lv3_0);
    sub_ln76_fu_619_p2 <= std_logic_vector(unsigned(zext_ln76_4_fu_615_p1) - unsigned(zext_ln73_1_fu_552_p1));
    sub_ln83_fu_536_p2 <= std_logic_vector(unsigned(p_Val2_s_reg_214) - unsigned(mac_num_0_reg_272));
    sum_fu_542_p2 <= std_logic_vector(unsigned(sub_ln83_fu_536_p2) + unsigned(shl_ln83_fu_530_p2));
    threshold_V_address0 <= zext_ln85_fu_489_p1(13 - 1 downto 0);

    threshold_V_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            threshold_V_ce0 <= ap_const_logic_1;
        else 
            threshold_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp29_fu_424_p2 <= std_logic_vector(unsigned(zext_ln66_fu_409_p1) + unsigned(mul_ln68_reg_807));
    tmp31_fu_602_p2 <= std_logic_vector(unsigned(tmp7_fu_596_p2) + unsigned(zext_ln66_reg_825));
    tmp7_fu_596_p2 <= std_logic_vector(unsigned(phi_mul_reg_237) + unsigned(zext_ln73_fu_548_p1));
    trunc_ln59_fu_330_p1 <= I(5 - 1 downto 0);
    trunc_ln69_fu_354_p1 <= M(6 - 1 downto 0);
    w_conv1_address0 <= sext_ln77_fu_639_p1(13 - 1 downto 0);

    w_conv1_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            w_conv1_ce0 <= ap_const_logic_1;
        else 
            w_conv1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    w_conv2_address0 <= sext_ln77_fu_639_p1(13 - 1 downto 0);

    w_conv2_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            w_conv2_ce0 <= ap_const_logic_1;
        else 
            w_conv2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    w_index_fu_634_p2 <= std_logic_vector(signed(sext_ln76_fu_630_p1) + signed(zext_ln76_3_reg_861));
    x_fu_403_p2 <= std_logic_vector(unsigned(x_0_reg_190) + unsigned(ap_const_lv5_1));
    xor_ln16_fu_651_p2 <= (ap_const_lv1_1 xor and_ln16_1_fu_590_p2);
    xor_ln78_1_fu_688_p2 <= (xor_ln78_fu_682_p2 xor input_r_q0);
    xor_ln78_fu_682_p2 <= (select_ln77_fu_677_p3 xor ap_const_lv1_1);
    y_fu_418_p2 <= std_logic_vector(unsigned(y_0_reg_202) + unsigned(ap_const_lv5_1));
    zext_ln64_1_fu_374_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n_0_reg_179),7));
    zext_ln64_fu_370_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n_0_reg_179),9));
    zext_ln65_fu_394_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_0_reg_190),13));
    zext_ln66_fu_409_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_0_reg_202),9));
    zext_ln68_fu_344_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(O_fu_334_p2),9));
    zext_ln69_fu_443_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_0_reg_226),6));
    zext_ln72_fu_493_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_0_reg_284),5));
    zext_ln73_1_fu_552_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_0_reg_319),5));
    zext_ln73_fu_548_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_0_reg_319),9));
    zext_ln74_fu_515_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln74_fu_509_p2),13));
    zext_ln75_fu_358_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(I),9));
    zext_ln76_1_fu_463_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln76_fu_458_p2),13));
    zext_ln76_2_fu_475_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_467_p3),13));
    zext_ln76_3_fu_485_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln76_1_fu_479_p2),14));
    zext_ln76_4_fu_615_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln76_1_fu_607_p3),5));
    zext_ln76_fu_362_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(N),9));
    zext_ln77_fu_673_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_735_p3),64));
    zext_ln78_fu_694_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln78_1_fu_688_p2),32));
    zext_ln85_fu_489_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(o_index_reg_838),64));
end behav;
