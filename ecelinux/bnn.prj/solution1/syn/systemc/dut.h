// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _dut_HH_
#define _dut_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "bnn_xcel.h"
#include "bnn_xcel_mem_conv1.h"

namespace ap_rtl {

struct dut : public sc_module {
    // Port declarations 12
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<32> > strm_in_V_V_dout;
    sc_in< sc_logic > strm_in_V_V_empty_n;
    sc_out< sc_logic > strm_in_V_V_read;
    sc_out< sc_lv<32> > strm_out_V_V_din;
    sc_in< sc_logic > strm_out_V_V_full_n;
    sc_out< sc_logic > strm_out_V_V_write;


    // Module declarations
    dut(sc_module_name name);
    SC_HAS_PROCESS(dut);

    ~dut();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    bnn_xcel_mem_conv1* input_U;
    bnn_xcel* grp_bnn_xcel_fu_145;
    sc_signal< sc_lv<4> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > strm_in_V_V_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<1> > icmp_ln29_fu_167_p2;
    sc_signal< sc_logic > strm_out_V_V_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<4> > i_fu_173_p2;
    sc_signal< sc_lv<4> > i_reg_232;
    sc_signal< bool > ap_block_state2;
    sc_signal< sc_lv<32> > tmp_V_2_reg_237;
    sc_signal< sc_lv<8> > shl_ln_fu_183_p3;
    sc_signal< sc_lv<8> > shl_ln_reg_242;
    sc_signal< sc_lv<6> > j_fu_205_p2;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<13> > input_address0;
    sc_signal< sc_logic > input_ce0;
    sc_signal< sc_logic > input_we0;
    sc_signal< sc_lv<1> > input_d0;
    sc_signal< sc_lv<1> > input_q0;
    sc_signal< sc_logic > grp_bnn_xcel_fu_145_ap_start;
    sc_signal< sc_logic > grp_bnn_xcel_fu_145_ap_done;
    sc_signal< sc_logic > grp_bnn_xcel_fu_145_ap_idle;
    sc_signal< sc_logic > grp_bnn_xcel_fu_145_ap_ready;
    sc_signal< sc_lv<13> > grp_bnn_xcel_fu_145_input_r_address0;
    sc_signal< sc_logic > grp_bnn_xcel_fu_145_input_r_ce0;
    sc_signal< sc_lv<32> > grp_bnn_xcel_fu_145_ap_return;
    sc_signal< sc_lv<4> > i_0_reg_123;
    sc_signal< sc_lv<1> > icmp_ln31_fu_199_p2;
    sc_signal< sc_lv<6> > Hi_assign_reg_134;
    sc_signal< sc_logic > grp_bnn_xcel_fu_145_ap_start_reg;
    sc_signal< bool > ap_block_state2_ignore_call0;
    sc_signal< sc_lv<64> > zext_ln32_fu_224_p1;
    sc_signal< sc_lv<3> > trunc_ln32_fu_179_p1;
    sc_signal< sc_lv<32> > zext_ln31_1_fu_195_p1;
    sc_signal< sc_lv<8> > zext_ln31_fu_191_p1;
    sc_signal< sc_lv<8> > add_ln32_fu_219_p2;
    sc_signal< sc_lv<4> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<4> ap_ST_fsm_state1;
    static const sc_lv<4> ap_ST_fsm_state2;
    static const sc_lv<4> ap_ST_fsm_state3;
    static const sc_lv<4> ap_ST_fsm_state4;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<6> ap_const_lv6_0;
    static const sc_lv<4> ap_const_lv4_8;
    static const sc_lv<4> ap_const_lv4_1;
    static const sc_lv<5> ap_const_lv5_0;
    static const sc_lv<6> ap_const_lv6_20;
    static const sc_lv<6> ap_const_lv6_1;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln32_fu_219_p2();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_block_state2();
    void thread_ap_block_state2_ignore_call0();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_grp_bnn_xcel_fu_145_ap_start();
    void thread_i_fu_173_p2();
    void thread_icmp_ln29_fu_167_p2();
    void thread_icmp_ln31_fu_199_p2();
    void thread_input_address0();
    void thread_input_ce0();
    void thread_input_d0();
    void thread_input_we0();
    void thread_j_fu_205_p2();
    void thread_shl_ln_fu_183_p3();
    void thread_strm_in_V_V_blk_n();
    void thread_strm_in_V_V_read();
    void thread_strm_out_V_V_blk_n();
    void thread_strm_out_V_V_din();
    void thread_strm_out_V_V_write();
    void thread_trunc_ln32_fu_179_p1();
    void thread_zext_ln31_1_fu_195_p1();
    void thread_zext_ln31_fu_191_p1();
    void thread_zext_ln32_fu_224_p1();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
