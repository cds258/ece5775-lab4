// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.2
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _dut_reshape_HH_
#define _dut_reshape_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct dut_reshape : public sc_module {
    // Port declarations 13
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<13> > input_r_address0;
    sc_out< sc_logic > input_r_ce0;
    sc_in< sc_lv<1> > input_r_q0;
    sc_out< sc_lv<13> > output_r_address0;
    sc_out< sc_logic > output_r_ce0;
    sc_out< sc_logic > output_r_we0;
    sc_out< sc_lv<1> > output_r_d0;


    // Module declarations
    dut_reshape(sc_module_name name);
    SC_HAS_PROCESS(dut_reshape);

    ~dut_reshape();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<5> > ap_CS_fsm;
    sc_signal< sc_logic > ap_sig_cseq_ST_st1_fsm_0;
    sc_signal< bool > ap_sig_22;
    sc_signal< sc_lv<9> > c_cast2_fu_93_p1;
    sc_signal< sc_lv<9> > c_cast2_reg_188;
    sc_signal< sc_logic > ap_sig_cseq_ST_st2_fsm_1;
    sc_signal< bool > ap_sig_47;
    sc_signal< sc_lv<6> > c_1_fu_103_p2;
    sc_signal< sc_lv<6> > c_1_reg_196;
    sc_signal< sc_lv<3> > y_1_fu_115_p2;
    sc_signal< sc_lv<3> > y_1_reg_204;
    sc_signal< sc_logic > ap_sig_cseq_ST_st3_fsm_2;
    sc_signal< bool > ap_sig_58;
    sc_signal< sc_lv<4> > tmp_2_fu_125_p3;
    sc_signal< sc_lv<4> > tmp_2_reg_209;
    sc_signal< sc_lv<1> > exitcond1_fu_109_p2;
    sc_signal< sc_lv<3> > x_1_fu_143_p2;
    sc_signal< sc_lv<3> > x_1_reg_217;
    sc_signal< sc_logic > ap_sig_cseq_ST_st4_fsm_3;
    sc_signal< bool > ap_sig_73;
    sc_signal< sc_lv<9> > o_index_fu_162_p2;
    sc_signal< sc_lv<9> > o_index_reg_222;
    sc_signal< sc_lv<1> > exitcond_fu_137_p2;
    sc_signal< sc_lv<6> > c_reg_59;
    sc_signal< sc_lv<3> > y_reg_71;
    sc_signal< sc_lv<1> > exitcond2_fu_97_p2;
    sc_signal< sc_lv<3> > x_reg_82;
    sc_signal< sc_logic > ap_sig_cseq_ST_st5_fsm_4;
    sc_signal< bool > ap_sig_105;
    sc_signal< sc_lv<64> > tmp_7_fu_179_p1;
    sc_signal< sc_lv<64> > tmp_8_fu_184_p1;
    sc_signal< sc_lv<2> > tmp_fu_121_p1;
    sc_signal< sc_lv<4> > x_cast_fu_133_p1;
    sc_signal< sc_lv<4> > tmp_4_fu_149_p2;
    sc_signal< sc_lv<9> > tmp_5_fu_154_p3;
    sc_signal< sc_lv<5> > tmp_1_fu_167_p1;
    sc_signal< sc_lv<9> > i_index_fu_171_p3;
    sc_signal< sc_lv<5> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<5> ap_ST_st1_fsm_0;
    static const sc_lv<5> ap_ST_st2_fsm_1;
    static const sc_lv<5> ap_ST_st3_fsm_2;
    static const sc_lv<5> ap_ST_st4_fsm_3;
    static const sc_lv<5> ap_ST_st5_fsm_4;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<6> ap_const_lv6_0;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<6> ap_const_lv6_20;
    static const sc_lv<6> ap_const_lv6_1;
    static const sc_lv<3> ap_const_lv3_4;
    static const sc_lv<3> ap_const_lv3_1;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<5> ap_const_lv5_0;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_sig_105();
    void thread_ap_sig_22();
    void thread_ap_sig_47();
    void thread_ap_sig_58();
    void thread_ap_sig_73();
    void thread_ap_sig_cseq_ST_st1_fsm_0();
    void thread_ap_sig_cseq_ST_st2_fsm_1();
    void thread_ap_sig_cseq_ST_st3_fsm_2();
    void thread_ap_sig_cseq_ST_st4_fsm_3();
    void thread_ap_sig_cseq_ST_st5_fsm_4();
    void thread_c_1_fu_103_p2();
    void thread_c_cast2_fu_93_p1();
    void thread_exitcond1_fu_109_p2();
    void thread_exitcond2_fu_97_p2();
    void thread_exitcond_fu_137_p2();
    void thread_i_index_fu_171_p3();
    void thread_input_r_address0();
    void thread_input_r_ce0();
    void thread_o_index_fu_162_p2();
    void thread_output_r_address0();
    void thread_output_r_ce0();
    void thread_output_r_d0();
    void thread_output_r_we0();
    void thread_tmp_1_fu_167_p1();
    void thread_tmp_2_fu_125_p3();
    void thread_tmp_4_fu_149_p2();
    void thread_tmp_5_fu_154_p3();
    void thread_tmp_7_fu_179_p1();
    void thread_tmp_8_fu_184_p1();
    void thread_tmp_fu_121_p1();
    void thread_x_1_fu_143_p2();
    void thread_x_cast_fu_133_p1();
    void thread_y_1_fu_115_p2();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
