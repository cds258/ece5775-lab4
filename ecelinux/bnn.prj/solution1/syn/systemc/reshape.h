// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _reshape_HH_
#define _reshape_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct reshape : public sc_module {
    // Port declarations 13
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<13> > input_r_address0;
    sc_out< sc_logic > input_r_ce0;
    sc_in< sc_lv<1> > input_r_q0;
    sc_out< sc_lv<13> > output_r_address0;
    sc_out< sc_logic > output_r_ce0;
    sc_out< sc_logic > output_r_we0;
    sc_out< sc_lv<1> > output_r_d0;


    // Module declarations
    reshape(sc_module_name name);
    SC_HAS_PROCESS(reshape);

    ~reshape();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<5> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<9> > zext_ln130_fu_97_p1;
    sc_signal< sc_lv<9> > zext_ln130_reg_203;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<6> > c_fu_107_p2;
    sc_signal< sc_lv<6> > c_reg_211;
    sc_signal< sc_lv<3> > y_fu_119_p2;
    sc_signal< sc_lv<3> > y_reg_219;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<4> > shl_ln_fu_129_p3;
    sc_signal< sc_lv<4> > shl_ln_reg_224;
    sc_signal< sc_lv<1> > icmp_ln131_fu_113_p2;
    sc_signal< sc_lv<9> > zext_ln133_fu_137_p1;
    sc_signal< sc_lv<9> > zext_ln133_reg_229;
    sc_signal< sc_lv<3> > x_fu_147_p2;
    sc_signal< sc_lv<3> > x_reg_237;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<9> > o_index_fu_170_p2;
    sc_signal< sc_lv<9> > o_index_reg_242;
    sc_signal< sc_lv<1> > icmp_ln132_fu_141_p2;
    sc_signal< sc_lv<6> > c_0_reg_63;
    sc_signal< sc_lv<3> > y_0_reg_75;
    sc_signal< sc_lv<1> > icmp_ln130_fu_101_p2;
    sc_signal< sc_lv<3> > x_0_reg_86;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<64> > zext_ln135_fu_194_p1;
    sc_signal< sc_lv<64> > zext_ln135_1_fu_199_p1;
    sc_signal< sc_lv<2> > trunc_ln133_fu_125_p1;
    sc_signal< sc_lv<4> > zext_ln133_1_fu_153_p1;
    sc_signal< sc_lv<4> > add_ln133_fu_157_p2;
    sc_signal< sc_lv<9> > shl_ln133_1_fu_162_p3;
    sc_signal< sc_lv<5> > trunc_ln134_fu_175_p1;
    sc_signal< sc_lv<9> > tmp_fu_179_p4;
    sc_signal< sc_lv<9> > i_index_fu_189_p2;
    sc_signal< sc_lv<5> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<5> ap_ST_fsm_state1;
    static const sc_lv<5> ap_ST_fsm_state2;
    static const sc_lv<5> ap_ST_fsm_state3;
    static const sc_lv<5> ap_ST_fsm_state4;
    static const sc_lv<5> ap_ST_fsm_state5;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<6> ap_const_lv6_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<6> ap_const_lv6_20;
    static const sc_lv<6> ap_const_lv6_1;
    static const sc_lv<3> ap_const_lv3_4;
    static const sc_lv<3> ap_const_lv3_1;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<5> ap_const_lv5_0;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln133_fu_157_p2();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_c_fu_107_p2();
    void thread_i_index_fu_189_p2();
    void thread_icmp_ln130_fu_101_p2();
    void thread_icmp_ln131_fu_113_p2();
    void thread_icmp_ln132_fu_141_p2();
    void thread_input_r_address0();
    void thread_input_r_ce0();
    void thread_o_index_fu_170_p2();
    void thread_output_r_address0();
    void thread_output_r_ce0();
    void thread_output_r_d0();
    void thread_output_r_we0();
    void thread_shl_ln133_1_fu_162_p3();
    void thread_shl_ln_fu_129_p3();
    void thread_tmp_fu_179_p4();
    void thread_trunc_ln133_fu_125_p1();
    void thread_trunc_ln134_fu_175_p1();
    void thread_x_fu_147_p2();
    void thread_y_fu_119_p2();
    void thread_zext_ln130_fu_97_p1();
    void thread_zext_ln133_1_fu_153_p1();
    void thread_zext_ln133_fu_137_p1();
    void thread_zext_ln135_1_fu_199_p1();
    void thread_zext_ln135_fu_194_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
