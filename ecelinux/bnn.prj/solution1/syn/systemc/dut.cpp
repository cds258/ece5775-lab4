// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.2
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "dut.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic dut::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic dut::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<4> dut::ap_ST_st1_fsm_0 = "1";
const sc_lv<4> dut::ap_ST_st2_fsm_1 = "10";
const sc_lv<4> dut::ap_ST_st3_fsm_2 = "100";
const sc_lv<4> dut::ap_ST_st4_fsm_3 = "1000";
const sc_lv<32> dut::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> dut::ap_const_lv1_1 = "1";
const sc_lv<32> dut::ap_const_lv32_1 = "1";
const sc_lv<1> dut::ap_const_lv1_0 = "0";
const sc_lv<32> dut::ap_const_lv32_3 = "11";
const sc_lv<32> dut::ap_const_lv32_2 = "10";
const sc_lv<4> dut::ap_const_lv4_0 = "0000";
const sc_lv<6> dut::ap_const_lv6_0 = "000000";
const sc_lv<4> dut::ap_const_lv4_8 = "1000";
const sc_lv<4> dut::ap_const_lv4_1 = "1";
const sc_lv<5> dut::ap_const_lv5_0 = "00000";
const sc_lv<6> dut::ap_const_lv6_20 = "100000";
const sc_lv<6> dut::ap_const_lv6_1 = "1";

dut::dut(sc_module_name name) : sc_module(name), mVcdFile(0) {
    input_U = new dut_bnn_xcel_mem_conv1("input_U");
    input_U->clk(ap_clk);
    input_U->reset(ap_rst);
    input_U->address0(input_address0);
    input_U->ce0(input_ce0);
    input_U->we0(input_we0);
    input_U->d0(input_d0);
    input_U->q0(input_q0);
    grp_dut_bnn_xcel_fu_136 = new dut_bnn_xcel("grp_dut_bnn_xcel_fu_136");
    grp_dut_bnn_xcel_fu_136->ap_clk(ap_clk);
    grp_dut_bnn_xcel_fu_136->ap_rst(ap_rst);
    grp_dut_bnn_xcel_fu_136->ap_start(grp_dut_bnn_xcel_fu_136_ap_start);
    grp_dut_bnn_xcel_fu_136->ap_done(grp_dut_bnn_xcel_fu_136_ap_done);
    grp_dut_bnn_xcel_fu_136->ap_idle(grp_dut_bnn_xcel_fu_136_ap_idle);
    grp_dut_bnn_xcel_fu_136->ap_ready(grp_dut_bnn_xcel_fu_136_ap_ready);
    grp_dut_bnn_xcel_fu_136->input_r_address0(grp_dut_bnn_xcel_fu_136_input_r_address0);
    grp_dut_bnn_xcel_fu_136->input_r_ce0(grp_dut_bnn_xcel_fu_136_input_r_ce0);
    grp_dut_bnn_xcel_fu_136->input_r_q0(input_q0);
    grp_dut_bnn_xcel_fu_136->ap_return(grp_dut_bnn_xcel_fu_136_ap_return);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_Hi_assign_cast1_fu_186_p1);
    sensitive << ( Hi_assign_reg_125 );

    SC_METHOD(thread_Hi_assign_cast2_fu_182_p1);
    sensitive << ( Hi_assign_reg_125 );

    SC_METHOD(thread_ap_done);
    sensitive << ( strm_out_V_V_full_n );
    sensitive << ( ap_sig_cseq_ST_st4_fsm_3 );
    sensitive << ( grp_dut_bnn_xcel_fu_136_ap_done );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( strm_out_V_V_full_n );
    sensitive << ( ap_sig_cseq_ST_st4_fsm_3 );
    sensitive << ( grp_dut_bnn_xcel_fu_136_ap_done );

    SC_METHOD(thread_ap_sig_19);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_40);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_52);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_58);
    sensitive << ( strm_in_V_V_empty_n );
    sensitive << ( exitcond1_fu_158_p2 );

    SC_METHOD(thread_ap_sig_73);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_cseq_ST_st1_fsm_0);
    sensitive << ( ap_sig_19 );

    SC_METHOD(thread_ap_sig_cseq_ST_st2_fsm_1);
    sensitive << ( ap_sig_40 );

    SC_METHOD(thread_ap_sig_cseq_ST_st3_fsm_2);
    sensitive << ( ap_sig_73 );

    SC_METHOD(thread_ap_sig_cseq_ST_st4_fsm_3);
    sensitive << ( ap_sig_52 );

    SC_METHOD(thread_exitcond1_fu_158_p2);
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( ap_sig_58 );
    sensitive << ( i_reg_114 );

    SC_METHOD(thread_exitcond_fu_190_p2);
    sensitive << ( ap_sig_cseq_ST_st3_fsm_2 );
    sensitive << ( Hi_assign_reg_125 );

    SC_METHOD(thread_grp_dut_bnn_xcel_fu_136_ap_start);
    sensitive << ( ap_reg_grp_dut_bnn_xcel_fu_136_ap_start );

    SC_METHOD(thread_i_3_fu_164_p2);
    sensitive << ( i_reg_114 );

    SC_METHOD(thread_input_address0);
    sensitive << ( ap_sig_cseq_ST_st4_fsm_3 );
    sensitive << ( ap_sig_cseq_ST_st3_fsm_2 );
    sensitive << ( grp_dut_bnn_xcel_fu_136_input_r_address0 );
    sensitive << ( tmp_4_fu_215_p1 );

    SC_METHOD(thread_input_ce0);
    sensitive << ( ap_sig_cseq_ST_st4_fsm_3 );
    sensitive << ( ap_sig_cseq_ST_st3_fsm_2 );
    sensitive << ( grp_dut_bnn_xcel_fu_136_input_r_ce0 );

    SC_METHOD(thread_input_d0);
    sensitive << ( tmp_V_2_reg_228 );
    sensitive << ( ap_sig_cseq_ST_st3_fsm_2 );
    sensitive << ( Hi_assign_cast1_fu_186_p1 );

    SC_METHOD(thread_input_we0);
    sensitive << ( ap_sig_cseq_ST_st3_fsm_2 );
    sensitive << ( exitcond_fu_190_p2 );

    SC_METHOD(thread_j_fu_196_p2);
    sensitive << ( Hi_assign_reg_125 );

    SC_METHOD(thread_strm_in_V_V_blk_n);
    sensitive << ( strm_in_V_V_empty_n );
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( exitcond1_fu_158_p2 );

    SC_METHOD(thread_strm_in_V_V_read);
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( exitcond1_fu_158_p2 );
    sensitive << ( ap_sig_58 );

    SC_METHOD(thread_strm_out_V_V_blk_n);
    sensitive << ( strm_out_V_V_full_n );
    sensitive << ( ap_sig_cseq_ST_st4_fsm_3 );

    SC_METHOD(thread_strm_out_V_V_din);
    sensitive << ( strm_out_V_V_full_n );
    sensitive << ( ap_sig_cseq_ST_st4_fsm_3 );
    sensitive << ( grp_dut_bnn_xcel_fu_136_ap_done );
    sensitive << ( grp_dut_bnn_xcel_fu_136_ap_return );

    SC_METHOD(thread_strm_out_V_V_write);
    sensitive << ( strm_out_V_V_full_n );
    sensitive << ( ap_sig_cseq_ST_st4_fsm_3 );
    sensitive << ( grp_dut_bnn_xcel_fu_136_ap_done );

    SC_METHOD(thread_tmp_3_fu_210_p2);
    sensitive << ( tmp_s_reg_233 );
    sensitive << ( Hi_assign_cast2_fu_182_p1 );

    SC_METHOD(thread_tmp_4_fu_215_p1);
    sensitive << ( tmp_3_fu_210_p2 );

    SC_METHOD(thread_tmp_fu_170_p1);
    sensitive << ( i_reg_114 );

    SC_METHOD(thread_tmp_s_fu_174_p3);
    sensitive << ( tmp_fu_170_p1 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( strm_out_V_V_full_n );
    sensitive << ( exitcond1_fu_158_p2 );
    sensitive << ( ap_sig_58 );
    sensitive << ( grp_dut_bnn_xcel_fu_136_ap_done );
    sensitive << ( exitcond_fu_190_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "0001";
    ap_reg_grp_dut_bnn_xcel_fu_136_ap_start = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "dut_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, strm_in_V_V_dout, "(port)strm_in_V_V_dout");
    sc_trace(mVcdFile, strm_in_V_V_empty_n, "(port)strm_in_V_V_empty_n");
    sc_trace(mVcdFile, strm_in_V_V_read, "(port)strm_in_V_V_read");
    sc_trace(mVcdFile, strm_out_V_V_din, "(port)strm_out_V_V_din");
    sc_trace(mVcdFile, strm_out_V_V_full_n, "(port)strm_out_V_V_full_n");
    sc_trace(mVcdFile, strm_out_V_V_write, "(port)strm_out_V_V_write");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st1_fsm_0, "ap_sig_cseq_ST_st1_fsm_0");
    sc_trace(mVcdFile, ap_sig_19, "ap_sig_19");
    sc_trace(mVcdFile, strm_in_V_V_blk_n, "strm_in_V_V_blk_n");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st2_fsm_1, "ap_sig_cseq_ST_st2_fsm_1");
    sc_trace(mVcdFile, ap_sig_40, "ap_sig_40");
    sc_trace(mVcdFile, exitcond1_fu_158_p2, "exitcond1_fu_158_p2");
    sc_trace(mVcdFile, strm_out_V_V_blk_n, "strm_out_V_V_blk_n");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st4_fsm_3, "ap_sig_cseq_ST_st4_fsm_3");
    sc_trace(mVcdFile, ap_sig_52, "ap_sig_52");
    sc_trace(mVcdFile, i_3_fu_164_p2, "i_3_fu_164_p2");
    sc_trace(mVcdFile, i_3_reg_223, "i_3_reg_223");
    sc_trace(mVcdFile, ap_sig_58, "ap_sig_58");
    sc_trace(mVcdFile, tmp_V_2_reg_228, "tmp_V_2_reg_228");
    sc_trace(mVcdFile, tmp_s_fu_174_p3, "tmp_s_fu_174_p3");
    sc_trace(mVcdFile, tmp_s_reg_233, "tmp_s_reg_233");
    sc_trace(mVcdFile, j_fu_196_p2, "j_fu_196_p2");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st3_fsm_2, "ap_sig_cseq_ST_st3_fsm_2");
    sc_trace(mVcdFile, ap_sig_73, "ap_sig_73");
    sc_trace(mVcdFile, input_address0, "input_address0");
    sc_trace(mVcdFile, input_ce0, "input_ce0");
    sc_trace(mVcdFile, input_we0, "input_we0");
    sc_trace(mVcdFile, input_d0, "input_d0");
    sc_trace(mVcdFile, input_q0, "input_q0");
    sc_trace(mVcdFile, grp_dut_bnn_xcel_fu_136_ap_start, "grp_dut_bnn_xcel_fu_136_ap_start");
    sc_trace(mVcdFile, grp_dut_bnn_xcel_fu_136_ap_done, "grp_dut_bnn_xcel_fu_136_ap_done");
    sc_trace(mVcdFile, grp_dut_bnn_xcel_fu_136_ap_idle, "grp_dut_bnn_xcel_fu_136_ap_idle");
    sc_trace(mVcdFile, grp_dut_bnn_xcel_fu_136_ap_ready, "grp_dut_bnn_xcel_fu_136_ap_ready");
    sc_trace(mVcdFile, grp_dut_bnn_xcel_fu_136_input_r_address0, "grp_dut_bnn_xcel_fu_136_input_r_address0");
    sc_trace(mVcdFile, grp_dut_bnn_xcel_fu_136_input_r_ce0, "grp_dut_bnn_xcel_fu_136_input_r_ce0");
    sc_trace(mVcdFile, grp_dut_bnn_xcel_fu_136_ap_return, "grp_dut_bnn_xcel_fu_136_ap_return");
    sc_trace(mVcdFile, i_reg_114, "i_reg_114");
    sc_trace(mVcdFile, exitcond_fu_190_p2, "exitcond_fu_190_p2");
    sc_trace(mVcdFile, Hi_assign_reg_125, "Hi_assign_reg_125");
    sc_trace(mVcdFile, ap_reg_grp_dut_bnn_xcel_fu_136_ap_start, "ap_reg_grp_dut_bnn_xcel_fu_136_ap_start");
    sc_trace(mVcdFile, tmp_4_fu_215_p1, "tmp_4_fu_215_p1");
    sc_trace(mVcdFile, tmp_fu_170_p1, "tmp_fu_170_p1");
    sc_trace(mVcdFile, Hi_assign_cast1_fu_186_p1, "Hi_assign_cast1_fu_186_p1");
    sc_trace(mVcdFile, Hi_assign_cast2_fu_182_p1, "Hi_assign_cast2_fu_182_p1");
    sc_trace(mVcdFile, tmp_3_fu_210_p2, "tmp_3_fu_210_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("dut.hdltvin.dat");
    mHdltvoutHandle.open("dut.hdltvout.dat");
}

dut::~dut() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete input_U;
    delete grp_dut_bnn_xcel_fu_136;
}

void dut::thread_ap_clk_no_reset_() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_190_p2.read()))) {
        Hi_assign_reg_125 = j_fu_196_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && 
                esl_seteq<1,1,1>(exitcond1_fu_158_p2.read(), ap_const_lv1_0) && 
                !ap_sig_58.read())) {
        Hi_assign_reg_125 = ap_const_lv6_0;
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_st1_fsm_0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_grp_dut_bnn_xcel_fu_136_ap_start = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && 
             !ap_sig_58.read() && 
             !esl_seteq<1,1,1>(exitcond1_fu_158_p2.read(), ap_const_lv1_0))) {
            ap_reg_grp_dut_bnn_xcel_fu_136_ap_start = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_dut_bnn_xcel_fu_136_ap_ready.read())) {
            ap_reg_grp_dut_bnn_xcel_fu_136_ap_start = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read()) && 
         !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_190_p2.read()))) {
        i_reg_114 = i_3_reg_223.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
                !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        i_reg_114 = ap_const_lv4_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && !ap_sig_58.read())) {
        i_3_reg_223 = i_3_fu_164_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && esl_seteq<1,1,1>(exitcond1_fu_158_p2.read(), ap_const_lv1_0) && !ap_sig_58.read())) {
        tmp_V_2_reg_228 = strm_in_V_V_dout.read();
        tmp_s_reg_233 = tmp_s_fu_174_p3.read();
    }
}

void dut::thread_Hi_assign_cast1_fu_186_p1() {
    Hi_assign_cast1_fu_186_p1 = esl_zext<32,6>(Hi_assign_reg_125.read());
}

void dut::thread_Hi_assign_cast2_fu_182_p1() {
    Hi_assign_cast2_fu_182_p1 = esl_zext<8,6>(Hi_assign_reg_125.read());
}

void dut::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_3.read()) && 
         !(esl_seteq<1,1,1>(strm_out_V_V_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_const_logic_0, grp_dut_bnn_xcel_fu_136_ap_done.read())))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void dut::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void dut::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_3.read()) && 
         !(esl_seteq<1,1,1>(strm_out_V_V_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_const_logic_0, grp_dut_bnn_xcel_fu_136_ap_done.read())))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void dut::thread_ap_sig_19() {
    ap_sig_19 = esl_seteq<1,1,1>(ap_CS_fsm.read().range(0, 0), ap_const_lv1_1);
}

void dut::thread_ap_sig_40() {
    ap_sig_40 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(1, 1));
}

void dut::thread_ap_sig_52() {
    ap_sig_52 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(3, 3));
}

void dut::thread_ap_sig_58() {
    ap_sig_58 = (esl_seteq<1,1,1>(exitcond1_fu_158_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(strm_in_V_V_empty_n.read(), ap_const_logic_0));
}

void dut::thread_ap_sig_73() {
    ap_sig_73 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(2, 2));
}

void dut::thread_ap_sig_cseq_ST_st1_fsm_0() {
    if (ap_sig_19.read()) {
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    }
}

void dut::thread_ap_sig_cseq_ST_st2_fsm_1() {
    if (ap_sig_40.read()) {
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    }
}

void dut::thread_ap_sig_cseq_ST_st3_fsm_2() {
    if (ap_sig_73.read()) {
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_0;
    }
}

void dut::thread_ap_sig_cseq_ST_st4_fsm_3() {
    if (ap_sig_52.read()) {
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_0;
    }
}

void dut::thread_exitcond1_fu_158_p2() {
    exitcond1_fu_158_p2 = (!i_reg_114.read().is_01() || !ap_const_lv4_8.is_01())? sc_lv<1>(): sc_lv<1>(i_reg_114.read() == ap_const_lv4_8);
}

void dut::thread_exitcond_fu_190_p2() {
    exitcond_fu_190_p2 = (!Hi_assign_reg_125.read().is_01() || !ap_const_lv6_20.is_01())? sc_lv<1>(): sc_lv<1>(Hi_assign_reg_125.read() == ap_const_lv6_20);
}

void dut::thread_grp_dut_bnn_xcel_fu_136_ap_start() {
    grp_dut_bnn_xcel_fu_136_ap_start = ap_reg_grp_dut_bnn_xcel_fu_136_ap_start.read();
}

void dut::thread_i_3_fu_164_p2() {
    i_3_fu_164_p2 = (!i_reg_114.read().is_01() || !ap_const_lv4_1.is_01())? sc_lv<4>(): (sc_biguint<4>(i_reg_114.read()) + sc_biguint<4>(ap_const_lv4_1));
}

void dut::thread_input_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read())) {
        input_address0 =  (sc_lv<13>) (tmp_4_fu_215_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_3.read())) {
        input_address0 = grp_dut_bnn_xcel_fu_136_input_r_address0.read();
    } else {
        input_address0 = "XXXXXXXXXXXXX";
    }
}

void dut::thread_input_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read())) {
        input_ce0 = ap_const_logic_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_3.read())) {
        input_ce0 = grp_dut_bnn_xcel_fu_136_input_r_ce0.read();
    } else {
        input_ce0 = ap_const_logic_0;
    }
}

void dut::thread_input_d0() {
    input_d0 = (!Hi_assign_cast1_fu_186_p1.read().is_01() || sc_biguint<32>(Hi_assign_cast1_fu_186_p1.read()).to_uint() >= 32)? sc_lv<1>(): tmp_V_2_reg_228.read().range(sc_biguint<32>(Hi_assign_cast1_fu_186_p1.read()).to_uint(), sc_biguint<32>(Hi_assign_cast1_fu_186_p1.read()).to_uint());
}

void dut::thread_input_we0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_190_p2.read())))) {
        input_we0 = ap_const_logic_1;
    } else {
        input_we0 = ap_const_logic_0;
    }
}

void dut::thread_j_fu_196_p2() {
    j_fu_196_p2 = (!Hi_assign_reg_125.read().is_01() || !ap_const_lv6_1.is_01())? sc_lv<6>(): (sc_biguint<6>(Hi_assign_reg_125.read()) + sc_biguint<6>(ap_const_lv6_1));
}

void dut::thread_strm_in_V_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && 
         esl_seteq<1,1,1>(exitcond1_fu_158_p2.read(), ap_const_lv1_0))) {
        strm_in_V_V_blk_n = strm_in_V_V_empty_n.read();
    } else {
        strm_in_V_V_blk_n = ap_const_logic_1;
    }
}

void dut::thread_strm_in_V_V_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && 
         esl_seteq<1,1,1>(exitcond1_fu_158_p2.read(), ap_const_lv1_0) && 
         !ap_sig_58.read())) {
        strm_in_V_V_read = ap_const_logic_1;
    } else {
        strm_in_V_V_read = ap_const_logic_0;
    }
}

void dut::thread_strm_out_V_V_blk_n() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_3.read())) {
        strm_out_V_V_blk_n = strm_out_V_V_full_n.read();
    } else {
        strm_out_V_V_blk_n = ap_const_logic_1;
    }
}

void dut::thread_strm_out_V_V_din() {
    strm_out_V_V_din = grp_dut_bnn_xcel_fu_136_ap_return.read();
}

void dut::thread_strm_out_V_V_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_3.read()) && 
         !(esl_seteq<1,1,1>(strm_out_V_V_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_const_logic_0, grp_dut_bnn_xcel_fu_136_ap_done.read())))) {
        strm_out_V_V_write = ap_const_logic_1;
    } else {
        strm_out_V_V_write = ap_const_logic_0;
    }
}

void dut::thread_tmp_3_fu_210_p2() {
    tmp_3_fu_210_p2 = (!Hi_assign_cast2_fu_182_p1.read().is_01() || !tmp_s_reg_233.read().is_01())? sc_lv<8>(): (sc_biguint<8>(Hi_assign_cast2_fu_182_p1.read()) + sc_biguint<8>(tmp_s_reg_233.read()));
}

void dut::thread_tmp_4_fu_215_p1() {
    tmp_4_fu_215_p1 = esl_zext<64,8>(tmp_3_fu_210_p2.read());
}

void dut::thread_tmp_fu_170_p1() {
    tmp_fu_170_p1 = i_reg_114.read().range(3-1, 0);
}

void dut::thread_tmp_s_fu_174_p3() {
    tmp_s_fu_174_p3 = esl_concat<3,5>(tmp_fu_170_p1.read(), ap_const_lv5_0);
}

void dut::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if (!esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) {
                ap_NS_fsm = ap_ST_st2_fsm_1;
            } else {
                ap_NS_fsm = ap_ST_st1_fsm_0;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(exitcond1_fu_158_p2.read(), ap_const_lv1_0) && !ap_sig_58.read())) {
                ap_NS_fsm = ap_ST_st3_fsm_2;
            } else if ((!ap_sig_58.read() && !esl_seteq<1,1,1>(exitcond1_fu_158_p2.read(), ap_const_lv1_0))) {
                ap_NS_fsm = ap_ST_st4_fsm_3;
            } else {
                ap_NS_fsm = ap_ST_st2_fsm_1;
            }
            break;
        case 4 : 
            if (esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_190_p2.read())) {
                ap_NS_fsm = ap_ST_st3_fsm_2;
            } else {
                ap_NS_fsm = ap_ST_st2_fsm_1;
            }
            break;
        case 8 : 
            if (!(esl_seteq<1,1,1>(strm_out_V_V_full_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_const_logic_0, grp_dut_bnn_xcel_fu_136_ap_done.read()))) {
                ap_NS_fsm = ap_ST_st1_fsm_0;
            } else {
                ap_NS_fsm = ap_ST_st4_fsm_3;
            }
            break;
        default : 
            ap_NS_fsm =  (sc_lv<4>) ("XXXX");
            break;
    }
}

void dut::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"strm_in_V_V_dout\" :  \"" << strm_in_V_V_dout.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"strm_in_V_V_empty_n\" :  \"" << strm_in_V_V_empty_n.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"strm_in_V_V_read\" :  \"" << strm_in_V_V_read.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"strm_out_V_V_din\" :  \"" << strm_out_V_V_din.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"strm_out_V_V_full_n\" :  \"" << strm_out_V_V_full_n.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"strm_out_V_V_write\" :  \"" << strm_out_V_V_write.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

